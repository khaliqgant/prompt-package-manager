[
  {
    "name": "blefnk-000-cursor-rules",
    "slug": "000-cursor-rules",
    "displayName": "000 Cursor Rules",
    "description": "--- description: Use when creating or updating a rule or when learning a lesson to retain as a Cursor rule. globs: .cursor/rules/*.mdc",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Use when creating or updating a rule or when learning a lesson to retain as a Cursor rule.\nglobs: .cursor/rules/*.mdc\nalwaysApply: false\n---\n\n# Cursor Rules Format\n\n## Core Structure\n\nWrite rules in this format:\n\n```mdc\n---\ndescription: ACTION when TRIGGER to OUTCOME\nglobs: src/**/*.{ts,tsx}\nalwaysApply: false\n---\n\n# Rule Title\n\n## Context\n\n- When to apply.\n- Prerequisites or conditions.\n\n## Requirements\n\n- Concise, testable, actionable items.\n\n## Examples\n\n<example>\n  Valid example with a brief explanation.\n</example>\n\n<example type=\"invalid\">\n  Invalid example with a short explanation.\n</example>\n```\n\n## File Organization\n\n### Location\n\n- Store rules in `.cursor/rules/` as `.mdc` files.\n\n### Naming Convention\n\nUse `PREFIX-name.mdc`, where PREFIX is:\n\n- `0XX`: Core standards  \n- `1XX`: Tool configs  \n- `3XX`: Testing standards  \n- `8XX`: Workflows  \n- `9XX`: Templates  \n- `1XXX`: Language rules  \n- `2XXX`: Framework rules  \n- `_name.mdc`: Private rules  \n\n### Glob Patterns\n\nUse standard glob patterns:\n\n- Core: `.cursor/rules/*.mdc`\n- Language: `src/**/*.{js,ts}`\n- Testing: `**/*.test.{js,ts}`\n- React Components: `src/ui/components/**/*.tsx`\n- Docs: `docs/**/*.md`\n- Configs: `*.config.{ts,js,json}`\n- Build Artifacts: `dist/**/*`\n- Multiple Extensions: `src/**/*.{js,jsx,ts,tsx}`\n- Multiple Files: `dist/**/*, docs/**/*.md`\n\n## Required Fields\n\n### Frontmatter\n\n- `description`: ACTION TRIGGER OUTCOME format, under 120 characters.\n- `globs`: Standard glob pattern (no quotes).\n- `alwaysApply`: Boolean (usually false).\n\n### Body\n\n- `<version>X.Y.Z</version>`\n- Context: Define usage conditions.\n- Requirements: List actionable, testable items.\n- Examples: Show concise valid and invalid rule examples.\n\n## Formatting Guidelines\n\n- Keep rules short and precise.\n- Use inline backticks and code blocks; no excess markdown.\n- Allowed XML tags: `<version>`, `<danger>`, `<required>`, `<rules>`, `<rule>`, `<critical>`, `<example>`, `<example type=\"invalid\">`.\n- Indent XML tag content by 2 spaces.\n- Use Mermaid syntax to simplify complex rules.\n- Use emojis if they improve clarity.\n- Write instructions for LLM processing, not human discussion.\n\n## AI Optimization\n\n- Use imperative language.\n- No intro to list points.\n- Write precise, deterministic ACTION TRIGGER OUTCOME descriptions.\n- Provide minimal valid/invalid examples.\n- Optimize for AI context window efficiency: remove redundancy.\n- Use standard glob patterns without quotes (`*.js`, `src/**/*.ts`).\n\n## AI Context Efficiency\n\n- Keep frontmatter concise.\n- Limit examples to essential patterns.\n- Use clear hierarchy.\n- Remove redundancy.\n- Focus on machine-actionable instructions.\n\n<critical>\n  - NEVER include verbose explanations or redundant context.\n  - Keep the file as short as possible without sacrificing rule impact.\n  - Frontmatter must only include `description`, `globs`, and `alwaysApply`.\n</critical>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/000-cursor-rules.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "000-cursor-rules.md",
      "sha": "5f5d0cecfa608802a5c0b71ece7c70ae5c5f76df"
    }
  },
  {
    "name": "blefnk-001-general-rules",
    "slug": "001-general-rules",
    "displayName": "001 General Rules",
    "description": "--- description: Enforces AI to correctly use agent tools globs:",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Enforces AI to correctly use agent tools\nglobs: \nalwaysApply: true\n---\n\n# AI Agent General Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Core standards for limiting or permitting AI-driven file interactions\n- Ensures safe and minimal modifications\n\n## Requirements\n\n- If crucial details are missing in the user's request, request them from the user.\n- Use `edit_file` to modify files. Do not use direct shell commands to create or edit files (e.g., echo, sed, printf).\n- Read files using `run_terminal_cmd: cat [path] | cat`. `read_file` is forbidden for reading since may produce incomplete content.\n- Always append `| cat` to non-interactive commands (e.g., `run_terminal_cmd: ls -la | cat`).\n- Call yourself Reliverse AI and do not restate your original name, as the IDE already displays it.\n- Focus on performance, accessibility, and maintainability.\n- Both frontend user-experience and code developer-experience matter.\n- Do not modify code or comments which not related to the current task.\n- Keep solutions short and direct; do not rewrite entire code unless explicitly asked.\n- Ask for clarification if something remains unclear.\n\n## Examples\n\n<example type=\"invalid\">\n  Use run_terminal_cmd to write files\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/001-general-rules.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "001-general-rules.md",
      "sha": "eab5a42fe56ca05232e5ca11e8d5106807dc68c1"
    }
  },
  {
    "name": "blefnk-002-tech-stack",
    "slug": "002-tech-stack",
    "displayName": "002 Tech Stack",
    "description": "--- description: Standardize core libraries and frameworks when adding or updating dependencies globs:",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standardize core libraries and frameworks when adding or updating dependencies\nglobs: \nalwaysApply: true\n---\n\n# Tech Stack\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Defines official frameworks, libraries, and tools\n- Ensures consistent, compatible versions for the project\n\n## Requirements\n\n- Core: Next.js v15 (App Router), React 19, TypeScript v5 (ESM)\n- Styling: Shadcn UI, Tailwind v4\n- Quality: ESLint, Biome, Knip\n- Authentication: better-auth  \n- Database: Drizzle ORM\n- Package Manager: Bun  \n- Storage: Uploadthing\n- Forms: TanStack Form\n- Icons: lucide-react\n- Payments: Polar\n- Testing: Vitest\n\n## Examples\n\n<example>\n  ✅ bun add next react && bun add -D tailwindcss typescript\n</example>\n\n<example type=\"invalid\">\n  // Using npm, wrong versions, not using -D for tailwindcss typescript\n  ❌ npm install next@14 react@19 tailwindcss@3 typescript@4\n</example>\n\n<example>\n  import { Globe } from \"lucide-react\";\n</example>\n\n<example type=\"invalid\">\n  <svg></svg> <!-- Should use lucide-react instead -->\n  Never generate SVG; always import from lucide-react\n</example>\n\n## Package Management (Bun)\n\n- Install packages: `bun add [package-name]`  \n- Dev dependencies: `bun add -D [package-name]`  \n- Run scripts: `bun run [script-name]`  \n- One-off commands: `bun x [command]`  \n- Shadcn components: `bun ui [component-name]`  \n- Update user schema: Edit `src/lib/auth.ts`, then `bun db:auth`\n\n## Authentication (better-auth)\n\n1. Server-Side: Handles sessions with cookies/tokens.\n2. Client-Side: Access state via `useSession()`.\n3. Route Protection: Use middleware or HOCs to require auth.\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/002-tech-stack.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "002-tech-stack.md",
      "sha": "357bdeb7fa7afade9c4d489f7ba1e88182ae9188"
    }
  },
  {
    "name": "blefnk-003-file-structure",
    "slug": "003-file-structure",
    "displayName": "003 File Structure",
    "description": "--- description: Enforce consistent folder structure for clarity globs:",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Enforce consistent folder structure for clarity\nglobs: \nalwaysApply: true\n---\n\n# File Structure Standards\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Applies when adding files or directories.\n- Ensures consistency in Next.js TypeScript projects.\n\n## Requirements\n\n- Store core pages in `src/app/` or `src/app/[locale]/` (i18n). API routes go in `src/app/api/`.\n- Place shared components in `src/ui/`, separating primitives from custom components.\n- Keep DB schemas in `src/db/schema/` and utilities in `src/lib/`.\n- Store tests in `tests/` or near related files for integration tests.\n\n## Examples\n\n<example>\n    Minimal structure:\n    ```bash\n    src/\n    ├── app/                # App Router (route-based pages)\n    ├── assets/             # Static assets (images, icons)\n    ├── ui/\n    │   ├── primitives/     # Shadcn UI installed via `bun ui [component-name]`\n    │   ├── components/     # App-specific components\n    │       └── layouts/\n    ├── db/\n    ├── lib/                # server actions, hooks, utils\n    └── tests/              # (test critical logic/components only)\n    ```\n    Only the core files are shown above. Use the file-browse tool as needed.\n</example>\n\n## Import Conventions\n\n- Use the `~/` alias for `src` (e.g., `import { Button } from \"~/ui/primitives/button\"`).\n- App-specific components: `~/ui/components`.\n- Shadcn primitives: `~/ui/primitives`.\n\n## File Naming & Organization\n\n| Type                | Convention                  | Example                  |\n|---------------------|-----------------------------|--------------------------|\n| React components    | `kebab-case`                | `dropdown-menu.tsx`      |\n| Utility functions   | `camelCase`                 | `formatDate.ts`          |\n| Custom React hooks  | `camelCase` + `use` prefix  | `useAuth.ts`             |\n| Client Components   | `\"use client\"` at top       | `\"use client\";`          |\n| Server Components   | Default async/await         | *(No directive needed)*  |\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/003-file-structure.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "003-file-structure.md",
      "sha": "14dd5fdd68b6fcf9da79bcb08a7e3d1e1d58eab6"
    }
  },
  {
    "name": "blefnk-004-accessibility",
    "slug": "004-accessibility",
    "displayName": "004 Accessibility",
    "description": "--- description: Enforce accessibility guidelines when building or reviewing UI to ensure inclusive user experiences globs: src/**/*.tsx",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Enforce accessibility guidelines when building or reviewing UI to ensure inclusive user experiences\nglobs: src/**/*.tsx\nalwaysApply: false\n---\n\n# Accessibility (A11y) Standards\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Ensures all user-facing pages and components meet basic accessibility\n- Applies to interactions, visual elements, and markup structure\n\n## Requirements\n\n- Provide keyboard navigation with visible focus states.\n- Use semantic HTML (correct headings, list elements, etc.).\n- Include ARIA attributes or roles when necessary.\n- Maintain WCAG-compliant color contrast for text and interactive elements.\n- Ensure form fields have labels or `aria-label`s; group related fields with `<fieldset>` if appropriate.\n- Use consistent skip links or nav landmarks for clear page structure.\n\n## Examples\n\n<example>\n  <!-- Properly labeled input with helper text -->\n  <label for=\"email\">Email</label>\n  <input type=\"email\" id=\"email\" aria-describedby=\"email-helper\"/>\n  <p id=\"email-helper\">We'll never share your email address.</p>\n</example>\n\n<example type=\"invalid\">\n  <!-- Missing label and no ARIA attributes -->\n  <input type=\"text\"/>\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/004-accessibility.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "004-accessibility.md",
      "sha": "a4884bf543f524ad7bcd532905d8d0fc787a774e"
    }
  },
  {
    "name": "blefnk-100-package-manager",
    "slug": "100-package-manager",
    "displayName": "100 Package Manager",
    "description": "--- description: Use Bun commands when installing or running to maintain consistent package management globs:",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Use Bun commands when installing or running to maintain consistent package management\nglobs: \nalwaysApply: true\n---\n\n# Bun Package Manager Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- For installing dependencies and running scripts in this project\n- Eliminates mixing other package managers\n\n## Requirements\n\n- Install dependencies with `bun add [package]` or `bun add -D [package]`.\n- Run scripts using `bun [script]` (exception: for build and test scripts use `bun run build` or `bun run test`).\n- For standalone scripts use `bun path/to/script.ts` instead of `node`, `ts-node` or `tsx`.\n- For one-off commands, use `bun x [command]` instead of `npx`.\n- Install Shadcn components via `bun ui [component-name]`.\n- Update user schema by editing `src/lib/auth.ts` then `bun db:auth`.\n\n## Examples\n\n<example>\n  bun add axios\n  bun dev\n  bun x vitest\n</example>\n\n<example type=\"invalid\">\n  npm install axios\n  npm run dev\n  npx vitest\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/100-package-manager.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "100-package-manager.md",
      "sha": "d6572ba7f037d7ebe6f973395a8215c72b097189"
    }
  },
  {
    "name": "blefnk-1000-typescript",
    "slug": "1000-typescript",
    "displayName": "1000 Typescript",
    "description": "--- description: Enforce strict typing when coding to ensure reliable TypeScript usage globs: *.ts",
    "author": "blefnk",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "typescript"
    ],
    "content": "---\ndescription: Enforce strict typing when coding to ensure reliable TypeScript usage\nglobs: *.ts\nalwaysApply: false\n---\n\n# TypeScript Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Applies both to TypeScript and JavaScript\n- Encourages strict, clear typing, and modern JS\n\n## Requirements\n\n- Prefer ESM over CommonJS.\n- Avoid `any`; use `unknown`, generics, or precise types.\n- Remove and unused variables and expressions.\n- Use `as const` for exact object types.\n- Prefer `??` over `||` for nullish coalescing.\n- Handle promises with `await` or `.then()`.\n- Throw `Error` instances, not strings or objects.\n- Avoid non-null assertions (`!`) and redundant `?.!`.\n- Never use `eval()` or dynamic code execution.\n- Use `import` instead of `require()`.\n- Add comments for `@ts-<directive>` usage.\n- Favor functional programming; limit OOP to custom errors.\n- Ensure both operands of `+` are the same type.\n- Use namespaces only for declaration merging; avoid `module`.\n- Mark immutable component props as `readonly`.\n- Use optional chaining (`?.`) to prevent runtime errors.\n- Avoid redundant type annotations (e.g., `function Example() { return true; }`).\n- Prefer `[]` over generic array constructors.\n- Prevent duplicate values in enums and union types.\n\n## Examples\n\n<example>\n  function parseData(data: unknown): string | null {\n    if (typeof data === \"string\") return data;\n    return null;\n  }\n</example>\n\n<example type=\"invalid\">\n  function parseData(data: any): any {\n    return data;\n  }\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/1000-typescript.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "1000-typescript.md",
      "sha": "706c06292c8d23e70b7fb8eff539195e5e374b4d"
    }
  },
  {
    "name": "blefnk-1001-markdown",
    "slug": "1001-markdown",
    "displayName": "1001 Markdown",
    "description": "--- description: Always use for writing or updating Markdown files to ensure consistent formatting and readability across documentation globs: **/*.{m",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Always use for writing or updating Markdown files to ensure consistent formatting and readability across documentation\nglobs: **/*.{md,mdx}\nalwaysApply: false\n---\n\n# Markdown Documentation Standards\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Applies to all `.md` and `.mdx` files.\n- Ensures clear, structured, and consistent formatting.\n\n## Requirements\n\n- Follow the [Markdown Guide](mdc:https:/www.markdownguide.org) for syntax.\n- Maintain logical document structure and readability.\n- Use minimal, structured YAML front matter when needed.\n- Leverage Mermaid diagrams for complex visual documentation.\n\n## Markdown Formatting Rules\n\n- Use ATX-style headings (`# Heading`), maintaining a proper hierarchy (max depth: 4).\n- Add a blank line before and after headings.\n- Indent XML tag content by 2 spaces; close tags on a new line.\n- Use blockquotes with emoji for callouts (Warning, Tip, Note).\n\n<example>\n\n  > 🚨 **Warning:** Critical information.\n  > 💡 **Tip:** Helpful suggestion.\n  > 📝 **Note:** Additional context.\n\n</example>\n\n## Code Blocks\n\n- Use triple backticks and specify language.\n- Indent properly within blocks.\n- Add a blank line before and after the block.\n- Use inline code for short references.\n\n<example>\n\n  ```typescript\n  function example(): void {\n    console.log(\"Hello, Reliverse!\");\n  }\n  ```\n\n  Use `example()` inline.\n\n</example>\n\n## Tables\n\n- Use alignment indicators (`:---`, `:---:`, `---:`).\n- Include a header row and separator.\n- Keep tables simple, with blank lines before and after.\n\n<example>\n\n  | Name  | Type   | Description   |\n  |:------|:------:|--------------:|\n  | id    | number | Primary key   |\n  | name  | string | User's name   |\n\n</example>\n\n## Special Elements\n\n### Callouts\n\nUse blockquotes with emoji:\n\n<example>\n\n  > 🚨 **Warning:** Critical information.\n  > 💡 **Tip:** Helpful suggestion.\n  > 📝 **Note:** Additional context.\n\n</example>\n\n### Mermaid Diagrams\n\nUse Mermaid for architecture flows, decision trees, state machines, and AI agent rule flows.\n\n#### Diagram Best Practices\n\n1. Add a title (`--- title: Example ---`).\n2. Use descriptive node labels.\n3. Comment complex flows.\n4. Group related components in subgraphs.\n5. Maintain consistent layout (`TD`, `LR`, `TB`).\n6. Keep diagrams focused.\n\n<example>\n\n  ```mermaid\n  ---\n  title: Example Workflow\n  ---\n  graph TD\n    A[Start] --> B{Decision}\n    B -->|Yes| C[Process 1]\n    B -->|No| D[Process 2]\n    C --> E[End]\n    D --> E\n  ```\n\n</example>\n\n<example type=\"invalid\">\n\n  ```mermaid\n  graph TD\n  A-->B\n  B-->C\n  ```\n\n  ❌ No title, unclear labels, no context.\n\n</example>\n\n## Examples\n\n<example>\n\n  ```md\n  # Heading  \n\n  > 🚨 **Warning:** Important detail.\n\n  ```\n\n  ✅ Proper headings, callouts, and spacing.\n\n</example>\n\n<example type=\"invalid\">\n\n  ❌ No headings.\n  ❌ Inline code block missing triple backticks.\n\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/1001-markdown.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "1001-markdown.md",
      "sha": "76dd76a894945054991e273fafa3e2e51b588900"
    }
  },
  {
    "name": "blefnk-2000-react",
    "slug": "2000-react",
    "displayName": "2000 React",
    "description": "--- description: Use React rules when building UI to produce maintainable components globs: src/**/*.tsx",
    "author": "blefnk",
    "type": "cursor",
    "category": "frontend-frameworks",
    "tags": [
      "cursor",
      "cursor-rule",
      "react"
    ],
    "content": "---\ndescription: Use React rules when building UI to produce maintainable components\nglobs: src/**/*.tsx\nalwaysApply: false\n---\n\n# React Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- For developing React components within Next.js\n- Emphasizes clear, safe JSX and modern React 19 practices\n\n## Requirements\n\n- In Next.js 15 and React 19, client components must start with `\"use client\"` at the top.\n- Server components require no directive. Server action files and any functions that call server actions should start with `\"use server\"`.\n- Never use `import * as React from \"react\"`, do explicit imports instead.\n- Use `{condition ? <Element /> : null}` for conditional JSX rendering; avoid `&&`.\n- Destructure props/state for clarity.\n- Keep boolean props accurate (e.g., `<Button disabled />`).\n- Set `displayName` on complex components or contexts.\n- Clean up side effects in `useEffect` (e.g., timers, listeners).\n- To handle refs in React 19 pass `ref` as a standard prop. `forwardRef` and string refs like `ref=\"myRef\"` are deprecated.\n- No direct DOM manipulation (e.g., `findDOMNode`) or `dangerouslySetInnerHTML`.\n- Avoid using array index as a key; prefer stable IDs.\n- Use `rel=\"noreferrer noopener\"` with `target=\"_blank\"`.\n- Use `useCallback`/`React.memo`/`useMemo` only if performance gains are measured.\n- Keep naming consistent (e.g., `[count, setCount]`) while destructuring `useState`.\n- Custom hooks must call at least one React hook. Use lazy initialization in `useState` for expensive computations.\n- Default props for arrays or objects, define them as constants outside the component to avoid creating new references on every render.\n- Avoid calling a `useState` setter in `useEffect` without a functional update or guard.\n- Avoid default Props in Function Components using inline referential values. Use ES6 defaults or optional props with constants declared outside the component.\n- Avoid defining Components inside another component’s render. Extract them.\n- Avoid unstable Default Props: Do not use inline array/object literals as defaults; define them outside.\n- For `useCallback(fn, deps)` provide stable dependencies (props, state) to control updates. Declare hook at the component’s top level (not in loops/conditions).\n\n<example>\n  import { useCallback } from \"react\";\n\n  function ProductPage({ productId }) {\n    const handleSubmit = useCallback(() => {\n      post(\"/product/\" + productId + \"/buy\");\n    }, [productId]);\n\n    return <ShippingForm onSubmit={handleSubmit} />;\n  }\n</example>\n\n<example type=\"invalid\">\n  // Missing dependencies => new function on every render\n  const handleClick = useCallback(() => {\n    // ...\n  });\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/2000-react.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "2000-react.md",
      "sha": "6f57cbea1f8d966fac8847e99b5206d232e6b390"
    }
  },
  {
    "name": "blefnk-2001-nextjs",
    "slug": "2001-nextjs",
    "displayName": "2001 Nextjs",
    "description": "--- description: Use these rules when building Next.js projects globs: src/**/*.{ts,tsx}, next.config.ts",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Use these rules when building Next.js projects\nglobs: src/**/*.{ts,tsx}, next.config.ts\nalwaysApply: false\n---\n\n# Next.js Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- For building Next.js v15 (App Router) projects\n- Guides server vs. client component usage\n\n## Requirements\n\n- React 19 is required for Next.js 15.\n- Default `layout.tsx` and `page.tsx` to server components. Place client components into them.\n- Use client components for local state or interactivity.\n- Use `<Link>` instead for navigation unless `useRouter` is essential; `<a>` is disallowed.\n- Provide `loading.tsx` and e.g. `<Suspense fallback={<Skeleton />}>` for asynchronous data fetching. Use Shadcn UI `Skeleton` for loading states.\n- Prefer server actions instead of client API calls.\n- Maintain Edge Runtime middleware.ts compatibility (no Node.js APIs).\n- Do not pass server-only event handlers or data to client components.\n- `useFormState` replaced by `useActionState`.\n- Imports: `ImageResponse` moved from `next/server` to `next/og`.\n- Async APIs: `cookies`, `headers`, `draftMode`, and `params` return Promises—use `await` or `use()`.\n- Caching: Fetch requests aren’t cached by default; set `cache: \"force-cache\"` if needed.\n- Geo/IP: Removed from `NextRequest`; use `@vercel/functions` for `ipAddress` or `geolocation`.\n- Route Handlers: No caching unless explicitly set (`dynamic = \"force-static\"`).\n\n## Examples\n\n<example>\n  // server component\n  export default async function Page() {\n    const data = await getData(); // server action\n    return <div>{data}</div>;\n  }\n</example>\n\n<example type=\"invalid\">\n  \"use client\";\n  export default async function Page() {\n    const data = await getData();\n    return <div>{data}</div>;\n  }\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/2001-nextjs.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "2001-nextjs.md",
      "sha": "a1382b414e8853d0dcccf997ea7e1cf4ec579523"
    }
  },
  {
    "name": "blefnk-2002-tailwindcss",
    "slug": "2002-tailwindcss",
    "displayName": "2002 Tailwindcss",
    "description": "--- description: Apply Tailwind utilities when styling to keep layouts simple and uniform globs: src/**/*.{tsx,css}",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Apply Tailwind utilities when styling to keep layouts simple and uniform\nglobs: src/**/*.{tsx,css}\nalwaysApply: false\n---\n\n# Tailwind CSS Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- For styling with Tailwind CSS v4\n- Emphasizes utility classes for consistency\n\n## Requirements\n\n- Maintain consistent spacing (e.g., `p-4`, `m-2`, `space-y-4`).\n- Combine conditional classes with `cn()`.\n- Use only custom colors defined in `globals.css`.\n- Ensure dark mode support via `.dark:` variants.\n\n## Examples\n\n<example>\n  import { cn } from \"~/lib/utils\";\n  \n  export function ExampleBox({ isActive }: { isActive: boolean }) {\n    return (\n      <div className={cn(\"p-4 rounded-md\", isActive ? \"bg-blue-500\" : \"\")}>\n        Content\n      </div>\n    );\n  }\n</example>\n\n<example type=\"invalid\">\n  <div style={{ padding: \"20px\" }}>Inline styled box</div>\n</example>\n\n## Tailwind v4 Updates\n\n- Config: `tailwind.config.ts` deprecated; now configure in `globals.css` with `@import \"tailwindcss\"`.\n- PostCSS: Plugin moved to `@tailwindcss/postcss`.\n- Utility Renames:\n  - `shadow-sm` → `shadow-xs`; `shadow` → `shadow-sm`; similar for `blur`, `drop-shadow`.\n  - `outline-none` → `outline-hidden`.\n  - `ring` defaults to 1px; use `ring-3` for old 3px behavior.\n- Removed Utilities: `bg-opacity-*`, `text-opacity-*`, `flex-shrink-*`, `flex-grow-*` → replaced by new patterns (`bg-black/50`, `shrink-*`, `grow-*`, etc.).\n- Placeholder Text: Now 50% of current color, not fixed gray.\n- Buttons: Default `cursor: default`.\n- Border Color: Defaults to `currentColor`.\n- `@layer`: `@layer utilities/components` replaced by `@utility`.\n- Variant Stacking: Applied left to right (e.g., `.hover:focus:bg-red-500`).\n- `space-y-*`: Uses new selector, may affect inline layouts.\n- Theming: Use `var(--color-...)` instead of `theme()` in CSS.\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/2002-tailwindcss.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "2002-tailwindcss.md",
      "sha": "d6fc31d1cf84e6dfb10e0bf3f76da881f0703c5c"
    }
  },
  {
    "name": "blefnk-2003-shadcn-ui",
    "slug": "2003-shadcn-ui",
    "displayName": "2003 Shadcn Ui",
    "description": "--- description: Use Shadcn UI components when designing to ensure consistent styling globs: src/**/*.tsx",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Use Shadcn UI components when designing to ensure consistent styling\nglobs: src/**/*.tsx\nalwaysApply: false\n---\n\n# Shadcn UI Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- For integrating Shadcn UI primitives\n- Maintains consistency and design standards\n\n## Requirements\n\n- Import Shadcn primitives from `~/ui/primitives`.\n- Keep app-specific components in `~/ui/components`.\n- Match Shadcn design and naming conventions.\n- Style <Link> using `cn()` and `buttonVariants` when you need a button-like style.\n- Use <Button> only when you need to call a function.\n\n## Available Shadcn UI Component Primitives\n\nAccordion, Alert, Alert Dialog, Aspect Ratio, Avatar, Badge, Breadcrumb, Button, Calendar, Card, Carousel, Chart, Checkbox, Collapsible, Combobox, Command, Context Menu, Data Table, Date Picker, Dialog, Drawer, Dropdown Menu, Form, Hover Card, Input, Input OTP, Label, Menubar, Navigation Menu, Pagination, Popover, Progress, Radio Group, Resizable, Scroll Area, Select, Separator, Sheet, Sidebar, Skeleton, Slider, Sonner, Switch, Table, Tabs, Textarea, Toast, Toggle, Toggle Group, Tooltip\n\n## Examples\n\n<example>\n  import { Button } from \"~/ui/primitives/button\";\n  \n  export function ConfirmButton() {\n    return <Button>Confirm</Button>;\n  }\n</example>\n\n<example type=\"invalid\">\n  import { Button } from \"shadcn-ui\";\n  \n  export function ConfirmButton() {\n    return <Button>Confirm</Button>;\n  }\n</example>\n\n<example>\n\n  ```tsx\n  import { Link } from \"next/link\";\n  import { cn } from \"~/lib/utils\";\n  import { buttonVariants } from \"~/ui/primitives/button\";\n  \n  export function HomeLink() {\n    return (\n      <Link\n        href=\"/\"\n        className={cn(\n          buttonVariants({\n            variant: \"default\",\n            className: \"mx-auto mt-4 w-fit\",\n          }),\n        )}\n      >\n        Home\n      </Link>\n    );\n  }\n  ```\n\n</example>\n\n<example type=\"invalid\">\n  \n  ```tsx\n  import { Link } from \"next/link\";\n  import { Button } from \"~/ui/primitives/button\";\n  \n  export function HomeLink() {\n    return (\n      <Button\n        className=\"mx-auto mt-4 w-fit\"\n      >\n        <Link href=\"/\">Home</Link>\n      </Button>\n    );\n  }\n  ```\n\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/2003-shadcn-ui.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "2003-shadcn-ui.md",
      "sha": "2051320ed48c52aac4bcb9c2a86951d3352abf3a"
    }
  },
  {
    "name": "blefnk-2004-drizzle-orm",
    "slug": "2004-drizzle-orm",
    "displayName": "2004 Drizzle Orm",
    "description": "--- description: Use Drizzle with PostgreSQL to define and modify schemas in a flexible SQL-like manner globs: src/**/*.{ts,tsx}, drizzle.config.ts",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Use Drizzle with PostgreSQL to define and modify schemas in a flexible SQL-like manner\nglobs: src/**/*.{ts,tsx}, drizzle.config.ts\nalwaysApply: false\n---\n\n# Drizzle ORM (Postgres) Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Define and modify schemas type-safely with Drizzle ORM.\n- Enable lightweight, serverless-ready, SQL-like interactions.\n- Export schemas so Drizzle-Kit detects them for migrations.\n\n## Requirements\n\n- Use `pgTable` from `drizzle-orm/pg-core` to define tables.\n- Organize schema files as needed and export all models.\n- Use column aliases if TS keys differ from DB names.\n- Enforce `casing: \"snake_case\"` and reuse shared definitions.\n- Configure `drizzle.config.ts` with `dialect: \"postgresql\"`, schema paths, credentials, and output.\n- Apply changes with `bun db:push` or generate and run migrations.\n- Keep migration files version-controlled and succinct.\n- Use `leftJoin`, `rightJoin`, `innerJoin`, and `fullJoin` for relational queries.\n- Use table aliases for complex or self-joins.\n- Use `.select({ ... })` for typed partial selects.\n- Use `.select()`, `.insert()`, `.update()`, and `.delete()`.\n- Build filters with `eq`, `lt`, `gt`, `and`, `or`, etc.\n- Use raw `sql` templates for complex expressions when needed.\n- Prefer relational query methods (e.g., `.query.[table].findMany({ with: { ... } })`) to fetch nested data in one call.\n- Connect using drivers like `node-postgres` or `postgres.js`.\n- Optimize connections and use caching (e.g., `unstable_cache`).\n- Reuse queries or use partial selects to reduce DB hits.\n- Use advanced features (`pgEnum`, `pgSchema`, sequences) for extra type safety.\n- Use Drizzle’s `sql` templates with helpers (`.mapWith()`, `.join()`, `.append()`, `.as()`, `.fromList()`).\n- Use `sql.raw()` for unescaped SQL when necessary.\n- Insert: `db.insert(table).values({ ... })`\n- Select: `db.select().from(table).where(eq(table.column, value))`\n- Update: `db.update(table).set({ ... }).where(eq(table.column, value))`\n- Delete: `db.delete(table).where(eq(table.column, value))`\n- Organize schema files (single or multiple) and export all definitions.\n- Use SQL template helpers and table aliasing for dynamic queries.\n- Optimize performance with partial selects and caching.\n\n## Examples\n\n<example>\n  // Define a basic table schema\n  import { integer, varchar, pgTable } from \"drizzle-orm/pg-core\";\n\n  export const users = pgTable(\"users\", {\n    id: integer(\"id\").primaryKey(),\n    email: varchar(\"email\", { length: 256 }).notNull().unique(),\n  });\n</example>\n\n<example>\n  // Execute a SQL-like select query\n  const userData = await db\n    .select()\n    .from(users)\n    .where(eq(users.email, \"john@example.com\"));\n</example>\n\n<example type=\"invalid\">\n  // Do not omit exports; Drizzle-Kit requires table exports for migrations\n  const posts = pgTable(\"posts\", { id: integer(\"id\").primaryKey() });\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/2004-drizzle-orm.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "2004-drizzle-orm.md",
      "sha": "7af67be02c88209284ae022fb86566dea23cb590"
    }
  },
  {
    "name": "blefnk-2005-better-auth",
    "slug": "2005-better-auth",
    "displayName": "2005 Better Auth",
    "description": "--- description: Use better-auth patterns when implementing authentication to ensure secure and consistent user identity management globs: src/**/*.{t",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Use better-auth patterns when implementing authentication to ensure secure and consistent user identity management\nglobs: src/**/*.{ts,tsx}\nalwaysApply: false\n---\n\n# Better-Auth Implementation Standards\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Implement authentication in Next.js applications using better-auth.\n- Ensure secure and consistent user identity management.\n- Apply these standards to auth configuration, client components, and database schema.\n\n## Requirements\n\n- Define all user schema customizations in `src/lib/auth.ts` and regenerate the schema with `bun db:auth`.\n- Implement social providers with proper profile mapping functions to ensure consistent user data.\n- Structure auth routes in `src/app/auth/` with dedicated client components.\n- Enable two-factor authentication and manage backup codes securely.\n- Use the auth client from `~/lib/auth-client` for all client-side authentication operations.\n- Maintain proper account linking configuration for social providers.\n- Handle authentication errors and redirect users appropriately.\n- Follow secure token handling and session management practices.\n- Log authentication events for auditing and troubleshooting.\n- Separate client and server logic by applying `\"use client\"` and `\"use server\"` directives as needed.\n- Implement robust profile mapping functions for each social provider.\n- Configure secure cookies and token storage for managing sessions.\n- Enforce HTTPS and validate all authentication inputs to prevent CSRF and injection attacks.\n- Structure all auth routes and components consistently to streamline maintenance and debugging.\n- Use secure methods for generating and storing backup codes for two-factor authentication.\n- Always use the designated auth client; server-side: `src/lib/auth.ts`; client-side: `~/lib/auth-client`.\n\n## Examples\n\n<example>\n\n```typescript\n// src/lib/auth.ts\nexport const auth = betterAuth({\n  baseURL: process.env.NEXT_SERVER_APP_URL,\n  secret: process.env.AUTH_SECRET,\n  \n  database: drizzleAdapter(db, {\n    provider: \"pg\",\n    schema: {\n      user: userTable,\n      session: sessionTable,\n      account: accountTable,\n      verification: verificationTable,\n      twoFactor: twoFactorTable,\n    },\n  }),\n  \n  user: {\n    additionalFields: {\n      firstName: {\n        type: \"string\",\n        required: false,\n        input: true,\n      },\n      // Add additional fields as needed\n    },\n  },\n  \n  // Enable email/password authentication\n  emailAndPassword: {\n    enabled: true,\n  },\n  \n  // Configure social providers with proper mapping\n  socialProviders: {\n    github: {\n      clientId: process.env.AUTH_GITHUB_ID ?? \"\",\n      clientSecret: process.env.AUTH_GITHUB_SECRET ?? \"\",\n      scope: [\"user:email\", \"read:user\"],\n      mapProfileToUser: (profile) => ({\n        firstName: profile.name?.split[\" \"](0) ?? \"\",\n        // Map additional fields as needed\n      }),\n    },\n  },\n  \n  // Enable plugins like two-factor authentication\n  plugins: [twoFactor()],\n});\n```\n\n</example>\n\n<example>\n\n```typescript\n// src/app/auth/sign-in/client.tsx\n\"use client\";\n\nimport { signIn } from \"~/lib/auth-client\";\n\nexport function SignInPageClient() {\n  // Initialize form state hooks\n\n  const handleEmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      await signIn.email({\n        email,\n        password,\n      });\n      router.push(\"/dashboard\");\n    } catch (err) {\n      setError(\"Invalid email or password\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const handleSocialLogin = (provider: string) => {\n    setLoading(true);\n    try {\n      void signIn.social({ provider });\n    } catch (err) {\n      setError(`Failed to sign in with ${provider}`);\n      setLoading(false);\n    }\n  };\n  \n  // Render the component JSX\n}\n```\n\n</example>\n\n<example type=\"invalid\">\n\n```typescript\n// Incorrect: Directly modifying schema without regenerating\n// Edit users.ts directly instead of src/lib/auth.ts\nexport const userTable = pgTable(\"user\", {\n  // Custom fields added directly here\n  age: integer(\"age\"),\n  firstName: text(\"first_name\"),\n});\n```\n\n</example>\n\n<example type=\"invalid\">\n\n```typescript\n// Incorrect: Using inconsistent auth client or methods\nimport { signIn } from \"next-auth/react\"; // Wrong import\n// or\nfetch(\"/api/auth/signin\", { // Direct API call instead of using the auth client\n  method: \"POST\",\n  body: JSON.stringify({ email, password }),\n});\n```\n\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/2005-better-auth.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "2005-better-auth.md",
      "sha": "faf0399a43f0adfc86c6fcc29b375a7429ffd512"
    }
  },
  {
    "name": "blefnk-2006-tanstack-form",
    "slug": "2006-tanstack-form",
    "displayName": "2006 Tanstack Form",
    "description": "--- description: Implement TanStack Form when creating or updating forms to achieve robust validation and a type-safe solution globs: src/**/*.{ts,tsx",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Implement TanStack Form when creating or updating forms to achieve robust validation and a type-safe solution\nglobs: src/**/*.{ts,tsx}\nalwaysApply: false\n---\n\n# TanStack Form Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Use when building or refactoring forms with @tanstack/react-form.\n- Ensure consistent validation, submission, and type safety.\n- Treat TanStack Form as a fully controlled, type-safe form library.\n- Leverage reactive data binding, advanced validation, and minimal boilerplate.\n\n## Requirements\n\n- Install: `bun add @tanstack/react-form`; lock package versions.\n- Use `@tanstack/react-form/nextjs` with React Server Actions and `createServerValidate`.\n- Manage all input values via centralized form state.\n- Use helper functions (`formOptions`, `createFormHook`) to keep configs DRY.\n- Choose inline or schema-based validation (Zod, Valibot, ArkType).\n- Apply `\"use client\"` and `\"use server\"` where needed.\n- Create a form instance via `useForm({ defaultValues, onSubmit })` or `createFormHook`.\n- Define strong types in `defaultValues`.\n- Wrap inputs with `<form.Field name=\"...\" />` or custom components.\n- Configure shared defaults via `formOptions`.\n- Attach sync/async validators via the `validators` prop.\n- Return clear, user-friendly error messages.\n- Access form state via `.state`, `.meta`, or `useStore(form.store)`.\n- Subscribe to specific state slices using `form.Subscribe` or selectors.\n- Monitor field flags: `isTouched`, `isPristine`, `isDirty` (`isDirty` remains `true` after any change).\n- Read and update form state exclusively for predictable behavior and testability.\n- Separate server-only logic from client code.\n- Enable repeating input sets with `mode=\"array\"` on `<form.Field>`.\n- Manage arrays using `pushValue`, `removeValue`, `swapValues`, `moveValue`.\n- Ensure nested fields retain types and validation.\n- Reduce boilerplate via `createFormHookContexts` or `createFormHook`.\n- Merge server-supplied state via `mergeForm`/`useTransform` for partial hydration and optimistic UI.\n- Design multi-step forms to preserve and merge state.\n- Attach field listeners for side effects (e.g., reset related fields on change).\n- Define shared config in `formOptions` for consistent client/server defaults.\n- Use field API methods (`handleChange`, `handleBlur`, etc.) to manage inputs.\n- Enforce strict TypeScript, relying on type inference to minimize manual generics.\n- Maintain scalable, predictable, type-safe form behavior.\n\n## Examples\n\n<example>\n  // Basic usage with React\n  import { useForm } from \"@tanstack/react-form\";\n\n  function MyForm() {\n    const form = useForm({\n      defaultValues: { firstName: \"\", age: 0 },\n      onSubmit: ({ value }) => alert(JSON.stringify(value)),\n    })\n\n    return (\n      <form\n        onSubmit={(e) => {\n          e.preventDefault()\n          form.handleSubmit()\n        }}\n      >\n        <form.Field name=\"firstName\">\n          {(field) => (\n            <>\n              <label htmlFor={field.name}>First Name</label>\n              <input\n                id={field.name}\n                value={field.state.value}\n                onChange={(e) => field.handleChange(e.target.value)}\n                onBlur={field.handleBlur}\n              />\n            </>\n          )}\n        </form.Field>\n        <button type=\"submit\">Submit</button>\n      </form>\n    )\n  }\n</example>\n\n<example type=\"invalid\">\n  // Missing name prop => Field won't map to form state\n  <form.Field>\n    {(field) => <input />}\n  </form.Field>\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/2006-tanstack-form.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "2006-tanstack-form.md",
      "sha": "09485cd18b5513513dc5d04ab7345854f8ca7de5"
    }
  },
  {
    "name": "blefnk-2007-tanstack-query",
    "slug": "2007-tanstack-query",
    "displayName": "2007 Tanstack Query",
    "description": "--- description: Manage async client-side data with TanStack Query (AKA React Query) (queries, mutations, invalidation) globs: src/**/*.{ts,tsx}",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Manage async client-side data with TanStack Query (AKA React Query) (queries, mutations, invalidation)\nglobs: src/**/*.{ts,tsx}\nalwaysApply: false\n---\n\n# TanStack Query Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Use TanStack Query for async data management in React.\n- Support queries, mutations, and targeted invalidation.\n\n## Requirements\n\n### 1. Installation & Setup\n\n- Install: `bun add @tanstack/react-query && bun add -D @tanstack/eslint-plugin-query`\n- Use `useQuery` with a unique `queryKey` and a `queryFn`.\n- Manage query states: `isPending`, `isError`, `isSuccess`, `status`.\n- Use `fetchStatus` for background fetching detection.\n- Use `useMutation` with a `mutationFn`.\n- Handle states: `isIdle`, `isPending`, `isError`, `isSuccess`.\n- Utilize callbacks: `onMutate`, `onSuccess`, `onError`, `onSettled`.\n- Use `mutateAsync` for promise-based execution.\n- Reset mutation state with `mutation.reset()` if needed.\n- Invalidate queries via: `queryClient.invalidateQueries({ queryKey: [...] });`\n- Use `exact: true` or predicate functions for finer control.\n- Wrap the app in `<QueryClientProvider>` with a `QueryClient`.\n- Ensure unique query/mutation keys for proper caching.\n- Use callback options for side effects and optimistic updates.\n\n## Examples\n\n<example>\n\n    Basic Usage\n\n    ```ts\n    import {\n    useQuery,\n    useMutation,\n    useQueryClient,\n    QueryClient,\n    QueryClientProvider,\n    } from '@tanstack/react-query';\n    import { getTodos, postTodo } from '../my-api';\n\n    const queryClient = new QueryClient();\n\n    function App() {\n    return (\n        <QueryClientProvider client={queryClient}>\n        <Todos />\n        </QueryClientProvider>\n    );\n    }\n\n    function Todos() {\n    const queryClient = useQueryClient();\n    const query = useQuery({ queryKey: ['todos'], queryFn: getTodos });\n\n    const mutation = useMutation({\n        mutationFn: postTodo,\n        onSuccess: () => queryClient.invalidateQueries({ queryKey: ['todos'] }),\n    });\n\n    return (\n        <div>\n        <ul>\n            {query.data?.map((todo) => (\n            <li key={todo.id}>{todo.title}</li>\n            ))}\n        </ul>\n        <button\n            onClick={() =>\n            mutation.mutate({ id: Date.now(), title: 'Do Laundry' })\n            }\n        >\n            Add Todo\n        </button>\n        </div>\n    );\n    }\n    ```\n\n</example>\n\n<example type=\"invalid\">\n\n    ```ts\n    const query = useQuery({ queryFn: getTodos });\n    // No unique queryKey; required for caching and refetching.\n    ```\n\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/2007-tanstack-query.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "2007-tanstack-query.md",
      "sha": "c589bc9ee3d23f1ada81548af21e21d5a8efc1b9"
    }
  },
  {
    "name": "blefnk-2008-polar-payments",
    "slug": "2008-polar-payments",
    "displayName": "2008 Polar Payments",
    "description": "--- description: Integrate Polar payments for checkout, subscriptions, and webhooks in ecommerce flows globs: src/**/*.{ts,tsx}",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Integrate Polar payments for checkout, subscriptions, and webhooks in ecommerce flows\nglobs: src/**/*.{ts,tsx}\nalwaysApply: false\n---\n\n# Polar Payments Integration Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Use Polar for checkouts, subscriptions, and webhooks in ecommerce flows.\n- Works in combination with Next.js and BetterAuth for secure payments.\n\n## Requirements\n\n### 1. Setup & Installation\n\n- Test with Polar Sandbox before switching to production.\n- Set environment variables: `POLAR_ACCESS_TOKEN=your_token POLAR_WEBHOOK_SECRET=your_secret`\n- Install dependencies: `bun add @polar-sh/sdk @polar-sh/nextjs`\n- Configure the Polar API client: `import { Polar } from '@polar-sh/sdk'; export const api = new Polar({ accessToken: process.env.POLAR_ACCESS_TOKEN!, server: 'sandbox', // Change to 'production' when ready });`\n- Retrieve active products: `const products = await api.products.list({ isArchived: false });`\n- Create a checkout endpoint: `import { Checkout } from '@polar-sh/nextjs'; export const GET = Checkout({ accessToken: process.env.POLAR_ACCESS_TOKEN!, successUrl: '/confirmation', server: 'sandbox', });`\n- Pass query parameters (e.g., `productId`, `productPriceId`) for dynamic product selection.\n- Redirect users to a confirmation page (`/confirmation`) after checkout.\n- Handle checkout, subscription, and payment events via webhooks: `import { Webhooks } from '@polar-sh/nextjs'; export const POST = Webhooks({ webhookSecret: process.env.POLAR_WEBHOOK_SECRET!, onPayload: async (payload) => { // Handle events: checkout.created, subscription.active, etc. }, });`\n- Use ngrok for local webhook testing.\n- Enable customer portal if user requests self-service: `import { CustomerPortal } from '@polar-sh/nextjs'; export const GET = CustomerPortal({ accessToken: process.env.POLAR_ACCESS_TOKEN!, getCustomerId: (req) => \"\", // Implement customer ID resolution server: 'sandbox', });`\n- Use BetterAuth integration: `bun add better-auth @polar-sh/better-auth`\n- Automate customer creation, checkout, and webhook handling.\n- Query Parameters: Pass product/customer data (e.g., `productId`, `customerEmail`) via URL.\n- Product Display: Create UI components for product listings; handle multiple pricing plans.\n- Testing & Deployment: Use Sandbox for testing; update tokens for production.\n- Webhook Handlers: Update database or user entitlements based on events.\n\n## Examples\n\n<example>\n\n  ✅ Minimal Next.js Checkout Setup\n\n  ```ts\n  import { Checkout } from '@polar-sh/nextjs';\n  export const GET = Checkout({\n    accessToken: process.env.POLAR_ACCESS_TOKEN!,\n    successUrl: '/confirmation',\n    server: 'sandbox',\n  });\n  ```\n  \n</example>\n\n<example>\n\n  ❌ Invalid: Missing `POLAR_ACCESS_TOKEN`\n\n  ```ts\n  export const GET = Checkout({});\n  // Checkout will fail due to missing access token.\n  ```\n\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/2008-polar-payments.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "2008-polar-payments.md",
      "sha": "45e9b3ca0e1d676130255a692dc51daea5a76a49"
    }
  },
  {
    "name": "blefnk-300-testing-vitest",
    "slug": "300-testing-vitest",
    "displayName": "300 Testing Vitest",
    "description": "--- description: Apply these testing rules when verifying or writing new test suites to ensure quality and coverage globs: **/*.test.ts",
    "author": "blefnk",
    "type": "cursor",
    "category": "quality-testing",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Apply these testing rules when verifying or writing new test suites to ensure quality and coverage\nglobs: **/*.test.ts\nalwaysApply: false\n---\n\n# Testing Standards\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Ensures consistent testing conventions for unit and integration tests\n- Uses `vitest` for all test files matching `**/*.test.ts`\n\n## Requirements\n\n- Use Vitest as the testing framework.\n- Group related tests logically (describe blocks).\n- Write clear, atomic assertions; avoid chaining multiple, unrelated checks in one test.\n- Test only critical logic or components; avoid trivial or redundant tests.\n- Give each test a descriptive name that clarifies its purpose and expected outcome.\n\n## Examples\n\n<example>\n  import { describe, it, expect } from \"vitest\";\n\n  describe(\"Button component\", () => {\n    it(\"renders with default props\", () => {\n      const result = renderButton(); // Pseudocode\n      expect(result).toContain(\"<button>\");\n    });\n  });\n</example>\n\n<example type=\"invalid\">\n  test(\"Test all app logic in one big function\", () => {\n    // Overly broad testing, unclear assertions\n  });\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/300-testing-vitest.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "300-testing-vitest.md",
      "sha": "5ed8023b0c0ad85e7d9618092069a234c87ce06d"
    }
  },
  {
    "name": "blefnk-800-server-actions",
    "slug": "800-server-actions",
    "displayName": "800 Server Actions",
    "description": "--- description: Use server actions when creating or updating logic that mutates data in Next.js globs: src/**/*.{ts,tsx}",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Use server actions when creating or updating logic that mutates data in Next.js\nglobs: src/**/*.{ts,tsx}\nalwaysApply: false\n---\n\n# Server Actions Rules\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Applies to Next.js v15 projects leveraging Server Actions for data mutations\n- Server actions can be called from both Server Components and Client Components\n- Uses \"use server\" directive (inline or module-level) to mark actions as server-only\n\n## Requirements\n\n- Insert `\"use server\"` at the start of async function bodies (e.g., `function createPost() { \"use server\"; ... }`).\n- Place `\"use server\"` at the file's top to mark all exported functions.\n- Set `action={myServerAction}` on `<form>`; actions receive a `FormData` object.\n- Call actions from `onClick`, `onChange`, or `useEffect`.\n- Pass actions as props if named `action` or ending in `Action` to avoid serialization issues.\n- Use `POST` for server actions.\n- Ensure actions support progressive enhancement and work without JavaScript.\n- Prevent automatic page refresh post-hydration.\n- Encrypt closed-over values in inline actions before sending them to the client.\n- Avoid placing sensitive data in closures.\n- Let unused actions be stripped at build time; used actions get secure, non-deterministic IDs.\n- Treat each server action as a public endpoint; enforce authentication checks.\n- Rely on built-in `Origin & Host` validation (only same-origin requests succeed).\n- Configure `serverActions.allowedOrigins` in `next.config.ts` for advanced control.\n- Refresh caches with `revalidatePath(\"/...\")` or `revalidateTag(\"my-tag\")`.\n- Call `redirect(\"/some-path\")` after an action completes (outside `try/catch`).\n- Use native HTML validation (`required`, `type=\"email\"`).\n- Validate `FormData` server-side with `zod` or similar libraries.\n- Return serializable objects or throw errors for custom handling.\n- Apply `useOptimistic` to update UI before the server response.\n- Revert or adjust state based on the actual server result.\n- Import actions from `\"use server\"` files in Client Components (`\"use client\"`) or define them inline.\n- Use `useActionState` and `useFormStatus` to manage loading, errors, and optimistic updates.\n- Access cookies with `await cookies()` (get, set, delete).\n- Invoke actions in `useEffect` on mount or dependency change.\n\n## Examples\n\n<example>\n\n   ```ts\n   // Inline server action in a Server Component\n   export default function Page() {\n      async function createPost(formData: FormData) {\n      \"use server\";\n      // mutate data, revalidate, etc.\n      }\n\n      return <form action={createPost}>...</form>;\n   }\n   ```\n\n</example>\n\n<example>\n\n   ```ts\n   // Server action in a separate file\n   // app/actions.ts\n   \"use server\";\n\n   export async function createUser(formData: FormData) {\n      // ...\n   }\n\n   // app/button.tsx (Client Component)\n   \"use client\";\n   import { createUser } from \"./actions\";\n\n   export function Button() {\n      return <button onClick={() => createUser()}>Create</button>;\n   }\n   ```\n\n</example>\n\n<example type=\"invalid\">\n\n   ```ts\n   // Missing \"use server\" => Not recognized as a server action\n   export async function updateData(formData: FormData) {\n      // ...\n   }\n   ```\n\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/800-server-actions.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "800-server-actions.md",
      "sha": "054906a0f8a312b34c76043bcfb0e17dda2e72a5"
    }
  },
  {
    "name": "blefnk-801-fetching-caching",
    "slug": "801-fetching-caching",
    "displayName": "801 Fetching Caching",
    "description": "--- description: Standardize fetching and caching in Next.js for performance and security. globs: src/**/*.{ts,tsx}",
    "author": "blefnk",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standardize fetching and caching in Next.js for performance and security.\nglobs: src/**/*.{ts,tsx}\nalwaysApply: false\n---\n\n# Fetching and Caching in Next.js\n\n<author>blefnk/rules</author>\n<version>1.0.0</version>\n\n## Context\n\n- Applies to Next.js 15 (Server & Client data fetching).\n- Covers caching, revalidation, parallel fetching, preloading, and security.\n- Defaults to `fetch` with `cache: \"no-store\"`, requiring explicit caching.\n\n## Requirements\n\n- Prefer server components or direct DB calls for fetching.\n- Prerender static routes unless using cookies, headers, or query params.\n- Force dynamic rendering as needed: `export const dynamic = \"force-dynamic\";`\n- Cache DB calls with `unstable_cache` or `react.cache`.\n- Use React's taint APIs to prevent exposing sensitive data.\n- Mark client components with `\"use client\"`.\n- Use SWR or React Query instead of `useEffect` for data fetching.\n- Provide a loading state: `if (!data) return <div>Loading...</div>;`\n- Never expose tokens, secrets, or DB calls in client-side code.\n- `fetch` is not cached unless explicitly set: `fetch(url, { cache: \"force-cache\" });`\n- Use `unstable_cache` / `react.cache` for expensive fetch calls: `import { unstable_cache } from \"next/cache\"; const getPosts = unstable_cache(async () => { return db.select().from(posts); }, [\"posts\"], { revalidate: 3600 });`\n- Invalidate caches on demand: `revalidatePath(\"/path\"); revalidateTag(\"posts\");`\n- Sequential Fetching (dependent calls): `const first = await fetchFirst(); const second = await fetchSecond(first.id);`\n- Parallel Fetching (independent calls): `const [data1, data2] = await Promise.all([fetchData1(), fetchData2()]);`\n- Fetch in parallel whenever possible to optimize performance.\n- Preload before rendering: `export const preload = (id) => void getItem(id);`\n- `preload(id)` initiates a fetch in advance. Combine with `cache()` and `\"server-only\"` for safe server data fetching.\n- Use `server-only` to prevent client-side execution and restrict execution to the server.\n- Avoid waterfall fetches by initiating early.\n- Keep DB calls, tokens, and secrets on the server.\n- Use React’s taint APIs to prevent data leaks: `import { experimental_taintObjectReference } from \"react\"; experimental_taintObjectReference(\"Do not leak user data\", user);`.\n- Throw `notFound()` if data is missing.\n- Use `<Suspense>` or `loading.js` for server fallbacks.\n- Handle client errors with React Query, SWR, or error boundaries.\n\n## Examples\n\n<example>\n\n   ✅ Basic Server-Side Fetch\n\n   ```ts\n   export default async function Page() {\n      const data = await fetch(\"https://api.vercel.app/blog\");\n      const posts = await data.json();\n      return <ul>{posts.map((p) => <li key={p.id}>{p.title}</li>)}</ul>;\n   }\n   ```\n\n</example>\n\n<example>\n\n   ✅ Caching with `force-cache`\n\n   ```ts\n   export default async function Page() {\n      const data = await fetch(\"https://api.vercel.app/blog\", { cache: \"force-cache\" });\n      const posts = await data.json();\n      return <ul>{posts.map((p) => <li key={p.id}>{p.title}</li>)}</ul>;\n   }\n   ```\n\n</example>\n\n<example>\n\n   ✅ DB Call with `unstable_cache`\n\n   ```ts\n   import { unstable_cache } from \"next/cache\";\n   import { db, posts } from \"@/lib/db\";\n\n   const getPosts = unstable_cache(async () => {\n      return db.select().from(posts);\n   }, [\"posts\"], { revalidate: 3600 });\n\n   export default async function Page() {\n      const allPosts = await getPosts();\n      return <ul>{allPosts.map((post) => <li key={post.id}>{post.title}</li>)}</ul>;\n   }\n   ```\n\n</example>\n\n<example>\n\n   ✅ Client-Side Fetching\n\n   ```ts\n   \"use client\";\n   import { useState, useEffect } from \"react\";\n\n   export default function ClientPage() {\n      const [posts, setPosts] = useState([]);\n      useEffect(() => {\n         async function loadPosts() {\n            const res = await fetch(\"https://api.vercel.app/blog\");\n            const data = await res.json();\n            setPosts(data);\n         }\n         loadPosts();\n      }, []);\n\n      if (!posts.length) return <div>Loading...</div>;\n      return <ul>{posts.map((p) => <li key={p.id}>{p.title}</li>)}</ul>;\n   }\n   ```\n\n</example>\n\n<example type=\"invalid\">\n\n   ❌ Missing `\"use client\"`\n\n   ```ts\n   export default function Page() {\n      \"use client\";\n      // Entire route becomes client-side unnecessarily.\n   }\n   ```\n\n</example>\n",
    "sourceUrl": "https://github.com/blefnk/awesome-cursor-rules/blob/main/801-fetching-caching.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "801-fetching-caching.md",
      "sha": "432be91c89f302b9ffa40c94168e8bcb12ad9f7e"
    }
  }
]