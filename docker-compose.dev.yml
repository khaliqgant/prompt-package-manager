version: '3.8'

services:
  # Shared PostgreSQL database for all services
  postgres:
    image: postgres:15-alpine
    container_name: prpm-postgres
    environment:
      POSTGRES_USER: prpm
      POSTGRES_PASSWORD: prpm
      POSTGRES_DB: prpm
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prpm"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Shared Redis for all services
  redis:
    image: redis:7-alpine
    container_name: prpm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Shared MinIO for all services
  minio:
    image: minio/minio:latest
    container_name: prpm-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Registry service (development mode - installs deps once, cached in volume)
  registry:
    image: node:20-alpine
    container_name: prpm-registry
    working_dir: /app
    command: sh -c "test -f node_modules/.installed || (npm install && touch node_modules/.installed); npm run dev"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3111
      DATABASE_URL: postgresql://prpm:prpm@postgres:5432/prpm
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-change-in-production
      # GitHub OAuth (optional)
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      GITHUB_CALLBACK_URL: http://localhost:3111/api/v1/auth/callback
      # S3/MinIO
      AWS_REGION: us-west-2
      AWS_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      S3_BUCKET: prpm-packages
      AWS_FORCE_PATH_STYLE: "true"
      # Search
      SEARCH_ENGINE: postgres
      # Features
      ENABLE_TELEMETRY: "false"
      ENABLE_RATE_LIMITING: "false"
    ports:
      - "3111:3111"
    volumes:
      # Mount source code (without node_modules)
      - ./packages/registry:/app
      # Use named volume for node_modules (persisted, fast)
      - registry_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3111/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s  # Give time for npm install on first run

  # Webapp service (development mode - installs deps once, cached in volume)
  webapp:
    image: node:20-alpine
    container_name: prpm-webapp
    working_dir: /app
    command: sh -c "test -f node_modules/.installed || (npm install && touch node_modules/.installed); npm run dev"
    depends_on:
      registry:
        condition: service_healthy
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_REGISTRY_URL: http://localhost:3111
      NEXT_PUBLIC_GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
    ports:
      - "5173:5173"
    volumes:
      # Mount source code (without node_modules)
      - ./packages/webapp:/app
      # Use named volume for node_modules (persisted, fast)
      - webapp_node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s  # Give time for npm install on first run

volumes:
  postgres_data:
  redis_data:
  minio_data:
  registry_node_modules:
  webapp_node_modules:
