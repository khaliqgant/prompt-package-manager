# Executing Plans - Cursor Rules

---

## Overview

This cursor rule is based on the Claude Code "Executing Plans" skill, adapted for use in Cursor IDE.

## Core Methodology

When working on code, follow this executing plans methodology:

1. *Default: First 3 tasks**
2. Show what was implemented
3. Show verification output
4. Say: "Ready for feedback."
5. Apply changes if needed
6. Execute next batch
7. Repeat until complete
8. Announce: "I'm using the finishing-a-development-branch skill to complete this work."
9. **REQUIRED SUB-SKILL:** Use superpowers:finishing-a-development-branch
10. Follow that skill to verify tests, present options, execute choice
11. *STOP executing immediately when:**
12. Hit a blocker mid-batch (missing dependency, test fails, instruction unclear)
13. Plan has critical gaps preventing starting
14. You don't understand an instruction
15. Verification fails repeatedly
16. *Ask for clarification rather than guessing.**
17. *Return to Review (Step 1) when:**
18. Partner updates the plan based on your feedback
19. Fundamental approach needs rethinking
20. *Don't force through blockers** - stop and ask.
21. Review plan critically first
22. Follow plan steps exactly
23. Don't skip verifications
24. Reference skills when plan says to
25. Between batches: just report and wait
26. Stop when blocked, don't guess

## Principles

- Apply best practices from the skill content below

## Implementation Guidelines

- Reference the detailed skill content for specific guidance



## Integration with Other Rules

This rule works best when combined with:
- Code quality and style guidelines
- Testing best practices
- Project-specific conventions

You can reference other .cursorrules files by organizing them in your project:
```
.cursorrules/
  ├── base/
  │   ├── executing-plans.cursorrules (this file)
  │   └── code-quality.cursorrules
  └── project-specific.cursorrules
```

## Original Skill Content

The following is the complete content from the Claude Code skill for reference:

---

---
name: executing-plans
description: Use when partner provides a complete implementation plan to execute in controlled batches with review checkpoints - loads plan, reviews critically, executes tasks in batches, reports for review between batches
---

# Executing Plans

## Overview

Load plan, review critically, execute tasks in batches, report for review between batches.

**Core principle:** Batch execution with checkpoints for architect review.

**Announce at start:** "I'm using the executing-plans skill to implement this plan."

## The Process

### Step 1: Load and Review Plan
1. Read plan file
2. Review critically - identify any questions or concerns about the plan
3. If concerns: Raise them with your human partner before starting
4. If no concerns: Create TodoWrite and proceed

### Step 2: Execute Batch
**Default: First 3 tasks**

For each task:
1. Mark as in_progress
2. Follow each step exactly (plan has bite-sized steps)
3. Run verifications as specified
4. Mark as completed

### Step 3: Report
When batch complete:
- Show what was implemented
- Show verification output
- Say: "Ready for feedback."

### Step 4: Continue
Based on feedback:
- Apply changes if needed
- Execute next batch
- Repeat until complete

### Step 5: Complete Development

After all tasks complete and verified:
- Announce: "I'm using the finishing-a-development-branch skill to complete this work."
- **REQUIRED SUB-SKILL:** Use superpowers:finishing-a-development-branch
- Follow that skill to verify tests, present options, execute choice

## When to Stop and Ask for Help

**STOP executing immediately when:**
- Hit a blocker mid-batch (missing dependency, test fails, instruction unclear)
- Plan has critical gaps preventing starting
- You don't understand an instruction
- Verification fails repeatedly

**Ask for clarification rather than guessing.**

## When to Revisit Earlier Steps

**Return to Review (Step 1) when:**
- Partner updates the plan based on your feedback
- Fundamental approach needs rethinking

**Don't force through blockers** - stop and ask.

## Remember
- Review plan critically first
- Follow plan steps exactly
- Don't skip verifications
- Reference skills when plan says to
- Between batches: just report and wait
- Stop when blocked, don't guess


---

## Usage Notes

- Apply these principles consistently throughout development
- Adapt the methodology to fit your specific project context
- Combine with project-specific rules for best results
- Use this as a reference for the executing plans approach

---
*Converted from Claude Code Skill: executing-plans*
*Source: executing plans skill*
