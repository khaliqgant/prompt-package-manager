import { KarenReview, getKarenEmoji } from './karen-config';

export function formatReviewMarkdown(review: KarenReview, repoName: string): string {
  const emoji = getKarenEmoji(review.score.total);

  return `# 🔥 Karen's Brutally Honest Review

**Repository:** ${repoName}
**Karen Score:** ${emoji} **${review.score.total}/100** - "${review.score.grade}"
**Reviewed:** ${new Date(review.score.timestamp).toLocaleString()}

---

## The Reality Check

${review.summary}

---

## Score Breakdown

| Category | Score | Assessment |
|----------|-------|------------|
| 🎭 Bullshit Factor | ${review.score.breakdown.bullshitFactor}/20 | ${getScoreAssessment(review.score.breakdown.bullshitFactor, 20)} |
| ⚙️ Actually Works | ${review.score.breakdown.actuallyWorks}/20 | ${getScoreAssessment(review.score.breakdown.actuallyWorks, 20)} |
| 💎 Code Quality Reality | ${review.score.breakdown.codeQualityReality}/20 | ${getScoreAssessment(review.score.breakdown.codeQualityReality, 20)} |
| ✅ Completion Honesty | ${review.score.breakdown.completionHonesty}/20 | ${getScoreAssessment(review.score.breakdown.completionHonesty, 20)} |
| 🎯 Practical Value | ${review.score.breakdown.practicalValue}/20 | ${getScoreAssessment(review.score.breakdown.practicalValue, 20)} |

---

## What Actually Works

${review.whatActuallyWorks.length > 0
  ? review.whatActuallyWorks.map(item => `- ${item}`).join('\n')
  : '_Karen is looking... still looking... 🔍_'}

---

## The Bullshit Detector Went Off

${formatIssues(review.issues)}

---

## The Bottom Line

> ${review.bottomLine}

---

## Karen's Prescription

${review.prescription.map((item, i) => `${i + 1}. ${item}`).join('\n')}

---

<div align="center">

**Karen Score: ${emoji} ${review.score.total}/100**

📄 **[Full Hot Take](.karen/review.md)** | 🐦 **[Share on Twitter](https://twitter.com/intent/tweet?text=${encodeURIComponent(`Karen just roasted my project and gave it a ${review.score.total}/100 ${emoji}\n\n"${review.score.grade}"\n\n${review.bottomLine}\n\n#KarenScore #PRPM`)})**

*Generated by [PRPM Karen](https://github.com/your-org/prompt-package-manager) - Brutally honest code reviews, powered by Claude*

</div>
`;
}

function getScoreAssessment(score: number, max: number): string {
  const percentage = (score / max) * 100;
  if (percentage >= 90) return 'Excellent';
  if (percentage >= 75) return 'Good';
  if (percentage >= 60) return 'Acceptable';
  if (percentage >= 40) return 'Concerning';
  return 'Critical';
}

function formatIssues(issues: any[]): string {
  if (issues.length === 0) {
    return '_Surprisingly, Karen found nothing to complain about here. Shocking._';
  }

  const groupedIssues = {
    critical: issues.filter(i => i.severity === 'critical'),
    high: issues.filter(i => i.severity === 'high'),
    medium: issues.filter(i => i.severity === 'medium'),
    low: issues.filter(i => i.severity === 'low')
  };

  let output = '';

  if (groupedIssues.critical.length > 0) {
    output += '### 🚨 Critical Issues\n\n';
    output += groupedIssues.critical.map(i => formatIssue(i)).join('\n\n');
    output += '\n\n';
  }

  if (groupedIssues.high.length > 0) {
    output += '### ⚠️ High Priority\n\n';
    output += groupedIssues.high.map(i => formatIssue(i)).join('\n\n');
    output += '\n\n';
  }

  if (groupedIssues.medium.length > 0) {
    output += '### 📝 Medium Priority\n\n';
    output += groupedIssues.medium.map(i => formatIssue(i)).join('\n\n');
    output += '\n\n';
  }

  if (groupedIssues.low.length > 0) {
    output += '<details>\n<summary>💡 Low Priority Issues (click to expand)</summary>\n\n';
    output += groupedIssues.low.map(i => formatIssue(i)).join('\n\n');
    output += '\n</details>\n';
  }

  return output;
}

function formatIssue(issue: any): string {
  let output = `**${issue.category}**: ${issue.message}`;

  if (issue.file) {
    output += `\n- 📁 \`${issue.file}${issue.line ? `:${issue.line}` : ''}\``;
  }

  if (issue.suggestion) {
    output += `\n- 💡 **Fix:** ${issue.suggestion}`;
  }

  return output;
}

export function formatPRComment(review: KarenReview, repoName: string, previousScore?: number): string {
  const emoji = getKarenEmoji(review.score.total);
  const scoreDelta = previousScore ? review.score.total - previousScore : null;

  let scoreChange = '';
  if (scoreDelta !== null) {
    if (scoreDelta > 0) {
      scoreChange = ` (📈 +${scoreDelta} from previous review)`;
    } else if (scoreDelta < 0) {
      scoreChange = ` (📉 ${scoreDelta} from previous review)`;
    } else {
      scoreChange = ' (no change)';
    }
  }

  return `## 🔥 Karen has entered the chat

**Karen Score:** ${emoji} **${review.score.total}/100** - "${review.score.grade}"${scoreChange}

### The Reality Check

${review.summary}

### Issues Found

${review.issues.slice(0, 5).map(i => `- ${getSeverityEmoji(i.severity)} **${i.category}**: ${i.message}`).join('\n')}

${review.issues.length > 5 ? `\n_...and ${review.issues.length - 5} more issues_` : ''}

### Karen's Take

> ${review.bottomLine}

<details>
<summary>📋 Full Review</summary>

[View complete Karen review](.karen/review.md)

</details>

---

*Powered by [PRPM Karen](https://github.com/your-org/prompt-package-manager) ${emoji}*
`;
}

function getSeverityEmoji(severity: string): string {
  switch (severity) {
    case 'critical': return '🚨';
    case 'high': return '⚠️';
    case 'medium': return '📝';
    case 'low': return '💡';
    default: return '•';
  }
}
