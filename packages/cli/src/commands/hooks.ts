/**
 * Hooks command - Manage git hooks for running agents
 */

import { Command } from 'commander';
import { existsSync, readFileSync, writeFileSync, mkdirSync, chmodSync, unlinkSync } from 'fs';
import { join } from 'path';
import { execSync } from 'child_process';
import chalk from 'chalk';

/**
 * Check if we're in a git repository
 */
function isGitRepo(): boolean {
  try {
    execSync('git rev-parse --git-dir', { stdio: 'ignore' });
    return true;
  } catch {
    return false;
  }
}

/**
 * Get the git hooks directory
 */
function getGitHooksDir(): string {
  try {
    const gitDir = execSync('git rev-parse --git-dir', { encoding: 'utf-8' }).trim();
    return join(gitDir, 'hooks');
  } catch (error) {
    throw new Error('Not in a git repository');
  }
}

/**
 * Create hooks configuration file template
 */
function createHooksConfig(): void {
  const configDir = '.prpm';
  const configPath = join(configDir, 'hooks.json');

  if (existsSync(configPath)) {
    console.log(chalk.yellow(`‚ö†Ô∏è  Hooks configuration already exists at ${configPath}`));
    return;
  }

  // Create .prpm directory if it doesn't exist
  if (!existsSync(configDir)) {
    mkdirSync(configDir, { recursive: true });
  }

  const template = {
    hooks: {
      'pre-commit': {
        enabled: true,
        agents: [
          {
            name: '@pre-commit/security-scanner',
            files: '**/*.{js,ts,py}',
            severity: 'error',
            autoFix: false,
          },
        ],
      },
    },
    settings: {
      enabled: true,
      timeout: 30000,
      cache: {
        enabled: true,
        ttl: 3600,
      },
    },
  };

  writeFileSync(configPath, JSON.stringify(template, null, 2));
  console.log(chalk.green(`‚úì Created hooks configuration at ${configPath}`));
  console.log(chalk.dim('\nEdit this file to configure which agents run on git hooks.'));
  console.log(chalk.dim('Install agents with: prpm install @pre-commit/security-scanner\n'));
}

/**
 * Install git hooks
 */
async function handleInstall(): Promise<void> {
  if (!isGitRepo()) {
    console.error(chalk.red('‚úó Not in a git repository'));
    console.log(chalk.dim('Run this command from the root of your git repository.\n'));
    process.exit(1);
  }

  const hooksDir = getGitHooksDir();
  const configPath = join('.prpm', 'hooks.json');

  // Create hooks config if it doesn't exist
  if (!existsSync(configPath)) {
    createHooksConfig();
  }

  // Create hooks directory if it doesn't exist
  if (!existsSync(hooksDir)) {
    mkdirSync(hooksDir, { recursive: true });
  }

  // Create pre-commit hook
  const preCommitHook = join(hooksDir, 'pre-commit');
  const hookScript = `#!/bin/sh
# PRPM pre-commit hook
# Generated by prpm hooks install

# Run PRPM hooks command
prpm hooks run pre-commit

# Exit with the same code as the hooks command
exit $?
`;

  writeFileSync(preCommitHook, hookScript);
  chmodSync(preCommitHook, 0o755);

  console.log(chalk.green('‚úì Git hooks installed successfully'));
  console.log(chalk.dim(`\nInstalled hooks:`));
  console.log(chalk.dim(`  - pre-commit ‚Üí ${preCommitHook}`));
  console.log(chalk.dim(`\nConfiguration: ${configPath}`));
  console.log(chalk.dim('\nRun ') + chalk.cyan('prpm hooks uninstall') + chalk.dim(' to remove hooks.\n'));
}

/**
 * Uninstall git hooks
 */
async function handleUninstall(): Promise<void> {
  if (!isGitRepo()) {
    console.error(chalk.red('‚úó Not in a git repository'));
    process.exit(1);
  }

  const hooksDir = getGitHooksDir();
  const preCommitHook = join(hooksDir, 'pre-commit');

  if (existsSync(preCommitHook)) {
    // Check if it's a PRPM hook
    const content = readFileSync(preCommitHook, 'utf-8');
    if (content.includes('PRPM pre-commit hook')) {
      unlinkSync(preCommitHook);
      console.log(chalk.green('‚úì PRPM git hooks uninstalled successfully'));
      console.log(chalk.dim(`\nRemoved: ${preCommitHook}\n`));
    } else {
      console.log(chalk.yellow('‚ö†Ô∏è  Pre-commit hook exists but was not installed by PRPM'));
      console.log(chalk.dim('Will not remove it. Please remove manually if needed.\n'));
    }
  } else {
    console.log(chalk.yellow('‚ö†Ô∏è  No PRPM hooks found'));
    console.log(chalk.dim('Hooks may have already been removed.\n'));
  }
}

/**
 * Run hooks for a specific event (pre-commit, pre-push, etc.)
 */
async function handleRun(hookType: string): Promise<void> {
  const configPath = join('.prpm', 'hooks.json');

  if (!existsSync(configPath)) {
    console.error(chalk.red('‚úó Hooks configuration not found'));
    console.log(chalk.dim(`Run ${chalk.cyan('prpm hooks install')} to set up hooks.\n`));
    process.exit(1);
  }

  // Read configuration
  const config = JSON.parse(readFileSync(configPath, 'utf-8'));

  // Check if hooks are globally enabled
  if (config.settings?.enabled === false) {
    console.log(chalk.dim('‚ÑπÔ∏è  Hooks are disabled in configuration'));
    process.exit(0);
  }

  // Get hook configuration
  const hookConfig = config.hooks?.[hookType];
  if (!hookConfig || !hookConfig.enabled) {
    console.log(chalk.dim(`‚ÑπÔ∏è  ${hookType} hook is not enabled`));
    process.exit(0);
  }

  // Check if any agents are configured
  if (!hookConfig.agents || hookConfig.agents.length === 0) {
    console.log(chalk.dim(`‚ÑπÔ∏è  No agents configured for ${hookType}`));
    process.exit(0);
  }

  console.log(chalk.blue(`\nüîç Running ${hookType} checks...\n`));

  // TODO: Implement agent execution
  // For now, just show what would be executed
  let hasErrors = false;

  for (const agent of hookConfig.agents) {
    if (!agent.enabled) {
      continue;
    }

    console.log(chalk.dim(`  Checking with ${agent.name}...`));

    // TODO: Execute agent here
    // This is a placeholder - actual implementation will:
    // 1. Get staged files (for pre-commit) using git diff --cached --name-only
    // 2. Filter files by glob pattern (agent.files)
    // 3. Load agent package
    // 4. Execute agent via Anthropic SDK
    // 5. Process results and show output

    console.log(chalk.yellow(`    ‚ö†Ô∏è  Not implemented yet - would check files matching: ${agent.files}`));

    if (agent.severity === 'error') {
      // hasErrors = true; // Uncomment when implemented
    }
  }

  if (hasErrors) {
    console.log(chalk.red('\n‚úó Checks failed. Please fix the issues above.\n'));
    process.exit(1);
  }

  console.log(chalk.green('\n‚úì All checks passed\n'));
  process.exit(0);
}

/**
 * Show status of installed hooks
 */
async function handleStatus(): Promise<void> {
  if (!isGitRepo()) {
    console.error(chalk.red('‚úó Not in a git repository'));
    process.exit(1);
  }

  const hooksDir = getGitHooksDir();
  const configPath = join('.prpm', 'hooks.json');
  const preCommitHook = join(hooksDir, 'pre-commit');

  console.log(chalk.blue('\nüìã PRPM Hooks Status\n'));

  // Check if hooks are installed
  let hooksInstalled = false;
  if (existsSync(preCommitHook)) {
    const content = readFileSync(preCommitHook, 'utf-8');
    if (content.includes('PRPM pre-commit hook')) {
      hooksInstalled = true;
      console.log(chalk.green('‚úì Git hooks: Installed'));
    } else {
      console.log(chalk.yellow('‚ö†Ô∏è  Git hooks: Other hook exists'));
    }
  } else {
    console.log(chalk.red('‚úó Git hooks: Not installed'));
  }

  // Check if config exists
  if (existsSync(configPath)) {
    console.log(chalk.green(`‚úì Configuration: ${configPath}`));

    const config = JSON.parse(readFileSync(configPath, 'utf-8'));
    const enabled = config.settings?.enabled !== false;
    console.log(chalk.dim(`  Enabled: ${enabled ? 'yes' : 'no'}`));

    // Show configured hooks
    if (config.hooks) {
      const hookTypes = Object.keys(config.hooks);
      if (hookTypes.length > 0) {
        console.log(chalk.dim(`\n  Configured hooks:`));
        for (const hookType of hookTypes) {
          const hookConfig = config.hooks[hookType];
          const agentCount = hookConfig.agents?.length || 0;
          const hookEnabled = hookConfig.enabled !== false;
          const status = hookEnabled ? chalk.green('enabled') : chalk.dim('disabled');
          console.log(chalk.dim(`    - ${hookType}: ${status}, ${agentCount} agent(s)`));
        }
      }
    }
  } else {
    console.log(chalk.yellow('‚ö†Ô∏è  Configuration: Not found'));
  }

  console.log();
}

/**
 * Create the hooks command
 */
export function createHooksCommand(): Command {
  const hooksCommand = new Command('hooks')
    .description('Manage git hooks for running agents on code changes');

  hooksCommand
    .command('install')
    .description('Install PRPM git hooks')
    .action(handleInstall);

  hooksCommand
    .command('uninstall')
    .description('Uninstall PRPM git hooks')
    .action(handleUninstall);

  hooksCommand
    .command('run <hook-type>')
    .description('Run agents for a specific hook (used internally by git)')
    .action(handleRun);

  hooksCommand
    .command('status')
    .description('Show status of installed hooks and configuration')
    .action(handleStatus);

  return hooksCommand;
}
