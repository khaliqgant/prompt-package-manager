[
  {
    "name": "windsurf-react-best-practices",
    "description": "Comprehensive React development guidelines with TypeScript, hooks, and modern best practices for Windsurf",
    "author": "stevermeister",
    "tags": ["react", "typescript", "frontend", "hooks", "best-practices"],
    "type": "rule",
    "sourceUrl": "https://github.com/stevermeister/windsurfrules-templates",
    "content": "# React Project - Project Guidelines\n\n## Project Overview\nBuilt with React and follows React's best practices and conventions for project structure and development.\n\n## Development Guidelines\n\n### Frontend Architecture\n- Use functional components with hooks\n- Implement atomic design principles for component organization\n- Store components in `src/components` following atomic design folders (atoms, molecules, organisms, templates, pages)\n- Keep business logic in custom hooks under `src/hooks`\n- Store types in `src/types` directory\n- Use React Context for global state management\n- Redux/RTK for complex state management scenarios\n\n### Coding Standards\n- Use TypeScript for all components and utilities\n- Implement proper type definitions for all props, states, and functions\n- Follow ESLint and Prettier configurations\n- Use CSS-in-JS with styled-components or emotion\n- Implement proper error boundaries\n- Use React.Suspense for code-splitting\n- Implement proper loading states for async operations\n\n### Code Quality Tools\n- Pre-commit hooks (configured in `.husky`):\n  - ESLint: Code style enforcement\n  - Prettier: Code formatting\n  - TypeScript compilation check\n  - Unit test execution\n- Additional checks:\n  - Bundle size analysis\n  - Unused imports detection\n  - Accessibility checks (jsx-a11y)\n  - Performance monitoring\n\n### Development Environment\n\n#### Node Requirements\n- Node.js version: 20.x\n- Package manager: pnpm\n- Module bundler: Vite\n\n#### Testing Requirements\n- Jest for unit testing\n- React Testing Library for component testing\n- Cypress for E2E testing\n- Test files must be named `*.test.tsx` or `*.spec.tsx`\n- Coverage threshold: 80%\n\n#### Dependencies\nCore dependencies:\n- React 18.x\n- TypeScript 5.x\n- React Router 6.x\n- Styled-components/Emotion\n- React Query for data fetching\n- Zod for runtime type checking\n\n#### Production Requirements\n- Implement proper code splitting\n- Use React.lazy for route-based code splitting\n- Configure proper CSP headers\n- Implement service workers for PWA support\n- Use error tracking (Sentry)\n- Analytics integration"
  },
  {
    "name": "windsurf-vue-composition-api",
    "description": "Vue 3 Composition API development guidelines with Pinia, Vite, and TypeScript for Windsurf",
    "author": "stevermeister",
    "tags": ["vue", "vue3", "composition-api", "typescript", "frontend"],
    "type": "rule",
    "sourceUrl": "https://github.com/stevermeister/windsurfrules-templates",
    "content": "# Vue.js Project - Project Guidelines\n\n## Project Overview\nBuilt with Vue 3 using Composition API, TypeScript, and modern tooling.\n\n## Development Guidelines\n\n### Frontend Architecture\n- Use Vue 3 Composition API\n- Feature-based directory structure\n- Composables for reusable logic in `src/composables`\n- Store in `src/stores` using Pinia\n- Types in `src/types` directory\n- Proper component organization\n\n### Coding Standards\n- Use TypeScript with strict mode\n- Follow Vue 3 style guide\n- Use script setup syntax\n- Implement proper type definitions\n- Use Vite as build tool\n- ESLint and Prettier configurations\n\n### Code Quality Tools\n- Pre-commit hooks:\n  - ESLint with Vue plugin\n  - Prettier formatting\n  - TypeScript checks\n  - Unit tests\n- Additional checks:\n  - Component naming validation\n  - Unused imports detection\n  - Bundle analysis\n\n### Development Environment\n\n#### Requirements\n- Node.js version: 20.x\n- Package manager: pnpm\n- Build tool: Vite\n\n#### Testing Requirements\n- Vitest for unit testing\n- Vue Test Utils for component testing\n- Cypress for E2E\n- Coverage threshold: 80%\n\n#### Dependencies\nCore:\n- Vue 3.x\n- TypeScript 5.x\n- Vue Router 4.x\n- Pinia for state\n- VueUse for utilities\n\n#### Production\n- Code splitting\n- PWA support\n- Error tracking\n- Analytics"
  },
  {
    "name": "windsurf-angular-enterprise",
    "description": "Enterprise-grade Angular development guidelines with RxJS, signals, and best practices for Windsurf",
    "author": "stevermeister",
    "tags": ["angular", "typescript", "rxjs", "enterprise", "frontend"],
    "type": "rule",
    "sourceUrl": "https://github.com/stevermeister/windsurfrules-templates",
    "content": "# Angular Project - Project Guidelines\n\n## Project Overview\nBuilt with Angular following Angular's best practices and conventions for enterprise-grade applications.\n\n## Development Guidelines\n\n### Architecture\n- Follow Angular's modular architecture:\n  - Core module for singleton services\n  - Shared module for common components\n  - Feature modules for specific functionality\n- Implement proper lazy loading\n- Use standalone components where appropriate\n- Follow smart/presentational component pattern\n- Use proper dependency injection hierarchy\n\n### Coding Standards\n- Use strict TypeScript configuration\n- Follow Angular style guide\n- Implement proper type definitions\n- Use signals for state management\n- Follow proper naming conventions:\n  - Components: kebab-case files, PascalCase classes\n  - Services: kebab-case files, PascalCase classes\n  - Interfaces: PascalCase with 'I' prefix\n- Implement proper RxJS patterns:\n  - Use async pipe\n  - Proper subscription management\n  - Use appropriate operators\n  - Implement proper error handling\n\n### Code Quality Tools\n- Pre-commit hooks:\n  - ESLint with Angular ESLint rules\n  - Prettier for formatting\n  - TypeScript checks\n  - Unit test execution\n- Additional checks:\n  - Angular template lint\n  - Circular dependency check\n  - Bundle size analysis\n  - Dead code elimination\n\n### Development Environment\n\n#### Requirements\n- Node.js version: 20.x\n- Package manager: npm/yarn/pnpm\n- Angular CLI: 17.x\n- TypeScript: 5.x\n\n#### Testing Requirements\n- Jasmine/Jest for unit testing\n- Cypress for E2E testing\n- Test files must be named `*.spec.ts`\n- Coverage threshold: 80%\n- Implement proper component testing\n- Use TestBed configuration properly\n\n#### Dependencies\nCore:\n- Angular 17.x\n- RxJS 7.x\n- NgRx (if needed)\n- Angular CDK\n- TypeScript 5.x\n\n#### Production\n- Build optimization\n- Lazy loading\n- CSP headers\n- PWA features\n- Error tracking\n- Caching"
  },
  {
    "name": "windsurf-django-python",
    "description": "Django development guidelines with async ORM, type hints, and production best practices for Windsurf",
    "author": "stevermeister",
    "tags": ["django", "python", "backend", "orm", "async"],
    "type": "rule",
    "sourceUrl": "https://github.com/stevermeister/windsurfrules-templates",
    "content": "# Django Project - Project Guidelines\n\n## Project Overview\nBuilt with Django and follows Django's best practices and conventions for project structure and development.\n\n## Development Guidelines\n\n### Frontend Development\n- Use Tailwind CSS with component library\n- Use existing pagination templates instead of creating new ones\n\n### Coding Standards\n- Always include type definitions for all functions and all variables\n- Prefer using `list` instead of `List` where possible, same for `dict` and `Dict`\n- Reference similar files before writing new code\n- Follow existing patterns and conventions\n- Use async Django ORM in async functions\n\n### Code Quality Tools\n- Pre-push hooks (configured in `.pre-commit-config.yaml`):\n  - Black: Python code formatting with 88-character line length\n  - Flake8: Code style enforcement\n  - Mypy: Static type checking with strict rules:\n    - All functions must have type annotations\n    - All parameters must have type annotations\n    - No untyped decorators\n    - Strict Optional handling\n    - No implicit Optional types\n  - PyLint: Linting\n  - Django-upgrade: Django compatibility checks\n- Additional checks:\n  - Trailing whitespace and end-of-file fixes\n  - JSON, TOML, XML, YAML validation\n  - Debug statement detection\n  - Private key detection\n  - Docstring placement verification\n\n### Development Environment\n\n#### Python Requirements\n- Python version: 3.12\n- Package management: Poetry\n- Virtual environment must be activated before development\n\n#### Testing Requirements\n- Test files must be named `test_*.py`\n- Factory Boy for test data generation\n\n#### Dependencies\nCore:\n- Django 5.0.9\n- Celery 5.4.0 for async tasks\n- Redis 5.1.1 for caching\n\n#### Production\n- Gunicorn as WSGI server\n- Sentry SDK for error tracking\n- Django-anymail for email handling"
  },
  {
    "name": "windsurf-fastapi-modern",
    "description": "Modern FastAPI development with async patterns, Pydantic V2, and best practices for Windsurf",
    "author": "stevermeister",
    "tags": ["fastapi", "python", "async", "api", "pydantic"],
    "type": "rule",
    "sourceUrl": "https://github.com/stevermeister/windsurfrules-templates",
    "content": "# FastAPI Project - Project Guidelines\n\n## Project Overview\nBuilt with FastAPI following modern async Python best practices and clean architecture.\n\n## Development Guidelines\n\n### Project Structure\n- Use domain-driven structure:\n  - `app/api` - API routes\n  - `app/core` - Core functionality\n  - `app/models` - Database models\n  - `app/schemas` - Pydantic schemas\n  - `app/services` - Business logic\n  - `app/repositories` - Data access\n\n### Architecture\n- Follow async patterns throughout\n- Use dependency injection\n- Implement proper layered architecture\n- Separate business logic from routes\n\n### Coding Standards\n- Use Python 3.11+ features\n- Implement proper type hints everywhere\n- Use Pydantic V2 for validation\n- Follow async/await patterns\n- Use SQLAlchemy 2.0 async\n- Implement proper error handling\n- Use FastAPI dependency injection\n\n### Code Quality Tools\n- Pre-commit hooks:\n  - Black formatting\n  - Ruff for linting\n  - Mypy for type checking\n  - Pytest execution\n- Additional checks:\n  - Security scanning\n  - Dependency updates\n  - API documentation validation\n\n### Development Environment\n\n#### Requirements\n- Python version: 3.11+\n- Package manager: Poetry/pip\n- FastAPI: 0.100+\n\n#### Testing Requirements\n- Pytest for testing\n- Pytest-asyncio for async tests\n- Httpx for API testing\n- Coverage threshold: 85%\n\n#### Dependencies\nCore:\n- FastAPI 0.100+\n- Pydantic V2\n- SQLAlchemy 2.0\n- Alembic for migrations\n- Python-jose for JWT\n\n#### Production\n- Uvicorn/Gunicorn\n- Proper CORS\n- Rate limiting\n- Caching\n- Monitoring\n\n### Security\n- JWT authentication\n- OAuth2 flows\n- Proper password hashing\n- SQL injection prevention\n- XSS protection\n\n### Performance\n- Use async database queries\n- Implement caching\n- Connection pooling\n- Response compression"
  },
  {
    "name": "windsurf-flask-microservices",
    "description": "Flask microservices development with blueprints, SQLAlchemy, and production patterns for Windsurf",
    "author": "stevermeister",
    "tags": ["flask", "python", "microservices", "api", "backend"],
    "type": "rule",
    "sourceUrl": "https://github.com/stevermeister/windsurfrules-templates",
    "content": "# Flask Project - Project Guidelines\n\n## Project Overview\nBuilt with Flask following microservices and clean architecture principles.\n\n## Development Guidelines\n\n### Project Structure\n- Use application factory pattern\n- Blueprint-based organization\n- MVC architecture\n- Modular structure:\n  - `app/models` - Database models\n  - `app/views` - Route handlers\n  - `app/services` - Business logic\n  - `app/utils` - Utilities\n\n### Architecture\n- Application factory pattern\n- Blueprint registration\n- Extension initialization\n- Configuration management\n\n### Coding Standards\n- Python 3.11+ features\n- Type hints everywhere\n- PEP 8 compliance\n- Proper error handling\n- Use Flask extensions properly\n- Implement request validation\n\n### Code Quality Tools\n- Pre-commit hooks:\n  - Black formatting\n  - Flake8 linting\n  - Mypy type checking\n  - Pytest execution\n- Additional:\n  - Security scanning\n  - Dependency check\n  - Code complexity\n\n### Development Environment\n\n#### Requirements\n- Python: 3.11+\n- Package manager: Poetry/pip\n- Flask: 3.x\n\n#### Testing\n- Pytest for testing\n- Flask test client\n- Factory Boy for fixtures\n- Coverage: 80%+\n\n#### Dependencies\nCore:\n- Flask 3.x\n- Flask-SQLAlchemy\n- Flask-Migrate\n- Flask-JWT-Extended\n- Marshmallow for serialization\n\n#### Production\n- Gunicorn WSGI\n- Nginx reverse proxy\n- Environment configs\n- Logging setup\n- Error tracking\n\n### Database\n- SQLAlchemy ORM\n- Alembic migrations\n- Connection pooling\n- Query optimization\n\n### Security\n- JWT authentication\n- CORS configuration\n- SQL injection prevention\n- XSS protection\n- Rate limiting\n\n### Template Guidelines\n- Jinja2 templates\n- Template inheritance\n- Proper escaping\n- Asset management"
  },
  {
    "name": "windsurf-typescript-strict",
    "description": "Strict TypeScript configuration with modern features and comprehensive type safety for Windsurf",
    "author": "stevermeister",
    "tags": ["typescript", "strict", "type-safety", "configuration"],
    "type": "rule",
    "sourceUrl": "https://github.com/stevermeister/windsurfrules-templates",
    "content": "# TypeScript Project - Project Guidelines\n\n## Project Overview\nTypeScript project with strict configuration and modern best practices.\n\n## TypeScript Configuration\n\n### Strict Settings\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true,\n    \"strictBindCallApply\": true,\n    \"strictPropertyInitialization\": true,\n    \"noImplicitThis\": true,\n    \"alwaysStrict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": true\n  }\n}\n```\n\n### Coding Standards\n- Use modern TypeScript features\n- Implement proper type guards\n- Use discriminated unions\n- Leverage utility types\n- Avoid `any` type\n- Use `unknown` instead of `any` when needed\n- Implement proper generics\n- Use const assertions\n\n### Type Guidelines\n- Define interfaces for objects\n- Use type aliases for unions\n- Implement branded types for validation\n- Use mapped types\n- Leverage conditional types\n- Implement proper function overloads\n\n### Code Quality Tools\n- Pre-commit hooks:\n  - ESLint with TypeScript plugin\n  - Prettier formatting\n  - Type checking\n  - Unit tests\n- Additional:\n  - Unused exports check\n  - Circular dependency detection\n  - Type coverage analysis\n\n### Development Environment\n\n#### Requirements\n- Node.js: 20.x\n- TypeScript: 5.x\n- Package manager: pnpm\n\n### Error Handling\n- Use custom error types\n- Implement Result types\n- Proper async error handling\n- Type-safe error messages\n\n### Testing\n- Jest with ts-jest\n- Type-safe test utilities\n- Mock typing\n- Coverage: 85%+"
  },
  {
    "name": "windsurf-node-express-api",
    "description": "Node.js/Express REST API with clean architecture, TypeScript, and production patterns for Windsurf",
    "author": "stevermeister",
    "tags": ["nodejs", "express", "api", "typescript", "backend"],
    "type": "rule",
    "sourceUrl": "https://github.com/stevermeister/windsurfrules-templates",
    "content": "# Node.js/Express Project - Project Guidelines\n\n## Project Overview\nBuilt with Node.js and Express.js, following REST API best practices and clean architecture principles.\n\n## Development Guidelines\n\n### Architecture\n- Follow Clean Architecture principles\n- Use layered architecture:\n  - Controllers (`src/controllers`)\n  - Services (`src/services`)\n  - Repositories (`src/repositories`)\n  - Models (`src/models`)\n  - Routes (`src/routes`)\n  - Middleware (`src/middleware`)\n- Implement proper error handling middleware\n- Use dependency injection pattern\n\n### Coding Standards\n- Use TypeScript for all files\n- Implement proper type definitions for all functions and variables\n- Follow SOLID principles\n- Implement proper validation using Joi or Zod\n- Use async/await instead of callbacks\n- Implement proper logging (Winston/Pino)\n- Follow REST API naming conventions\n- Implement proper API versioning\n\n### Code Quality Tools\n- Pre-commit hooks:\n  - ESLint with TypeScript support\n  - Prettier for code formatting\n  - TypeScript compilation check\n  - Test execution\n- Additional checks:\n  - Security vulnerabilities scan\n  - Dependency updates check\n  - Code complexity analysis\n  - Dead code detection\n\n### Development Environment\n\n#### Node Requirements\n- Node.js version: 20.x\n- Package manager: npm/yarn\n- TypeScript 5.x\n\n#### Testing Requirements\n- Jest for unit testing\n- Supertest for API testing\n- Test files must be named `*.test.ts` or `*.spec.ts`\n- Coverage threshold: 85%\n- Integration tests for database operations\n\n#### Dependencies\nCore:\n- Express 4.x\n- TypeScript 5.x\n- Prisma/TypeORM for database\n- JWT for authentication\n- Winston/Pino for logging\n- Express-validator for validation\n\n#### Production\n- Use PM2 for process management\n- Implement rate limiting\n- Set up proper security headers\n- Configure CORS properly\n- Use compression middleware\n- Implement proper caching strategy\n- Set up monitoring (New Relic/DataDog)"
  },
  {
    "name": "windsurf-spring-boot-enterprise",
    "description": "Spring Boot enterprise Java development with Spring Security, JPA, and microservices for Windsurf",
    "author": "stevermeister",
    "tags": ["spring-boot", "java", "enterprise", "microservices", "jpa"],
    "type": "rule",
    "sourceUrl": "https://github.com/stevermeister/windsurfrules-templates",
    "content": "# Spring Boot Project - Project Guidelines\n\n## Project Overview\nBuilt with Spring Boot following Spring's best practices and conventions for enterprise Java applications.\n\n## Development Guidelines\n\n### Architecture\n- Follow layered architecture:\n  - Controllers (`src/main/java/com/company/controllers`)\n  - Services (`src/main/java/com/company/services`)\n  - Repositories (`src/main/java/com/company/repositories`)\n  - Models (`src/main/java/com/company/models`)\n  - DTOs (`src/main/java/com/company/dto`)\n- Use Spring's dependency injection\n- Implement proper exception handling\n- Follow RESTful API design principles\n\n### Coding Standards\n- Use Java 21 features where appropriate\n- Implement proper documentation using JavaDoc\n- Use Lombok for reducing boilerplate\n- Follow Spring's naming conventions\n- Use constructor injection over field injection\n- Implement proper validation using Bean Validation\n- Use Optional for null handling\n- Implement proper logging using SLF4J\n\n### Code Quality Tools\n- Pre-commit hooks:\n  - Checkstyle for code style\n  - SpotBugs for bug detection\n  - PMD for code analysis\n  - Unit test execution\n- Additional checks:\n  - SonarQube analysis\n  - Dependency vulnerability check\n  - Code coverage check\n  - Architecture tests\n\n### Development Environment\n\n#### Java Requirements\n- Java version: 21\n- Build tool: Maven/Gradle\n- Spring Boot: 3.x\n\n#### Testing Requirements\n- JUnit 5 for unit testing\n- Mockito for mocking\n- TestContainers for integration tests\n- Test files must be in `src/test/java`\n- Coverage threshold: 80%\n\n#### Dependencies\nCore:\n- Spring Boot Starter Web\n- Spring Boot Starter Data JPA\n- Spring Boot Starter Security\n- Spring Boot Starter Validation\n- Spring Boot Actuator\n- Flyway/Liquibase for migrations\n\n#### Production\n- Use proper profiles (dev, test, prod)\n- Implement health checks\n- Configure metrics collection\n- Set up proper logging\n- Configure connection pool"
  },
  {
    "name": "windsurf-laravel-php",
    "description": "Laravel PHP development with Eloquent ORM, testing, and modern PHP practices for Windsurf",
    "author": "stevermeister",
    "tags": ["laravel", "php", "eloquent", "backend", "mvc"],
    "type": "rule",
    "sourceUrl": "https://github.com/stevermeister/windsurfrules-templates",
    "content": "# Laravel Project - Project Guidelines\n\n## Project Overview\nBuilt with Laravel following PHP and Laravel best practices.\n\n## Development Guidelines\n\n### Project Architecture\n- Follow MVC pattern\n- Use service classes for business logic\n- Repository pattern for data access\n- Form requests for validation\n- Resource classes for API responses\n- Policy classes for authorization\n\n### Coding Standards\n- PHP 8.2+ features\n- PSR-12 coding standard\n- Type declarations everywhere\n- Strict types enabled\n- Proper DocBlocks\n- Follow Laravel conventions\n- Use Laravel helpers appropriately\n\n### Code Quality Tools\n- Pre-commit hooks:\n  - PHP CS Fixer\n  - PHPStan level 8\n  - Psalm static analysis\n  - PHPUnit tests\n- Additional:\n  - Larastan for Laravel-specific checks\n  - Security scanning\n  - Unused code detection\n\n### Development Environment\n\n#### Requirements\n- PHP: 8.2+\n- Composer: 2.x\n- Laravel: 11.x\n- Database: MySQL/PostgreSQL\n\n#### Testing\n- PHPUnit for unit tests\n- Laravel Dusk for browser tests\n- Feature tests for integration\n- Coverage: 80%+\n\n#### Dependencies\nCore:\n- Laravel Framework 11.x\n- Laravel Sanctum for API auth\n- Laravel Horizon for queues\n- Spatie packages for common features\n\n#### Production\n- Octane for performance\n- Queue workers\n- Scheduler setup\n- Cache configuration\n- Session handling\n\n### Database Guidelines\n- Eloquent ORM\n- Migration files\n- Seeders for test data\n- Factory classes\n- Query optimization\n- Eager loading\n\n### Security\n- CSRF protection\n- XSS prevention\n- SQL injection prevention\n- Rate limiting\n- Authentication gates\n- Authorization policies\n\n### Artisan Commands\n- Custom commands for tasks\n- Proper command structure\n- Command testing\n- Schedule definition\n\n### Queue Management\n- Queue jobs for async\n- Job batching\n- Failed job handling\n- Job middleware\n\n### Cache & Performance\n- Cache strategies\n- Route caching\n- Config caching\n- View caching\n- Database query caching\n\n### Frontend & API\n- Blade templating\n- API resources\n- Form requests\n- API versioning\n- Pagination"
  },
  {
    "name": "windsurf-nextjs-typescript-fullstack",
    "description": "Next.js 15 full-stack development with App Router, Server Components, and TypeScript for Windsurf",
    "author": "andra2112s",
    "tags": ["nextjs", "react", "typescript", "fullstack", "app-router"],
    "type": "rule",
    "sourceUrl": "https://github.com/andra2112s/awesome-windsurfrules",
    "content": "# Next.js Full-Stack Project Guidelines\n\n## Core Functionality\n- Next.js 15 with App Router\n- Server Components by default\n- TypeScript strict mode\n\n## Code and Style Guidelines\n- Use ESLint with Next.js, TypeScript, and Prettier rules\n- Enable `strict: true` in TypeScript\n- Integrate Prettier with ESLint and Husky pre-commit hooks\n- Use `eslint-plugin-react-hooks` and `eslint-plugin-import`\n- Configure absolute imports via `baseUrl` in `tsconfig.json`\n\n## Tech Stack\n- Framework: Next.js 15 (App Router, Server Components)\n- Deployment: Vercel\n- Database: Supabase (PostgreSQL, Auth)\n- Styling: Shadcn/UI with TailwindCSS\n- Language: TypeScript\n\n## Naming Conventions\n- PascalCase for components, camelCase for variables and hooks\n- kebab-case for files and folders\n- RESTful naming for API routes (e.g., `/api/users`)\n\n## State Management\n- Use React Context and Next.js Server Actions\n- Minimize client-side state; consider Zustand or Jotai\n\n## UI and Styling\n- Use Shadcn/UI components with TailwindCSS\n- Minimize custom CSS; follow responsive design with Tailwind breakpoints\n\n## Performance Optimization\n- Use React Server Components and lazy loading (`next/dynamic`)\n- Optimize images with Next.js Image and `priority`\n- Use Edge Functions and Incremental Static Regeneration (ISR)\n- Monitor performance with Vercel Analytics and Lighthouse\n\n## Error Handling\n- Use custom error pages (`pages/404.tsx`, `pages/500.tsx`)\n- Integrate Sentry or Logflare for error logging\n\n## Testing\n- Write unit tests for components and utilities\n- Implement E2E tests for critical flows\n- Monitor memory usage and performance"
  },
  {
    "name": "windsurf-cascade-core-principles",
    "description": "Windsurf Cascade AI assistant core operating principles with TypeScript and Next.js stack for Windsurf",
    "author": "kinopeee",
    "tags": ["windsurf", "cascade", "ai-assistant", "principles", "workflow"],
    "type": "rule",
    "sourceUrl": "https://github.com/kinopeee/windsurfrules",
    "content": "# Windsurf Cascade - AI Assistant Guidelines\n\nYou are Windsurf Cascade, an AI assistant with advanced problem-solving capabilities. Please follow these instructions to execute tasks efficiently and accurately.\n\n## Core Operating Principles\n\n1. **Instruction Reception and Understanding**\n   - Carefully read and interpret user instructions\n   - Ask specific questions when clarification is needed\n   - Clearly identify technical constraints and requirements\n   - Do not perform any operations beyond what is instructed\n\n2. **In-depth Analysis and Planning**\n   ```markdown\n   ## Task Analysis\n   - Purpose: [Final goal of the task]\n   - Technical Requirements: [Technology stack and constraints]\n   - Implementation Steps: [Specific steps]\n   - Risks: [Potential issues]\n   - Quality Standards: [Requirements to meet]\n   ```\n\n3. **Implementation Planning**\n   ```markdown\n   ## Implementation Plan\n   1. [Specific step 1]\n      - Detailed implementation content\n      - Expected challenges and countermeasures\n   2. [Specific step 2]\n      ...\n   ```\n\n4. **Comprehensive Implementation and Verification**\n   - Execute file operations and related processes in optimized complete sequences\n   - Continuously verify against quality standards throughout implementation\n   - Address issues promptly with integrated solutions\n   - Execute processes only within the scope of instructions, without adding extra features or operations\n\n5. **Continuous Feedback**\n   - Regularly report implementation progress\n   - Confirm at critical decision points\n   - Promptly report issues with proposed solutions\n\n## Technology Stack and Constraints\n\n### Core Technologies\n- TypeScript: ^5.0.0\n- Node.js: ^20.0.0\n- AI Model: claude-3-7-sonnet-20250219 (fixed version)\n\n### Frontend\n- Next.js: ^15.1.3\n- React: ^19.0.0\n- Tailwind CSS: ^3.4.17\n- shadcn/ui: ^2.1.8\n\n### Backend\n- SQLite: ^3.0.0\n- Prisma: ^5.0.0\n\n### Development Tools\n- npm: ^10.0.0\n- ESLint: ^9.0.0\n\n## Quality Management\n- Maintain code quality throughout\n- Follow established patterns\n- Verify at each step\n- Document decisions\n- Test thoroughly"
  },
  {
    "name": "windsurf-project-workflow-best-practices",
    "description": "General project workflow and best practices for AI-assisted development in Windsurf",
    "author": "mberman84",
    "tags": ["workflow", "best-practices", "git", "testing", "documentation"],
    "type": "rule",
    "sourceUrl": "https://gist.github.com/mberman84/19e184e3a3a4c3a20f32a18af51ce3bc",
    "content": "# Project Workflow & Best Practices\n\n## Project Approach\n- Always check for a PRD (Product Requirements Document) before starting a new task and follow it closely\n- Look for comprehensive project documentation to understand requirements before making changes\n- Focus only on code areas relevant to the assigned task\n- Prefer iterating on existing code rather than creating new solutions\n- Keep solutions simple and avoid introducing unnecessary complexity\n\n## Code Quality\n- Keep files under 300 lines of code; refactor when approaching this limit\n- Maintain a clean, organized codebase\n- Avoid code duplication by checking for similar existing functionality\n- Write thorough tests for all major functionality\n- Consider different environments (dev, test, prod) when writing code\n- Unless explicitly instructed, instead of trying to gracefully handle an error or failure, make sure to fix the underlying issue\n\n## Development Workflow\n- Kill all related running servers before starting a new one\n- Always start a new server after making changes to allow for testing\n- Make only requested changes or changes you're confident are well understood\n- Consider what other code areas might be affected by your changes\n- Don't drastically change existing patterns without explicit instruction\n\n## Version Control\n- Never leave unstaged/untracked files after committing to git\n- Don't create new branches unless explicitly requested\n- Never commit .env files to version control\n- Never overwrite .env files without first asking and confirming\n\n## Best Practices\n- Avoid writing one-time scripts in permanent files\n- Don't mock data except for tests (never for dev or prod environments)\n- Exhaust all options using existing implementations before introducing new patterns\n- If introducing a new pattern to replace an old one, remove the old implementation"
  },
  {
    "name": "windsurf-github-collaboration-rules",
    "description": "GitHub collaboration rules for pull requests, issues, and team workflows in Windsurf",
    "author": "ichoosetoaccept",
    "tags": ["github", "collaboration", "pull-requests", "issues", "workflow"],
    "type": "rule",
    "sourceUrl": "https://github.com/ichoosetoaccept/awesome-windsurf",
    "content": "# GitHub Collaboration Guidelines\n\n## General Principles\n- This is a public repository, so please be respectful of others and make sure the content makes sense to others\n- We have access to the Github CLI via the gh command. We are already authenticated\n- When fixing linting issues use the tools intended for this instead of trying to edit files yourself, directly\n- You can see which tools we have in package.json\n\n## Commit Guidelines\n- When committing, put quotes around your commit message\n- It's a good practice to format commit messages with a type and description\n- The correct format should be: type: description\n- Remember that commit type must be one of [add, update, remove, fix, meta, release]\n\n## Branch & PR Management\n- The main branch is protected and we cannot push directly to it\n- We use the merge queue to merge our PRs\n- Before creating new branches, always check which branch we're currently working on and decide if that makes sense\n- Correct if not\n\n## PR & Issue Workflow\n- When working with Github PR's and issues, be sure to update them regularly as we make progress here\n- When working with Github's PR's and issues, make sure to also read the comments as they may contain crucial information and updates on the original PR/issue text\n- When we discuss larger tasks, ask if we should create a detailed Github issue for it so we can track it\n\n## Code Quality\n- Regarding all the automation we have here.. we do all of it to make contributing to this repository as easy and smooth as possible\n- We don't do it to arbitrarily add complexity\n- Adhere to the principle of DRY (Don't Repeat Yourself) when writing anything in this repository, code or text\n- Keep this in mind when reviewing files as well\n\n## Best Practices\n- Never say something without being certain. Always check your sources--after all you're free to look at the entire repository freely\n- Don't update documentation and description until after the behavior you're describing is actually saved into the repository\n- Always double check your changes before committing, pushing and ESPECIALLY before creating PRs"
  },
  {
    "name": "windsurf-vibe-coding-global-rules",
    "description": "Universal AI coding standards for simplicity, security, and feature-based development in Windsurf",
    "author": "obviousworks",
    "tags": ["global-rules", "ai-coding", "standards", "security", "workflow"],
    "type": "rule",
    "sourceUrl": "https://github.com/obviousworks/vibe-coding-ai-rules",
    "content": "# Global AI Coding Rules\n\n## Core Principles\n- **Simplicity First**: Always prefer the simplest solution that meets requirements\n- **Readability**: Code should be self-documenting; prioritize clarity over cleverness\n- **Consistency**: Follow established patterns within the project\n- **DRY (Don't Repeat Yourself)**: Extract reusable logic into functions/modules\n\n## Workflow Standards\n- **Rule Application Tracking**: When applying rules, tag them with abbreviations (e.g., [SF] for Simplicity First)\n- **Incremental Changes**: Make small, testable changes rather than large refactors\n- **Documentation as You Go**: Update documentation when changing functionality\n- **Test-Driven**: Write tests before or alongside implementation\n\n## Code Quality Guarantees\n- **Type Safety**: Use TypeScript/type hints; avoid `any` types\n- **Error Handling**: Implement comprehensive error handling with clear messages\n- **Logging**: Add appropriate logging for debugging and monitoring\n- **Code Reviews**: All code should be review-ready with clear intent\n\n## Security & Performance Considerations\n- **Input Validation**: Validate all user inputs\n- **Authentication & Authorization**: Implement proper access controls\n- **Data Privacy**: Never log sensitive information\n- **Performance**: Consider performance implications; profile when needed\n- **Security Scanning**: Run security checks before deployment\n\n## AI Communication Guidelines\n- **Clarity**: Be explicit about requirements and constraints\n- **Context**: Provide relevant background information\n- **Verification**: Review AI-generated code carefully\n- **Iteration**: Refine prompts based on initial results\n\n## Continuous Documentation\n- **Code Comments**: Explain 'why' not 'what'\n- **README Updates**: Keep README current with project changes\n- **API Documentation**: Document all public APIs\n- **Changelog**: Maintain a changelog for significant updates\n\n## Feature-Based Development Workflow\n1. **Planning**: Define feature requirements and acceptance criteria\n2. **Design**: Outline architecture and data models\n3. **Implementation**: Code following established patterns\n4. **Testing**: Write and run tests\n5. **Review**: Code review and refinement\n6. **Documentation**: Update relevant docs\n7. **Deployment**: Deploy with monitoring"
  },
  {
    "name": "windsurf-blueprint-template",
    "description": "Blueprint template for organizing Windsurf project structure and guidelines",
    "author": "andra2112s",
    "tags": ["template", "blueprint", "project-structure", "organization"],
    "type": "rule",
    "sourceUrl": "https://github.com/andra2112s/awesome-windsurfrules",
    "content": "# Project Blueprint Template\n\nEvery time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.\n\n## Project Name and Overview\n[Your project description]\n\n## Core Functionality\n\n### Feature 1\n- [Feature description]\n- [Implementation details]\n- [Dependencies]\n\n### Feature 2\n- [Feature description]\n- [Implementation details]\n- [Dependencies]\n\n### Feature 3\n- [Feature description]\n- [Implementation details]\n- [Dependencies]\n\n## Code and Style Guidelines\n- [Coding standard 1]\n- [Coding standard 2]\n- [Coding standard 3]\n\n## Architecture\n[Describe your architecture]\n\n## Tech Stack\n- [Technology 1]\n- [Technology 2]\n- [Technology 3]\n\n## Naming Conventions\n- [Convention 1]\n- [Convention 2]\n- [Convention 3]\n\n## State Management\n- [State management approach]\n- [Tools used]\n- [Patterns followed]\n\n## UI and Styling\n- [UI framework]\n- [Styling approach]\n- [Component library]\n\n## Performance Optimization\n- [Optimization 1]\n- [Optimization 2]\n- [Optimization 3]\n\n## Error Handling\n- [Error handling strategy]\n- [Logging approach]\n- [Monitoring tools]\n\n## Testing\n- [Testing framework]\n- [Test types]\n- [Coverage requirements]\n\n## Security\n- [Security measure 1]\n- [Security measure 2]\n- [Security measure 3]\n\n## Documentation\n- [Documentation standard]\n- [Tools used]\n- [Update frequency]\n\n## Development Workflow\n- [Workflow step 1]\n- [Workflow step 2]\n- [Workflow step 3]"
  }
]
