[
  {
    "name": "ivangrynenko-update",
    "slug": "update",
    "displayName": "UPDATE",
    "description": "# Cursor Rules Updates  ## Version 1.0.6 - 2025-08-20",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "# Cursor Rules Updates\n\n## Version 1.0.6 - 2025-08-20\n\n### AGENTS.md Documentation Added\n\n**New Documentation:**\n- Added comprehensive AGENTS.md guide for using Cursor Rules with Cursor AI\n- Links to all rule bundles (Core, Web Stack, Python, JavaScript Security)\n- Tag-based selection documentation and examples\n- Installation options reference guide\n\n**Installer Improvements:**\n- Fixed hanging issue when piping installer through curl\n- Added proper STDIN handling for piped execution\n- Improved argument parsing for curl-based installation\n- Added fclose(STDIN) to prevent PHP from waiting for input after completion\n\n**Bug Fixes:**\n- Resolved script hanging when using `curl ... | php` commands\n- Fixed argument parsing when using `--` separator with piped input\n- Corrected PHP_SELF detection for piped execution\n\n**File:** `install.php`, `AGENTS.md`\n**Impact:** Major improvement to installation experience and documentation\n**Breaking Changes:** None - backward compatible\n\n---\n\n## Version 1.0.5 - 2025-01-03\n\n### Major Updates to Pull Request Review Instructions\n\n**Enhanced Multi-Language Support:**\n- Added comprehensive support for all languages in cursor rules (PHP, Python, JavaScript, TypeScript, CSS, HTML)\n- Implemented language-specific coding standards and security practices\n- Added framework-specific guidelines (Drupal, Django, React, Vue.js, Express.js)\n\n**Large File Detection and Skipping:**\n- Added logic to skip compiled/minified files (>1MB, *.min.*, *-bundle.*, etc.)\n- Implemented vendor directory filtering (node_modules/, vendor/, dist/, build/)\n- Added auto-generated file detection to focus on source code only\n\n**Improved Security Assessment:**\n- Language-specific security checks (SQL injection, XSS, command injection)\n- Framework-aware security considerations\n- OWASP compliance across all supported languages\n\n**Enhanced Label Management:**\n- Added language-specific labels (lang/php, lang/python, lang/javascript, etc.)\n- Automatic language detection based on file extensions\n- Technology-specific colour coding using official language colours\n\n**Technology Detection Process:**\n- File extension analysis for automatic language identification\n- Framework detection through config files (package.json, composer.json, etc.)\n- Project structure analysis for framework patterns\n- Dependency analysis and build tool detection\n\n**Updated Review Checklist:**\n- File analysis requirements with mandatory large file skipping\n- Language-specific sections for targeted reviews\n- Enhanced security focus across all technologies\n- Performance considerations for each language\n\n**File:** `new-pull-request.mdc`\n**Impact:** Major enhancement to code review capabilities across all supported languages\n**Breaking Changes:** None - backward compatible\n\n---\n\n## Previous Versions\n\n### Version 1.0.4\n- Previous version (details to be added)\n\n### Version 1.0.3\n- Previous version (details to be added)\n\n### Version 1.0.2\n- Previous version (details to be added)\n\n### Version 1.0.1\n- Previous version (details to be added)\n\n### Version 1.0.0\n- Initial release",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/UPDATE.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/UPDATE.md",
      "sha": "743b63d29e511c40dea0a2666a32550f165f9b96"
    }
  },
  {
    "name": "ivangrynenko-accessibility-standards",
    "slug": "accessibility-standards",
    "displayName": "Accessibility Standards",
    "description": "--- description: WCAG compliance and accessibility best practices globs: *.vue, *.jsx, *.tsx, *.html, *.php",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: WCAG compliance and accessibility best practices\nglobs: *.vue, *.jsx, *.tsx, *.html, *.php\n---\n# Accessibility Standards\n\nEnsures WCAG compliance and accessibility best practices.\n\n<rule>\nname: accessibility_standards\ndescription: Enforce accessibility standards and WCAG compliance\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(vue|jsx|tsx|html|php|css|scss|sass)$\" # Expanded to include CSS files\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"<img[^>]+(?!alt=)[^>]*>\"\n        message: \"Images must have alt attributes for screen readers.\"\n      \n      - pattern: \"aria-[a-z]+=\\\"\\\"\"\n        message: \"ARIA attributes should not be empty; provide meaningful values.\"\n\n      - pattern: \"<button[^>]*>(?![^<]*[^\\\\s])[^<]*</button>\"\n        message: \"Buttons should have meaningful, descriptive content.\"\n\n      - pattern: \"<a[^>]*href=\\\"#[^\\\"]*\\\"[^>]*>(?![^<]*<svg)[^<]*</a>\"\n        message: \"Links with href='#' should either be removed or have an aria-label for context.\"\n\n      - pattern: \"<input[^>]+type=\\\"(text|email|password|search|tel|url)\\\"[^>]*>\"\n        pattern_negate: \"aria-label|aria-labelledby|title\"\n        message: \"Form inputs should include an aria-label or aria-labelledby attribute for better screen reader support.\"\n\n      - pattern: \"<video[^>]*>(?!<track)[^<]*</video>\"\n        message: \"Videos should include captions for accessibility.\"\n\n  - type: suggest\n    message: |\n      **Accessibility Best Practices:**\n      - **Heading Hierarchy:** Use headings (h1 to h6) in a logical order to structure content.\n      - **Keyboard Navigation:** Ensure all interactive elements are accessible via keyboard.\n      - **Semantic HTML:** Favor semantic elements like <nav>, <article>, <section>, and <aside> for better structure comprehension.\n      - **Color Contrast:** Check color contrast ratios meet WCAG guidelines (4.5:1 for normal text, 7:1 for large text).\n      - **Skip Navigation Links:** Provide 'skip to main content' links for keyboard users to bypass repetitive navigation.\n      - **Focus Management:** Ensure focus indicators are visible and manage focus for modal dialogs or dynamic content changes.\n      - **Form Labels:** Associate labels with form controls using the 'for' attribute or wrap controls with <label>.\n      - **Descriptive Links:** Use descriptive text for links, avoiding generic phrases like \"click here.\"\n      - **Touch Targets:** Ensure touch target sizes are large enough (at least 44x44 pixels) for mobile users.\n      - **Timeouts:** Avoid or provide options to extend time limits where possible, or warn users before session expiry.\n      - **Language Attribute:** Set the lang attribute on the <html> element to indicate the primary language of the page.\n\nmetadata:\n  priority: high\n  version: 1.1\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/accessibility-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/accessibility-standards.mdc",
      "sha": "7729123d41cb5008c4c91625001e4c675d1429ff"
    }
  },
  {
    "name": "ivangrynenko-api-standards",
    "slug": "api-standards",
    "displayName": "Api Standards",
    "description": "--- description: RESTful API design and documentation standards globs: *.php, *.js, *.ts",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: RESTful API design and documentation standards\nglobs: *.php, *.js, *.ts\n---\n# Enhanced API Standards\n\nEnsures consistent API design, documentation, and implementation best practices across PHP, JavaScript, and TypeScript files.\n\n<rule>\nname: enhanced_api_standards\ndescription: Enforce enhanced API design, implementation, and documentation standards\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|js|ts)$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"@api\\\\s+(?!GET|POST|PUT|DELETE|PATCH|OPTIONS|HEAD)\"\n        message: \"Use standard HTTP methods (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD) for API endpoints.\"\n\n      - pattern: \"function\\\\s+[a-zA-Z]+Api\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*\\\\}\"\n        pattern_negate: \"(?s)(throw new \\\\w+Exception|return\\\\s+(?:\\\\d{3}|4\\\\d\\\\d|5\\\\d\\\\d))\"\n        message: \"Ensure API functions handle or return errors appropriately using exceptions or HTTP status codes.\"\n\n      - pattern: \"(?<!@api\\\\s+)(?<!\\\\s+returns\\\\s+)(?<!\\\\s+throws\\\\s+)[A-Z]{3,}(?!\\\\s+)\"\n        message: \"HTTP methods should be prefixed with '@api' for documentation purposes.\"\n\n      - pattern: \"\\\\bresponse\\\\b(?![^;]*\\\\.json\\\\()\"\n        message: \"Ensure all API responses are properly formatted, preferably as JSON.\"\n\n  - type: suggest\n    message: |\n      **API Best Practices:**\n      - **HTTP Methods:** Use proper HTTP methods for operations (GET for retrieval, POST for creation, etc.).\n      - **Status Codes:** Use appropriate HTTP status codes to communicate the result of the request.\n      - **Versioning:** Implement API versioning to manage changes without breaking existing integrations.\n      - **Documentation:** \n        - **Swagger/OpenAPI:** Use tools like Swagger for comprehensive API documentation.\n        - **Endpoint Descriptions:** Clearly document all endpoints including path, methods, parameters, and possible responses.\n      - **Authentication & Security:**\n        - Implement OAuth, JWT, or similar secure authentication methods.\n        - Use HTTPS for all API communications.\n      - **Rate Limiting:** Implement rate limiting to prevent abuse and ensure fair usage.\n      - **Error Handling:** \n        - Provide clear, human-readable error messages with corresponding status codes.\n        - Implement error logging for debugging purposes.\n      - **Pagination:** For list endpoints, implement pagination to manage large datasets.\n      - **Validation:** Validate input data at the API level to ensure data integrity.\n      - **CORS:** Configure CORS headers if your API is meant to be consumed by web applications from different domains.\n      - **Monitoring:** Set up monitoring for API performance and usage statistics.\n\nmetadata:\n  priority: high\n  version: 1.1\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/api-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/api-standards.mdc",
      "sha": "346d6e1bc2b620e5a7c82df6426fa57c00770f66"
    }
  },
  {
    "name": "ivangrynenko-behat-ai-guide",
    "slug": "behat-ai-guide",
    "displayName": "Behat Ai Guide",
    "description": "Behat Ai Guide cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: This rule provides comprehensive guidance for AI assistants writing Behat tests for Drupal projects using the drevops/behat-steps package. It emphasizes reusing existing traits and steps rather than creating custom implementations. Contains the full STEPS.md reference embedded for easy access.\nglobs: *.feature,FeatureContext.php,*Context.php,behat.yml\nalwaysApply: true\n---\n\n# AI Behat Test Writing Guide for Drupal Projects\n\n## 🎯 Primary Directive\n\n**ALWAYS prioritize using drevops/behat-steps traits and step definitions over writing custom steps.** The drevops/behat-steps package provides comprehensive test coverage for most Drupal testing scenarios.\n\n## 📦 Essential Resources\n\nBefore writing ANY Behat test:\n1. Check available steps in the [drevops/behat-steps STEPS.md](https://github.com/drevops/behat-steps/blob/main/STEPS.md) file or refer to the embedded reference below\n2. Review trait source code in `vendor/drevops/behat-steps/src/` directory\n3. Only create custom steps when absolutely necessary (functionality not covered by existing traits)\n\n## 🔧 Setting Up FeatureContext\n\nWhen creating or modifying FeatureContext.php, include the necessary traits from drevops/behat-steps. The traits are located in `vendor/drevops/behat-steps/src/`:\n\n```php\n<?php\n\nnamespace DrupalProject\\Tests\\Behat;\n\nuse Drupal\\DrupalExtension\\Context\\DrupalContext;\n// Generic traits from vendor/drevops/behat-steps/src/\nuse DrevOps\\BehatSteps\\CookieTrait;\nuse DrevOps\\BehatSteps\\DateTrait;\nuse DrevOps\\BehatSteps\\ElementTrait;\nuse DrevOps\\BehatSteps\\FieldTrait;\nuse DrevOps\\BehatSteps\\FileDownloadTrait;\nuse DrevOps\\BehatSteps\\KeyboardTrait;\nuse DrevOps\\BehatSteps\\LinkTrait;\nuse DrevOps\\BehatSteps\\PathTrait;\nuse DrevOps\\BehatSteps\\ResponseTrait;\nuse DrevOps\\BehatSteps\\WaitTrait;\n\n// Drupal-specific traits from vendor/drevops/behat-steps/src/Drupal/\nuse DrevOps\\BehatSteps\\Drupal\\BigPipeTrait;\nuse DrevOps\\BehatSteps\\Drupal\\BlockTrait;\nuse DrevOps\\BehatSteps\\Drupal\\ContentBlockTrait;\nuse DrevOps\\BehatSteps\\Drupal\\ContentTrait;\nuse DrevOps\\BehatSteps\\Drupal\\DraggableviewsTrait;\nuse DrevOps\\BehatSteps\\Drupal\\EckTrait;\nuse DrevOps\\BehatSteps\\Drupal\\EmailTrait;\nuse DrevOps\\BehatSteps\\Drupal\\FieldTrait as DrupalFieldTrait;\nuse DrevOps\\BehatSteps\\Drupal\\FileTrait;\nuse DrevOps\\BehatSteps\\Drupal\\MediaTrait;\nuse DrevOps\\BehatSteps\\Drupal\\MenuTrait;\nuse DrevOps\\BehatSteps\\Drupal\\MetatagTrait;\nuse DrevOps\\BehatSteps\\Drupal\\OverrideTrait;\nuse DrevOps\\BehatSteps\\Drupal\\ParagraphsTrait;\nuse DrevOps\\BehatSteps\\Drupal\\SearchApiTrait;\nuse DrevOps\\BehatSteps\\Drupal\\TaxonomyTrait;\nuse DrevOps\\BehatSteps\\Drupal\\TestmodeTrait;\nuse DrevOps\\BehatSteps\\Drupal\\UserTrait;\nuse DrevOps\\BehatSteps\\Drupal\\WatchdogTrait;\n\nclass FeatureContext extends DrupalContext {\n    // Include only the traits you need for your tests\n    // Generic traits\n    use CookieTrait;\n    use DateTrait;\n    use ElementTrait;\n    use FieldTrait;\n    use FileDownloadTrait;\n    use KeyboardTrait;\n    use LinkTrait;\n    use PathTrait;\n    use ResponseTrait;\n    use WaitTrait;\n    \n    // Drupal-specific traits\n    use BlockTrait;\n    use ContentTrait;\n    use EmailTrait;\n    use FileTrait;\n    use MediaTrait;\n    use TaxonomyTrait;\n    use UserTrait;\n    \n    // Only add custom methods when drevops/behat-steps doesn't provide the functionality\n}\n```\n\n## 🚫 When NOT to Create Custom Steps\n\nBefore creating ANY custom step, verify that drevops/behat-steps doesn't already provide it. Check the full reference below.\n\n### Common Mistakes to Avoid:\n\n1. **Creating custom user login steps**\n   - ❌ Don't create: `Given I log in as an administrator`\n   - ✅ Use UserTrait: `Given I am logged in as a user with the \"administrator\" role`\n\n2. **Creating custom content creation steps**\n   - ❌ Don't create: `Given I create an article titled :title`\n   - ✅ Use ContentTrait: `Given \"article\" content:` with a table\n\n3. **Creating custom field interaction steps**\n   - ❌ Don't create: `When I fill in the body field with :text`\n   - ✅ Use FieldTrait: `When I fill in \"Body\" with :text`\n\n4. **Creating custom email verification steps**\n   - ❌ Don't create: `Then I should receive an email`\n   - ✅ Use EmailTrait: `Then an email is sent to :address`\n\n5. **Creating custom element interaction steps**\n   - ❌ Don't create: `When I click the submit button`\n   - ✅ Use ElementTrait: `When I click on the element \".submit-button\"`\n\n## ✅ When to Create Custom Steps\n\nOnly create custom steps when:\n\n1. **Business-specific logic** that wouldn't be reusable across projects\n2. **Complex multi-step operations** that are repeated frequently in your tests\n3. **Integration with third-party services** not covered by drevops/behat-steps\n4. **Custom Drupal modules** with unique functionality\n\nExample of a valid custom step:\n\n```php\n/**\n * @When I process the payment gateway response for order :order_id\n */\npublic function iProcessPaymentGatewayResponse($order_id) {\n    // Custom implementation for your specific payment gateway\n}\n```\n\n---\n\n# Complete DrevOps Behat Steps Reference\n\nThe following is the complete reference from [drevops/behat-steps STEPS.md](https://github.com/drevops/behat-steps/blob/main/STEPS.md):\n\n## Available steps\n\n### Index of Generic steps\n\n| Class | Description |\n| --- | --- |\n| [CookieTrait](#cookietrait) | Verify and inspect browser cookies. |\n| [DateTrait](#datetrait) | Convert relative date expressions into timestamps or formatted dates. |\n| [ElementTrait](#elementtrait) | Interact with HTML elements using CSS selectors and DOM attributes. |\n| [FieldTrait](#fieldtrait) | Manipulate form fields and verify widget functionality. |\n| [FileDownloadTrait](#filedownloadtrait) | Test file download functionality with content verification. |\n| [KeyboardTrait](#keyboardtrait) | Simulate keyboard interactions in Drupal browser testing. |\n| [LinkTrait](#linktrait) | Verify link elements with attribute and content assertions. |\n| [PathTrait](#pathtrait) | Navigate and verify paths with URL validation. |\n| [ResponseTrait](#responsetrait) | Verify HTTP responses with status code and header checks. |\n| [WaitTrait](#waittrait) | Wait for a period of time or for AJAX to finish. |\n\n### Index of Drupal steps\n\n| Class | Description |\n| --- | --- |\n| [Drupal\\BigPipeTrait](#drupalbigpipetrait) | Bypass Drupal BigPipe when rendering pages. |\n| [Drupal\\BlockTrait](#drupalblocktrait) | Manage Drupal blocks. |\n| [Drupal\\ContentBlockTrait](#drupalcontentblocktrait) | Manage Drupal content blocks. |\n| [Drupal\\ContentTrait](#drupalcontenttrait) | Manage Drupal content with workflow and moderation support. |\n| [Drupal\\DraggableviewsTrait](#drupaldraggableviewstrait) | Order items in the Drupal Draggable Views. |\n| [Drupal\\EckTrait](#drupalecktrait) | Manage Drupal ECK entities with custom type and bundle creation. |\n| [Drupal\\EmailTrait](#drupalemailtrait) | Test Drupal email functionality with content verification. |\n| [Drupal\\MediaTrait](#drupalmediatrait) | Manage Drupal media entities with type-specific field handling. |\n| [Drupal\\MenuTrait](#drupalmenutrait) | Manage Drupal menu systems and menu link rendering. |\n| [Drupal\\MetatagTrait](#drupalmetatagtrait) | Assert `<meta>` tags in page markup. |\n| [Drupal\\OverrideTrait](#drupaloverridetrait) | Override Drupal Extension behaviors. |\n| [Drupal\\ParagraphsTrait](#drupalparagraphstrait) | Manage Drupal paragraphs entities with structured field data. |\n| [Drupal\\SearchApiTrait](#drupalsearchapitrait) | Assert Drupal Search API with index and query operations. |\n| [Drupal\\TaxonomyTrait](#drupaltaxonomytrait) | Manage Drupal taxonomy terms with vocabulary organization. |\n| [Drupal\\TestmodeTrait](#drupaltestmodetrait) | Configure Drupal Testmode module for controlled testing scenarios. |\n| [Drupal\\UserTrait](#drupalusertrait) | Manage Drupal users with role and permission assignments. |\n| [Drupal\\WatchdogTrait](#drupalwatchdogtrait) | Assert Drupal does not trigger PHP errors during scenarios using Watchdog. |\n\n---\n\n## CookieTrait\n\n[Source](vendor/drevops/behat-steps/src/CookieTrait.php)\n\n>  Verify and inspect browser cookies.\n>  - Assert cookie existence and values with exact or partial matching.\n>  - Support both WebDriver and BrowserKit drivers for test compatibility.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Then a cookie with the name :name should exist` | Assert that a cookie exists |\n| `@Then a cookie with the name :name and the value :value should exist` | Assert that a cookie exists with a specific value |\n| `@Then a cookie with the name :name and a value containing :partial_value should exist` | Assert that a cookie exists with a value containing a partial value |\n| `@Then a cookie with a name containing :partial_name should exist` | Assert that a cookie with a partial name exists |\n| `@Then a cookie with a name containing :partial_name and the value :value should exist` | Assert that a cookie with a partial name and value exists |\n| `@Then a cookie with a name containing :partial_name and a value containing :partial_value should exist` | Assert that a cookie with a partial name and partial value exists |\n| `@Then a cookie with the name :name should not exist` | Assert that a cookie does not exist |\n| `@Then a cookie with the name :name and the value :value should not exist` | Assert that a cookie with a specific value does not exist |\n| `@Then a cookie with the name :name and a value containing :partial_value should not exist` | Assert that a cookie with a value containing a partial value does not exist |\n| `@Then a cookie with a name containing :partial_name should not exist` | Assert that a cookie with a partial name does not exist |\n| `@Then a cookie with a name containing :partial_name and the value :value should not exist` | Assert that a cookie with a partial name and value does not exist |\n| `@Then a cookie with a name containing :partial_name and a value containing :partial_value should not exist` | Assert that a cookie with a partial name and partial value does not exist |\n\n---\n\n## DateTrait\n\n[Source](vendor/drevops/behat-steps/src/DateTrait.php)\n\n>  Convert relative date expressions into timestamps or formatted dates.\n>  \n>  Supports values and tables.\n>  \n>  Possible formats:\n>  - `[relative:OFFSET]`\n>  - `[relative:OFFSET#FORMAT]`\n>\n>  with:\n>  - `OFFSET`: any format that can be parsed by `strtotime()`.\n>  - `FORMAT`: `date()` format for additional processing.\n>\n>  Examples:\n>  - `[relative:-1 day]` converted to `1893456000`\n>  - `[relative:-1 day#Y-m-d]` converted to `2017-11-5`\n\n---\n\n## ElementTrait\n\n[Source](vendor/drevops/behat-steps/src/ElementTrait.php)\n\n>  Interact with HTML elements using CSS selectors and DOM attributes.\n>  - Assert element visibility, attribute values, and viewport positioning.\n>  - Execute JavaScript-based interactions with element state verification.\n>  - Handle confirmation dialogs and scrolling operations.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given I accept all confirmation dialogs` | Accept confirmation dialogs appearing on the page |\n| `@Given I do not accept any confirmation dialogs` | Do not accept confirmation dialogs appearing on the page |\n| `@When I click on the element :selector` | Click on the element defined by the selector |\n| `@When I trigger the JS event :event on the element :selector` | Trigger a JavaScript event on an element |\n| `@When I scroll to the element :selector` | Scroll to an element with ID |\n| `@Then the element :selector with the attribute :attribute and the value :value should exist` | Assert an element with selector and attribute with a value exists |\n| `@Then the element :selector with the attribute :attribute and the value containing :value should exist` | Assert an element with selector and attribute containing a value exists |\n| `@Then the element :selector with the attribute :attribute and the value :value should not exist` | Assert an element with selector and attribute with a value does not exist |\n| `@Then the element :selector with the attribute :attribute and the value containing :value should not exist` | Assert an element with selector and attribute containing a value does not exist |\n| `@Then the element :selector should be at the top of the viewport` | Assert the element should be at the top of the viewport |\n| `@Then the element :selector should be displayed` | Assert that element with specified CSS is visible on page |\n| `@Then the element :selector should not be displayed` | Assert that element with specified CSS is not visible on page |\n| `@Then the element :selector should be displayed within a viewport` | Assert that element with specified CSS is displayed within a viewport |\n| `@Then the element :selector should be displayed within a viewport with a top offset of :number pixels` | Assert that element with specified CSS is displayed within a viewport with a top offset |\n| `@Then the element :selector should not be displayed within a viewport with a top offset of :number pixels` | Assert that element with specified CSS is not displayed within a viewport with a top offset |\n| `@Then the element :selector should not be displayed within a viewport` | Assert that element with specified CSS is visually hidden on page |\n\n---\n\n## FieldTrait\n\n[Source](vendor/drevops/behat-steps/src/FieldTrait.php)\n\n>  Manipulate form fields and verify widget functionality.\n>  - Set field values for various input types including selects and WYSIWYG.\n>  - Assert field existence, state, and selected options.\n>  - Support for specialized widgets like color pickers and rich text editors.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@When I fill in the color field :field with the value :value` | Fill value for color field |\n| `@When I fill in the WYSIWYG field :field with the :value` | Set value for WYSIWYG field |\n| `@Then the field :name should exist` | Assert that field exists on the page using id, name, label or value |\n| `@Then the field :name should not exist` | Assert that field does not exist on the page using id, name, label or value |\n| `@Then the field :name should be :enabled_or_disabled` | Assert whether the field has a state |\n| `@Then the color field :field should have the value :value` | Assert that a color field has a value |\n| `@Then the option :option should exist within the select element :selector` | Assert that a select has an option |\n| `@Then the option :option should not exist within the select element :selector` | Assert that a select does not have an option |\n| `@Then the option :option should be selected within the select element :selector` | Assert that a select option is selected |\n| `@Then the option :option should not be selected within the select element :selector` | Assert that a select option is not selected |\n\n---\n\n## FileDownloadTrait\n\n[Source](vendor/drevops/behat-steps/src/FileDownloadTrait.php)\n\n>  Test file download functionality with content verification.\n>  - Download files through links and URLs with session cookie handling.\n>  - Verify file names, content, and extracted archives.\n>  - Set up download directories and handle file cleanup.\n>\n>  Skip processing with tags: `@behat-steps-skip:fileDownloadBeforeScenario` or\n>  `@behat-steps-skip:fileDownloadAfterScenario`\n>  \n>  Special tags:\n>  - `@download` - enable download handling\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@When I download the file from the URL :url` | Download a file from the specified URL |\n| `@When I download the file from the link :link` | Download the file from the specified HTML link |\n| `@Then the downloaded file should contain:` | Assert the contents of the download file |\n| `@Then the downloaded file name should be :name` | Assert the file name of the downloaded file |\n| `@Then the downloaded file name should contain :name` | Assert the downloaded file name contains a specific string |\n| `@Then the downloaded file should be a zip archive containing the files named:` | Assert the downloaded file should be a zip archive containing specific files |\n| `@Then the downloaded file should be a zip archive containing the files partially named:` | Assert the downloaded file should be a zip archive containing files with partial names |\n| `@Then the downloaded file should be a zip archive not containing the files partially named:` | Assert the downloaded file is a zip archive not containing files with partial names |\n\n---\n\n## KeyboardTrait\n\n[Source](vendor/drevops/behat-steps/src/KeyboardTrait.php)\n\n>  Simulate keyboard interactions in Drupal browser testing.\n>  - Trigger key press events including special keys and key combinations.\n>  - Assert keyboard navigation and shortcut functionality.\n>  - Support for targeted key presses on specific page elements.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@When I press the key :key` | Press a single keyboard key |\n| `@When I press the key :key on the element :selector` | Press a single keyboard key on the element |\n| `@When I press the keys :keys` | Press multiple keyboard keys |\n| `@When I press the keys :keys on the element :selector` | Press multiple keyboard keys on the element |\n\n---\n\n## LinkTrait\n\n[Source](vendor/drevops/behat-steps/src/LinkTrait.php)\n\n>  Verify link elements with attribute and content assertions.\n>  - Find links by title, URL, text content, and class attributes.\n>  - Test link existence, visibility, and destination accuracy.\n>  - Assert absolute and relative link paths.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@When I click on the link with the title :title` | Click on the link with a title |\n| `@Then the link :link with the href :href should exist` | Assert a link with a href exists |\n| `@Then the link :link with the href :href within the element :selector should exist` | Assert link with a href exists within an element |\n| `@Then the link :link with the href :href should not exist` | Assert link with a href does not exist |\n| `@Then the link :link with the href :href within the element :selector should not exist` | Assert link with a href does not exist within an element |\n| `@Then the link with the title :title should exist` | Assert that a link with a title exists |\n| `@Then the link with the title :title should not exist` | Assert that a link with a title does not exist |\n| `@Then the link :link should be an absolute link` | Assert that the link with a text is absolute |\n| `@Then the link :link should not be an absolute link` | Assert that the link is not an absolute |\n\n---\n\n## PathTrait\n\n[Source](vendor/drevops/behat-steps/src/PathTrait.php)\n\n>  Navigate and verify paths with URL validation.\n>  - Assert current page location with front page special handling.\n>  - Configure basic authentication for protected path access.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given the basic authentication with the username :username and the password :password` | Set basic authentication for the current session |\n| `@Then the path should be :path` | Assert that the current page is a specified path |\n| `@Then the path should not be :path` | Assert that the current page is not a specified path |\n\n---\n\n## ResponseTrait\n\n[Source](vendor/drevops/behat-steps/src/ResponseTrait.php)\n\n>  Verify HTTP responses with status code and header checks.\n>  - Assert HTTP header presence and values.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Then the response should contain the header :header_name` | Assert that a response contains a header with specified name |\n| `@Then the response should not contain the header :header_name` | Assert that a response does not contain a header with a specified name |\n| `@Then the response header :header_name should contain the value :header_value` | Assert that a response contains a header with a specified name and value |\n| `@Then the response header :header_name should not contain the value :header_value` | Assert a response does not contain a header with a specified name and value |\n\n---\n\n## WaitTrait\n\n[Source](vendor/drevops/behat-steps/src/WaitTrait.php)\n\n>  Wait for a period of time or for AJAX to finish.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@When I wait for :seconds second(s)` | Wait for a specified number of seconds |\n| `@When I wait for :seconds second(s) for AJAX to finish` | Wait for the AJAX calls to finish |\n\n---\n\n## Drupal\\BigPipeTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/BigPipeTrait.php)\n\n>  Bypass Drupal BigPipe when rendering pages.\n>  \n>  Activated by adding `@big_pipe` tag to the scenario.\n>  \n>  Skip processing with tags: `@behat-steps-skip:bigPipeBeforeScenario` or\n>  `@behat-steps-skip:bigPipeBeforeStep`.\n\n---\n\n## Drupal\\BlockTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/BlockTrait.php)\n\n>  Manage Drupal blocks.\n>  - Create and configure blocks with custom visibility conditions.\n>  - Place blocks in regions and verify their rendering in the page.\n>  - Automatically clean up created blocks after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:blockAfterScenario`\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given the instance of :admin_label block exists with the following configuration:` | Create a block instance |\n| `@Given the block :label has the following configuration:` | Configure an existing block identified by label |\n| `@Given the block :label does not exist` | Remove a block specified by label |\n| `@Given the block :label is enabled` | Enable a block specified by label |\n| `@Given the block :label is disabled` | Disable a block specified by label |\n| `@Given the block :label has the following :condition condition configuration:` | Set a visibility condition for a block |\n| `@Given the block :label has the :condition condition removed` | Remove a visibility condition from the specified block |\n| `@Then the block :label should exist` | Assert that a block with the specified label exists |\n| `@Then the block :label should not exist` | Assert that a block with the specified label does not exist |\n| `@Then the block :label should exist in the :region region` | Assert that a block with the specified label exists in a region |\n| `@Then the block :label should not exist in the :region region` | Assert that a block with the specified label does not exist in a region |\n\n---\n\n## Drupal\\ContentBlockTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/ContentBlockTrait.php)\n\n>  Manage Drupal content blocks.\n>  - Define reusable custom block content with structured field data.\n>  - Create, edit, and verify block_content entities by type and description.\n>  - Automatically clean up created entities after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:contentBlockAfterScenario`\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given the following :type content blocks do not exist:` | Remove content blocks of a specified type with the given descriptions |\n| `@Given the following :type content blocks exist:` | Create content blocks of the specified type with the given field values |\n| `@When I edit the :type content block with the description :description` | Navigate to the edit page for a specified content block |\n| `@Then the content block type :type should exist` | Assert that a content block type exists |\n\n---\n\n## Drupal\\ContentTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/ContentTrait.php)\n\n>  Manage Drupal content with workflow and moderation support.\n>  - Create, find, and manipulate nodes with structured field data.\n>  - Navigate to node pages by title and manage editorial workflows.\n>  - Support content moderation transitions and scheduled publishing.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given the content type :content_type does not exist` | Delete content type |\n| `@Given the following :content_type content does not exist:` | Remove content defined by provided properties |\n| `@When I visit the :content_type content page with the title :title` | Visit a page of a type with a specified title |\n| `@When I visit the :content_type content edit page with the title :title` | Visit an edit page of a type with a specified title |\n| `@When I visit the :content_type content delete page with the title :title` | Visit a delete page of a type with a specified title |\n| `@When I visit the :content_type content scheduled transitions page with the title :title` | Visit a scheduled transitions page of a type with a specified title |\n| `@When I change the moderation state of the :content_type content with the title :title to the :new_state state` | Change moderation state of a content with the specified title |\n\n---\n\n## Drupal\\DraggableviewsTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/DraggableviewsTrait.php)\n\n>  Order items in the Drupal Draggable Views.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@When I save the draggable views items of the view :view_id and the display :views_display_id for the :bundle content in the following order:` | Save order of the Draggable Order items |\n\n---\n\n## Drupal\\EckTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/EckTrait.php)\n\n>  Manage Drupal ECK entities with custom type and bundle creation.\n>  - Create structured ECK entities with defined field values.\n>  - Assert entity type registration and visit entity pages.\n>  - Automatically clean up created entities after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:eckAfterScenario`\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given the following eck :bundle :entity_type entities exist:` | Create eck entities |\n| `@Given the following eck :bundle :entity_type entities do not exist:` | Remove custom entities by field |\n| `@When I visit eck :bundle :entity_type entity with the title :title` | Navigate to view entity page with specified type and title |\n| `@When I edit eck :bundle :entity_type entity with the title :title` | Navigate to edit eck entity page with specified type and title |\n\n---\n\n## Drupal\\EmailTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/EmailTrait.php)\n\n>  Test Drupal email functionality with content verification.\n>  - Capture and examine outgoing emails with header and body validation.\n>  - Follow links and test attachments within email content.\n>  - Configure mail handler systems for proper test isolation.\n>\n>  Skip processing with tags: `@behat-steps-skip:emailBeforeScenario` or\n>  `@behat-steps-skip:emailAfterScenario`\n>  \n>  Special tags:\n>  - `@email` - enable email tracking using a default handler\n>  - `@email:{type}` - enable email tracking using a `{type}` handler\n>  - `@debug` (enable detailed logs)\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@When I clear the test email system queue` | Clear test email system queue |\n| `@When I follow link number :link_number in the email with the subject :subject` | Follow a specific link number in an email with the given subject |\n| `@When I follow link number :link_number in the email with the subject containing :subject` | Follow a specific link number in an email whose subject contains the given substring |\n| `@When I enable the test email system` | Enable the test email system |\n| `@When I disable the test email system` | Disable test email system |\n| `@Then an email is sent to :address` | Assert that an email should be sent to an address |\n| `@Then no emails were sent` | Assert that no email messages should be sent |\n| `@Then no emails were sent to :address` | Assert that no email messages should be sent to a specified address |\n| `@Then an email :field contains:` | Assert that the email message field should contain specified content |\n| `@Then an email :field is:` | Assert that the email message field should exactly match specified content |\n| `@Then an email :field does not contain:` | Assert that the email message field should not contain specified content |\n| `@Then an email to :address is sent` | Assert that an email is sent to a specific address |\n| `@Then an email to :address is sent with the subject :subject` | Assert that an email with subject is sent to a specific address |\n| `@Then an email to :address is sent with the subject containing :subject` | Assert that an email with subject containing text is sent to a specific address |\n| `@Then an email to :address is not sent` | Assert that an email is not sent to a specific address |\n| `@Then the file :file is attached to the email with the subject :subject` | Assert that a file is attached to an email message with specified subject |\n| `@Then the file :file is attached to the email with the subject containing :subject` | Assert that a file is attached to an email message with a subject containing the specified substring |\n\n### IMPORTANT Email Testing Notes:\n\n**Always use @email tag for email testing scenarios** - the `@email` tag is required for each scenario that tests email functionality, not just at the feature level. Without this tag, email-related steps will fail with \"email testing system is not activated\" errors.\n\n```gherkin\n@api @email\nScenario: Test email notifications\n  Given I am logged in as a user with the \"administrator\" role\n  When I perform an action that triggers email\n  Then an email is sent to \"user@example.com\"\n  Then an email \"subject\" contains:\n    \"\"\"\n    Welcome to our site\n    \"\"\"\n```\n\n---\n\n## Drupal\\FileTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/FileTrait.php)\n\n> Manage Drupal file entities and operations.\n> - Handle file uploads, downloads, and management operations.\n> - Work with managed and unmanaged files in Drupal.\n> - Automatically clean up created file entities after scenario completion.\n\nUse `FileTrait` and `MediaTrait` from drevops/behat-steps along with built-in Drupal steps for file entities:\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given the following managed files:` | Create managed files with properties provided in the table (from DrupalContext) |\n| `@Given the following managed files do not exist:` | Delete managed files defined by provided properties/fields (from DrupalContext) |\n| `@Given the unmanaged file at the URI :uri exists` | Create an unmanaged file (from DrupalContext) |\n| `@Given the unmanaged file at the URI :uri exists with :content` | Create an unmanaged file with specified content (from DrupalContext) |\n| `@Then an unmanaged file at the URI :uri should exist` | Assert that an unmanaged file with specified URI exists (from DrupalContext) |\n| `@Then an unmanaged file at the URI :uri should not exist` | Assert that an unmanaged file with specified URI does not exist (from DrupalContext) |\n| `@Then an unmanaged file at the URI :uri should contain :content` | Assert that an unmanaged file exists and has specified content (from DrupalContext) |\n| `@Then an unmanaged file at the URI :uri should not contain :content` | Assert that an unmanaged file exists and does not have specified content (from DrupalContext) |\n\n---\n\n## Drupal\\MediaTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/MediaTrait.php)\n\n>  Manage Drupal media entities with type-specific field handling.\n>  - Create structured media items with proper file reference handling.\n>  - Assert media browser functionality and edit media entity fields.\n>  - Support for multiple media types with field value expansion handling.\n>  - Automatically clean up created entities after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:mediaAfterScenario`\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given :media_type media type does not exist` | Remove media type |\n| `@Given the following media :media_type exist:` | Create media of a given type |\n| `@Given the following media :media_type do not exist:` | Remove media defined by provided properties |\n| `@When I edit the media :media_type with the name :name` | Navigate to edit media with specified type and name |\n\n---\n\n## Drupal\\MenuTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/MenuTrait.php)\n\n>  Manage Drupal menu systems and menu link rendering.\n>  - Assert menu items by label, path, and containment hierarchy.\n>  - Assert menu link visibility and active states in different regions.\n>  - Create and manage menu hierarchies with parent-child relationships.\n>  - Automatically clean up created menu links after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:menuAfterScenario`\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given the menu :menu_name does not exist` | Remove a single menu by its label if it exists |\n| `@Given the following menus:` | Create a menu if one does not exist |\n| `@Given the following menu links do not exist in the menu :menu_name:` | Remove menu links by title |\n| `@Given the following menu links exist in the menu :menu_name:` | Create menu links |\n\n---\n\n## Drupal\\MetatagTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/MetatagTrait.php)\n\n>  Assert `<meta>` tags in page markup.\n>  - Assert presence and content of meta tags with proper attribute handling.\n\n---\n\n## Drupal\\OverrideTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/OverrideTrait.php)\n\n>  Override Drupal Extension behaviors.\n>  - Automated entity deletion before creation to avoid duplicates.\n>  - Improved user authentication handling for anonymous users.\n>\n>  Use with caution: depending on your version of Drupal Extension, PHP and\n>  Composer, the step definition string (/^Given etc.../) may need to be defined\n>  for these overrides. If you encounter errors about missing or duplicated\n>  step definitions, do not include this trait and rather copy the contents of\n>  this file into your feature context file and copy the step definition strings\n>  from the Drupal Extension.\n\n---\n\n## Drupal\\ParagraphsTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/ParagraphsTrait.php)\n\n>  Manage Drupal paragraphs entities with structured field data.\n>  - Create paragraph items with type-specific field values.\n>  - Test nested paragraph structures and reference field handling.\n>  - Attach paragraphs to various entity types with parent-child relationships.\n>  - Automatically clean up created paragraph items after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:paragraphsAfterScenario`\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given the following fields for the paragraph :paragraph_type exist in the field :parent_field within the :parent_bundle :parent_entity_type identified by the field :parent_lookup_field and the value :parent_lookup_value:` | Create a paragraph of the given type with fields within an existing entity |\n\n---\n\n## Drupal\\SearchApiTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/SearchApiTrait.php)\n\n>  Assert Drupal Search API with index and query operations.\n>  - Add content to an index\n>  - Run indexing for a specific number of items.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@When I add the :content_type content with the title :title to the search index` | Index a node of a specific content type with a specific title |\n| `@When I run search indexing for :count item(s)` | Run indexing for a specific number of items |\n\n---\n\n## Drupal\\TaxonomyTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/TaxonomyTrait.php)\n\n>  Manage Drupal taxonomy terms with vocabulary organization.\n>  - Create term vocabulary structures using field values.\n>  - Navigate to term pages\n>  - Verify vocabulary configurations.\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given the following :vocabulary_machine_name vocabulary terms do not exist:` | Remove terms from a specified vocabulary |\n| `@When I visit the :vocabulary_machine_name vocabulary :term_name term page` | Visit specified vocabulary term page |\n| `@When I edit the :vocabulary_machine_name vocabulary :term_name term page` | Edit specified vocabulary term page |\n| `@Then the vocabulary :machine_name with the name :name should exist` | Assert that a vocabulary with a specific name exists |\n| `@Then the vocabulary :machine_name should not exist` | Assert that a vocabulary with a specific name does not exist |\n| `@Then the taxonomy term :term_name from the vocabulary :vocabulary_machine_name should exist` | Assert that a taxonomy term exist by name |\n| `@Then the taxonomy term :term_name from the vocabulary :vocabulary_machine_name should not exist` | Assert that a taxonomy term does not exist by name |\n\n---\n\n## Drupal\\TestmodeTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/TestmodeTrait.php)\n\n>  Configure Drupal Testmode module for controlled testing scenarios.\n>  \n>  Skip processing with tags: `@behat-steps-skip:testmodeBeforeScenario` and\n>  `@behat-steps-skip:testmodeAfterScenario`.\n>  \n>  Special tags:\n>  - `@testmode` - enable for scenario\n\n---\n\n## Drupal\\UserTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/UserTrait.php)\n\n>  Manage Drupal users with role and permission assignments.\n>  - Create user accounts\n>  - Create user roles\n>  - Visit user profile pages for editing and deletion.\n>  - Assert user roles and permissions.\n>  - Assert user account status (active/inactive).\n\n### Available steps:\n\n| Step | Description |\n| --- | --- |\n| `@Given the following users do not exist:` | Remove users specified in a table |\n| `@Given the password for the user :name is :password` | Set a password for a user |\n| `@Given the last access time for the user :name is :datetime` | Set last access time for a user |\n| `@Given the last login time for the user :name is :datetime` | Set last login time for a user |\n| `@Given the role :role_name with the permissions :permissions` | Create a single role with specified permissions |\n| `@Given the following roles:` | Create multiple roles from the specified table |\n| `@When I visit :name user profile page` | Visit the profile page of the specified user |\n| `@When I visit my own user profile page` | Visit the profile page of the current user |\n| `@When I visit :name user profile edit page` | Visit the profile edit page of the specified user |\n| `@When I visit my own user profile edit page` | Visit the profile edit page of the current user |\n| `@When I visit :name user profile delete page` | Visit the profile delete page of the specified user |\n| `@When I visit my own user profile delete page` | Visit the profile delete page of the current user |\n| `@Then the user :name should have the role(s) :roles assigned` | Assert that a user has roles assigned |\n| `@Then the user :name should not have the role(s) :roles assigned` | Assert that a user does not have roles assigned |\n| `@Then the user :name should be blocked` | Assert that a user is blocked |\n| `@Then the user :name should not be blocked` | Assert that a user is not blocked |\n\n---\n\n## Drupal\\WatchdogTrait\n\n[Source](vendor/drevops/behat-steps/src/Drupal/WatchdogTrait.php)\n\n>  Assert Drupal does not trigger PHP errors during scenarios using Watchdog.\n>  - Check for Watchdog messages after scenario completion.\n>  - Optionally check only for specific message types.\n>  - Optionally skip error checking for specific scenarios.\n>\n>  Skip processing with tags: `@behat-steps-skip:watchdogSetScenario` or\n>  `@behat-steps-skip:watchdogAfterScenario`\n>  \n>  Special tags:\n>  - `@watchdog:{type}` - limit watchdog messages to specific types.\n>  - `@error` - add to scenarios that are expected to trigger an error.\n\n---\n\n## 📝 Best Practices\n\n### 1. Trait Organization\nAlways check what traits are available in `vendor/drevops/behat-steps/src/` before creating custom steps:\n\n```php\nclass FeatureContext extends DrupalContext {\n    // Only include the traits you actually use\n    use ContentTrait;  // For content management\n    use UserTrait;     // For user operations\n    use EmailTrait;    // For email testing\n    \n    // Custom methods only when absolutely necessary\n}\n```\n\n### 2. Tag Usage for Special Features\n```gherkin\n# Enable email testing - REQUIRED for email steps\n@email\nScenario: Test email functionality\n\n# Enable JavaScript testing\n@javascript\nScenario: Test AJAX functionality\n\n# Skip certain trait behaviors\n@behat-steps-skip:emailBeforeScenario\nScenario: Test without email initialization\n```\n\n### 3. Error Handling\nWhen tests fail, check:\n1. Is the correct trait included in FeatureContext?\n2. Are you using the exact step definition from drevops/behat-steps?\n3. Do you have the required tags (@api, @email, @javascript)?\n4. Is the selector or field name correct?\n\n### 4. Performance Optimization\n- Use traits selectively - only include what you need\n- Avoid creating wrapper steps around existing drevops/behat-steps\n- Use batch operations where available (e.g., creating multiple users at once)\n\n## 🔍 Quick Reference Checklist\n\nBefore writing any Behat test:\n\n- [ ] Check the embedded reference above or [STEPS.md](https://github.com/drevops/behat-steps/blob/main/STEPS.md) for available steps\n- [ ] Review trait source code in `vendor/drevops/behat-steps/src/`\n- [ ] Include only necessary traits in FeatureContext\n- [ ] Use proper tags (@api, @email, @javascript) as required\n- [ ] Follow exact step syntax from drevops/behat-steps\n- [ ] Only create custom steps for truly unique functionality\n- [ ] Test that existing steps work before creating alternatives\n- [ ] Document any custom steps thoroughly\n\n## 📚 Additional Resources\n\n- [DrevOps Behat Steps Documentation](https://github.com/drevops/behat-steps)\n- [DrevOps Behat Steps STEPS.md](https://github.com/drevops/behat-steps/blob/main/STEPS.md)\n- [Drupal Extension for Behat](https://www.drupal.org/project/drupalextension)\n\nRemember: **The drevops/behat-steps package is battle-tested and covers most Drupal testing scenarios. Always use it instead of reinventing the wheel!**\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/behat-ai-guide.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/behat-ai-guide.mdc",
      "sha": "bd76ddc17a5d7baf53cae12c4a0f65e4153a4439"
    }
  },
  {
    "name": "ivangrynenko-behat-steps",
    "slug": "behat-steps",
    "displayName": "Behat Steps",
    "description": "--- description: globs: *.feature,FeatureContext.php,*Context.php",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription:\nglobs: *.feature,FeatureContext.php,*Context.php\nalwaysApply: false\n---\n# Behat Steps - Claude Memory\n\n## Available steps\n\n### Index of Generic steps\n\n| Class | Description |\n| --- | --- |\n| [CookieTrait](mdc:#cookietrait) | Verify and inspect browser cookies. |\n| [DateTrait](mdc:#datetrait) | Convert relative date expressions into timestamps or formatted dates. |\n| [ElementTrait](mdc:#elementtrait) | Interact with HTML elements using CSS selectors and DOM attributes. |\n| [FileDownloadTrait](mdc:#filedownloadtrait) | Test file download functionality with content verification. |\n| [KeyboardTrait](mdc:#keyboardtrait) | Simulate keyboard interactions in Drupal browser testing. |\n| [LinkTrait](mdc:#linktrait) | Verify link elements with attribute and content assertions. |\n| [PathTrait](mdc:#pathtrait) | Navigate and verify paths with URL validation. |\n| [ResponseTrait](mdc:#responsetrait) | Verify HTTP responses with status code and header checks. |\n| [WaitTrait](mdc:#waittrait) | Wait for a period of time or for AJAX to finish. |\n\n### Index of Drupal steps\n\n| Class | Description |\n| --- | --- |\n| [Drupal\\BigPipeTrait](mdc:#drupalbigpipetrait) | Bypass Drupal BigPipe when rendering pages. |\n| [Drupal\\BlockTrait](mdc:#drupalblocktrait) | Manage Drupal blocks. |\n| [Drupal\\ContentBlockTrait](mdc:#drupalcontentblocktrait) | Manage Drupal content blocks. |\n| [Drupal\\ContentTrait](mdc:#drupalcontenttrait) | Manage Drupal content with workflow and moderation support. |\n| [Drupal\\DraggableviewsTrait](mdc:#drupaldraggableviewstrait) | Order items in the Drupal Draggable Views. |\n| [Drupal\\EckTrait](mdc:#drupalecktrait) | Manage Drupal ECK entities with custom type and bundle creation. |\n| [Drupal\\EmailTrait](mdc:#drupalemailtrait) | Test Drupal email functionality with content verification. |\n| [Drupal\\FieldTrait](mdc:#drupalfieldtrait) | Manipulate Drupal form fields and verify widget functionality. |\n| [Drupal\\FileTrait](mdc:#drupalfiletrait) | Manage Drupal file entities with upload and storage operations. |\n| [Drupal\\MediaTrait](mdc:#drupalmediatrait) | Manage Drupal media entities with type-specific field handling. |\n| [Drupal\\MenuTrait](mdc:#drupalmenutrait) | Manage Drupal menu systems and menu link rendering. |\n| [Drupal\\MetatagTrait](mdc:#drupalmetatagtrait) | Assert `<meta>` tags in page markup. |\n| [Drupal\\OverrideTrait](mdc:#drupaloverridetrait) | Override Drupal Extension behaviors. |\n| [Drupal\\ParagraphsTrait](mdc:#drupalparagraphstrait) | Manage Drupal paragraphs entities with structured field data. |\n| [Drupal\\SearchApiTrait](mdc:#drupalsearchapitrait) | Assert Drupal Search API with index and query operations. |\n| [Drupal\\TaxonomyTrait](mdc:#drupaltaxonomytrait) | Manage Drupal taxonomy terms with vocabulary organization. |\n| [Drupal\\TestmodeTrait](mdc:#drupaltestmodetrait) | Configure Drupal Testmode module for controlled testing scenarios. |\n| [Drupal\\UserTrait](mdc:#drupalusertrait) | Manage Drupal users with role and permission assignments. |\n| [Drupal\\WatchdogTrait](mdc:#drupalwatchdogtrait) | Assert Drupal does not trigger PHP errors during scenarios using Watchdog. |\n\n\n---\n\n## CookieTrait\n\n[Source](mdc:src/CookieTrait.php), [Example](mdc:tests/behat/features/cookie.feature)\n\n>  Verify and inspect browser cookies.\n>  - Assert cookie existence and values with exact or partial matching.\n>  - Support both WebDriver and BrowserKit drivers for test compatibility.\n\n\n<details>\n  <summary><code>@Then a cookie with the name :name should exist</code></summary>\n\n<br/>\nAssert that a cookie exists\n<br/><br/>\n\n```gherkin\nThen a cookie with the name \"session_id\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with the name :name and the value :value should exist</code></summary>\n\n<br/>\nAssert that a cookie exists with a specific value\n<br/><br/>\n\n```gherkin\nThen a cookie with the name \"language\" and the value \"en\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with the name :name and a value containing :partial_value should exist</code></summary>\n\n<br/>\nAssert that a cookie exists with a value containing a partial value\n<br/><br/>\n\n```gherkin\nThen a cookie with the name \"preferences\" and a value containing \"darkmode\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with a name containing :partial_name should exist</code></summary>\n\n<br/>\nAssert that a cookie with a partial name exists\n<br/><br/>\n\n```gherkin\nThen a cookie with a name containing \"session\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with a name containing :partial_name and the value :value should exist</code></summary>\n\n<br/>\nAssert that a cookie with a partial name and value exists\n<br/><br/>\n\n```gherkin\nThen a cookie with a name containing \"user\" and the value \"admin\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with a name containing :partial_name and a value containing :partial_value should exist</code></summary>\n\n<br/>\nAssert that a cookie with a partial name and partial value exists\n<br/><br/>\n\n```gherkin\nThen a cookie with a name containing \"user\" and a value containing \"admin\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with the name :name should not exist</code></summary>\n\n<br/>\nAssert that a cookie does not exist\n<br/><br/>\n\n```gherkin\nThen a cookie with name \"old_session\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with the name :name and the value :value should not exist</code></summary>\n\n<br/>\nAssert that a cookie with a specific value does not exist\n<br/><br/>\n\n```gherkin\nThen a cookie with the name \"language\" and the value \"fr\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with the name :name and a value containing :partial_value should not exist</code></summary>\n\n<br/>\nAssert that a cookie with a value containing a partial value does not exist\n<br/><br/>\n\n```gherkin\nThen a cookie with the name \"preferences\" and a value containing \"lightmode\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with a name containing :partial_name should not exist</code></summary>\n\n<br/>\nAssert that a cookie with a partial name does not exist\n<br/><br/>\n\n```gherkin\nThen a cookie with a name containing \"old\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with a name containing :partial_name and the value :value should not exist</code></summary>\n\n<br/>\nAssert that a cookie with a partial name and value does not exist\n<br/><br/>\n\n```gherkin\nThen a cookie with a name containing \"user\" and the value \"guest\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then a cookie with a name containing :partial_name and a value containing :partial_value should not exist</code></summary>\n\n<br/>\nAssert that a cookie with a partial name and partial value does not exist\n<br/><br/>\n\n```gherkin\nThen a cookie with a name containing \"user\" and a value containing \"guest\" should not exist\n\n```\n\n</details>\n\n## DateTrait\n\n[Source](mdc:src/DateTrait.php), [Example](mdc:tests/behat/features/date.feature)\n\n>  Convert relative date expressions into timestamps or formatted dates.\n>  <br/><br/>\n>  Supports values and tables.\n>  <br/><br/>\n>  Possible formats:\n>  - `[relative:OFFSET]`\n>  - `[relative:OFFSET#FORMAT]`\n>\n>  with:\n>  - `OFFSET`: any format that can be parsed by `strtotime()`.\n>  - `FORMAT`: `date()` format for additional processing.\n>\n>  Examples:\n>  - `[relative:-1 day]` converted to `1893456000`\n>  - `[relative:-1 day#Y-m-d]` converted to `2017-11-5`\n\n\n## ElementTrait\n\n[Source](mdc:src/ElementTrait.php), [Example](mdc:tests/behat/features/element.feature)\n\n>  Interact with HTML elements using CSS selectors and DOM attributes.\n>  - Assert element visibility, attribute values, and viewport positioning.\n>  - Execute JavaScript-based interactions with element state verification.\n>  - Handle confirmation dialogs and scrolling operations.\n\n\n<details>\n  <summary><code>@Given I accept all confirmation dialogs</code></summary>\n\n<br/>\nAccept confirmation dialogs appearing on the page\n<br/><br/>\n\n```gherkin\nGiven I accept all confirmation dialogs\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given I do not accept any confirmation dialogs</code></summary>\n\n<br/>\nDo not accept confirmation dialogs appearing on the page\n<br/><br/>\n\n```gherkin\nGiven I do not accept any confirmation dialogs\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I click on the element :selector</code></summary>\n\n<br/>\nClick on the element defined by the selector\n<br/><br/>\n\n```gherkin\nWhen I click on the element \".button\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I trigger the JS event :event on the element :selector</code></summary>\n\n<br/>\nWhen I trigger the JS event :event on the element :selector\n<br/><br/>\n\n```gherkin\nWhen I trigger the JS event \"click\" on the element \"#submit-button\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I scroll to the element :selector</code></summary>\n\n<br/>\nScroll to an element with ID\n<br/><br/>\n\n```gherkin\nWhen I scroll to the element \"#footer\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector with the attribute :attribute and the value :value should exist</code></summary>\n\n<br/>\nAssert an element with selector and attribute with a value exists\n<br/><br/>\n\n```gherkin\nThen the element \"#main-content\" with the attribute \"class\" and the value \"content-wrapper\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector with the attribute :attribute and the value containing :value should exist</code></summary>\n\n<br/>\nAssert an element with selector and attribute containing a value exists\n<br/><br/>\n\n```gherkin\nThen the element \"#main-content\" with the attribute \"class\" and the value containing \"content\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector with the attribute :attribute and the value :value should not exist</code></summary>\n\n<br/>\nAssert an element with selector and attribute with a value exists\n<br/><br/>\n\n```gherkin\nThen the element \"#main-content\" with the attribute \"class\" and the value \"hidden\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector with the attribute :attribute and the value containing :value should not exist</code></summary>\n\n<br/>\nAssert an element with selector and attribute containing a value does not exist\n<br/><br/>\n\n```gherkin\nThen the element \"#main-content\" with the attribute \"class\" and the value containing \"hidden\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector should be at the top of the viewport</code></summary>\n\n<br/>\nAssert the element :selector should be at the top of the viewport\n<br/><br/>\n\n```gherkin\nThen the element \"#header\" should be at the top of the viewport\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector should be displayed</code></summary>\n\n<br/>\nAssert that element with specified CSS is visible on page\n<br/><br/>\n\n```gherkin\nThen the element \".alert-success\" should be displayed\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector should not be displayed</code></summary>\n\n<br/>\nAssert that element with specified CSS is not visible on page\n<br/><br/>\n\n```gherkin\nThen the element \".error-message\" should not be displayed\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector should be displayed within a viewport</code></summary>\n\n<br/>\nAssert that element with specified CSS is displayed within a viewport\n<br/><br/>\n\n```gherkin\nThen the element \".hero-banner\" should be displayed within a viewport\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector should be displayed within a viewport with a top offset of :number pixels</code></summary>\n\n<br/>\nAssert that element with specified CSS is displayed within a viewport with a top offset\n<br/><br/>\n\n```gherkin\nThen the element \".sticky-header\" should be displayed within a viewport with a top offset of 50 pixels\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector should not be displayed within a viewport with a top offset of :number pixels</code></summary>\n\n<br/>\nAssert that element with specified CSS is not displayed within a viewport with a top offset\n<br/><br/>\n\n```gherkin\nThen the element \".below-fold-content\" should not be displayed within a viewport with a top offset of 0 pixels\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the element :selector should not be displayed within a viewport</code></summary>\n\n<br/>\nAssert that element with specified CSS is visually hidden on page\n<br/><br/>\n\n```gherkin\nThen the element \".visually-hidden\" should not be displayed within a viewport\n\n```\n\n</details>\n\n## FileDownloadTrait\n\n[Source](mdc:src/FileDownloadTrait.php), [Example](mdc:tests/behat/features/file_download.feature)\n\n>  Test file download functionality with content verification.\n>  - Download files through links and URLs with session cookie handling.\n>  - Verify file names, content, and extracted archives.\n>  - Set up download directories and handle file cleanup.\n>\n>  Skip processing with tags: `@behat-steps-skip:fileDownloadBeforeScenario` or\n>  `@behat-steps-skip:fileDownloadAfterScenario`\n>  <br/><br/>\n>  Special tags:\n>  - `@download` - enable download handling\n\n\n<details>\n  <summary><code>@When I download the file from the URL :url</code></summary>\n\n<br/>\nDownload a file from the specified URL\n<br/><br/>\n\n```gherkin\nWhen I download the file from the URL \"/sites/default/files/document.pdf\"\nWhen I download the file from the URL \"https://example.com/files/report.xlsx\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I download the file from the link :link</code></summary>\n\n<br/>\nDownload the file from the specified HTML link\n<br/><br/>\n\n```gherkin\nWhen I download the file from the link \"Download PDF\"\nWhen I download the file from the link \"Get Report\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the downloaded file should contain:</code></summary>\n\n<br/>\nAssert the contents of the download file\n<br/><br/>\n\n```gherkin\nThen the downloaded file should contain:\n\"\"\"\nFinancial Report 2023\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the downloaded file name should be :name</code></summary>\n\n<br/>\nAssert the file name of the downloaded file\n<br/><br/>\n\n```gherkin\nThen the downloaded file name should be \"report.pdf\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the downloaded file name should contain :name</code></summary>\n\n<br/>\nAssert the downloaded file name contains a specific string\n<br/><br/>\n\n```gherkin\nThen the downloaded file name should contain \"report\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the downloaded file should be a zip archive containing the files named:</code></summary>\n\n<br/>\nAssert the downloaded file should be a zip archive containing specific files\n<br/><br/>\n\n```gherkin\nThen the downloaded file should be a zip archive containing the files named:\n| document.pdf |\n| image.jpg    |\n| data.csv     |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the downloaded file should be a zip archive containing the files partially named:</code></summary>\n\n<br/>\nAssert the downloaded file should be a zip archive containing files with partial names\n<br/><br/>\n\n```gherkin\nThen the downloaded file should be a zip archive containing the files partially named:\n| report |\n| data   |\n| image  |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the downloaded file should be a zip archive not containing the files partially named:</code></summary>\n\n<br/>\nAssert the downloaded file is a zip archive not containing files with partial names\n<br/><br/>\n\n```gherkin\nThen the downloaded file should be a zip archive not containing the files partially named:\n| confidential |\n| private      |\n| draft        |\n\n```\n\n</details>\n\n## KeyboardTrait\n\n[Source](mdc:src/KeyboardTrait.php), [Example](mdc:tests/behat/features/keyboard.feature)\n\n>  Simulate keyboard interactions in Drupal browser testing.\n>  - Trigger key press events including special keys and key combinations.\n>  - Assert keyboard navigation and shortcut functionality.\n>  - Support for targeted key presses on specific page elements.\n\n\n<details>\n  <summary><code>@When I press the key :key</code></summary>\n\n<br/>\nPress a single keyboard key\n<br/><br/>\n\n```gherkin\nWhen I press the key \"a\"\nWhen I press the key \"tab\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I press the key :key on the element :selector</code></summary>\n\n<br/>\nPress a single keyboard key on the element\n<br/><br/>\n\n```gherkin\nWhen I press the key \"a\" on the element \"#edit-title\"\nWhen I press the key \"tab\" on the element \"#edit-title\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I press the keys :keys</code></summary>\n\n<br/>\nPress multiple keyboard keys\n<br/><br/>\n\n```gherkin\nWhen I press the keys \"abc\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I press the keys :keys on the element :selector</code></summary>\n\n<br/>\nPress multiple keyboard keys on the element\n<br/><br/>\n\n```gherkin\nWhen I press the keys \"abc\" on the element \"#edit-title\"\n\n```\n\n</details>\n\n## LinkTrait\n\n[Source](mdc:src/LinkTrait.php), [Example](mdc:tests/behat/features/link.feature)\n\n>  Verify link elements with attribute and content assertions.\n>  - Find links by title, URL, text content, and class attributes.\n>  - Test link existence, visibility, and destination accuracy.\n>  - Assert absolute and relative link paths.\n\n\n<details>\n  <summary><code>@When I click on the link with the title :title</code></summary>\n\n<br/>\nClick on the link with a title\n<br/><br/>\n\n```gherkin\nWhen I click on the link with the title \"Return to site content\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the link :link with the href :href should exist</code></summary>\n\n<br/>\nAssert a link with a href exists\n<br/><br/>\n\n```gherkin\nThen the link \"About us\" with the href \"/about-us\" should exist\nThen the link \"About us\" with the href \"/about*\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the link :link with the href :href within the element :selector should exist</code></summary>\n\n<br/>\nAssert link with a href exists within an element\n<br/><br/>\n\n```gherkin\nThen the link \"About us\" with the href \"/about-us\" within the element \".main-nav\" should exist\nThen the link \"About us\" with the href \"/about*\" within the element \".main-nav\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the link :link with the href :href should not exist</code></summary>\n\n<br/>\nAssert link with a href does not exist\n<br/><br/>\n\n```gherkin\nThen the link \"About us\" with the href \"/about-us\" should not exist\nThen the link \"About us\" with the href \"/about*\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the link :link with the href :href within the element :selector should not exist</code></summary>\n\n<br/>\nAssert link with a href does not exist within an element\n<br/><br/>\n\n```gherkin\nThen the link \"About us\" with the href \"/about-us\" within the element \".main-nav\" should not exist\nThen the link \"About us\" with the href \"/about*\" within the element \".main-nav\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the link with the title :title should exist</code></summary>\n\n<br/>\nAssert that a link with a title exists\n<br/><br/>\n\n```gherkin\nThen the link with the title \"Return to site content\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the link with the title :title should not exist</code></summary>\n\n<br/>\nAssert that a link with a title does not exist\n<br/><br/>\n\n```gherkin\nThen the link with the title \"Some non-existing title\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the link :link should be an absolute link</code></summary>\n\n<br/>\nAssert that the link with a text is absolute\n<br/><br/>\n\n```gherkin\nThen the link \"my-link-title\" should be an absolute link\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the link :link should not be an absolute link</code></summary>\n\n<br/>\nAssert that the link is not an absolute\n<br/><br/>\n\n```gherkin\nThen the link \"Return to site content\" should not be an absolute link\n\n```\n\n</details>\n\n## PathTrait\n\n[Source](mdc:src/PathTrait.php), [Example](mdc:tests/behat/features/path.feature)\n\n>  Navigate and verify paths with URL validation.\n>  - Assert current page location with front page special handling.\n>  - Configure basic authentication for protected path access.\n\n\n<details>\n  <summary><code>@Given the basic authentication with the username :username and the password :password</code></summary>\n\n<br/>\nSet basic authentication for the current session\n<br/><br/>\n\n```gherkin\nGiven the basic authentication with the username \"myusername\" and the password \"mypassword\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the path should be :path</code></summary>\n\n<br/>\nAssert that the current page is a specified path\n<br/><br/>\n\n```gherkin\nThen the path should be \"/about-us\"\nThen the path should be \"<front>\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the path should not be :path</code></summary>\n\n<br/>\nAssert that the current page is not a specified path\n<br/><br/>\n\n```gherkin\nThen the path should not be \"/about-us\"\nThen the path should not be \"<front>\"\n\n```\n\n</details>\n\n## ResponseTrait\n\n[Source](mdc:src/ResponseTrait.php), [Example](mdc:tests/behat/features/response.feature)\n\n>  Verify HTTP responses with status code and header checks.\n>  - Assert HTTP header presence and values.\n\n\n<details>\n  <summary><code>@Then the response should contain the header :header_name</code></summary>\n\n<br/>\nAssert that a response contains a header with specified name\n<br/><br/>\n\n```gherkin\nThen the response should contain the header \"Connection\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the response should not contain the header :header_name</code></summary>\n\n<br/>\nAssert that a response does not contain a header with a specified name\n<br/><br/>\n\n```gherkin\nThen the response should not contain the header \"Connection\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the response header :header_name should contain the value :header_value</code></summary>\n\n<br/>\nAssert that a response contains a header with a specified name and value\n<br/><br/>\n\n```gherkin\nThen the response header \"Connection\" should contain the value \"Keep-Alive\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the response header :header_name should not contain the value :header_value</code></summary>\n\n<br/>\nAssert a response does not contain a header with a specified name and value\n<br/><br/>\n\n```gherkin\nThen the response header \"Connection\" should not contain the value \"Keep-Alive\"\n\n```\n\n</details>\n\n## WaitTrait\n\n[Source](mdc:src/WaitTrait.php), [Example](mdc:tests/behat/features/wait.feature)\n\n>  Wait for a period of time or for AJAX to finish.\n\n\n<details>\n  <summary><code>@When I wait for :seconds second(s)</code></summary>\n\n<br/>\nWait for a specified number of seconds\n<br/><br/>\n\n```gherkin\nWhen I wait for 5 seconds\nWhen I wait for 1 second\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I wait for :seconds second(s) for AJAX to finish</code></summary>\n\n<br/>\nWait for the AJAX calls to finish\n<br/><br/>\n\n```gherkin\nWhen I wait for 5 seconds for AJAX to finish\nWhen I wait for 1 second for AJAX to finish\n\n```\n\n</details>\n\n\n\n## Drupal\\BigPipeTrait\n\n[Source](mdc:src/Drupal/BigPipeTrait.php), [Example](mdc:tests/behat/features/drupal_big_pipe.feature)\n\n>  Bypass Drupal BigPipe when rendering pages.\n>  <br/><br/>\n>  Activated by adding `@big_pipe` tag to the scenario.\n>  <br/><br/>\n>  Skip processing with tags: `@behat-steps-skip:bigPipeBeforeScenario` or\n>  `@behat-steps-skip:bigPipeBeforeStep`.\n\n\n## Drupal\\BlockTrait\n\n[Source](mdc:src/Drupal/BlockTrait.php), [Example](mdc:tests/behat/features/drupal_block.feature)\n\n>  Manage Drupal blocks.\n>  - Create and configure blocks with custom visibility conditions.\n>  - Place blocks in regions and verify their rendering in the page.\n>  - Automatically clean up created blocks after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:blockAfterScenario`\n\n\n<details>\n  <summary><code>@Given the instance of :admin_label block exists with the following configuration:</code></summary>\n\n<br/>\nCreate a block instance\n<br/><br/>\n\n```gherkin\nGiven the instance of \"My block\" block exists with the following configuration:\n | label         | My block |\n | label_display | 1        |\n | region        | content  |\n | status        | 1        |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the block :label has the following configuration:</code></summary>\n\n<br/>\nConfigure an existing block identified by label\n<br/><br/>\n\n```gherkin\nGiven the block \"My block\" has the following configuration:\n| label_display | 1       |\n| region        | content |\n| status        | 1       |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the block :label does not exist</code></summary>\n\n<br/>\nRemove a block specified by label\n<br/><br/>\n\n```gherkin\nGiven the block \"My block\" does not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the block :label is enabled</code></summary>\n\n<br/>\nEnable a block specified by label\n<br/><br/>\n\n```gherkin\nGiven the block \"My block\" is enabled\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the block :label is disabled</code></summary>\n\n<br/>\nDisable a block specified by label\n<br/><br/>\n\n```gherkin\nGiven the block \"My block\" is disabled\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the block :label has the following :condition condition configuration:</code></summary>\n\n<br/>\nSet a visibility condition for a block\n<br/><br/>\n\n```gherkin\nGiven the block \"My block\" has the following \"request_path\" condition configuration:\n| pages  | /node/1\\r\\n/about |\n| negate | 0                 |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the block :label has the :condition condition removed</code></summary>\n\n<br/>\nRemove a visibility condition from the specified block\n<br/><br/>\n\n```gherkin\nGiven the block \"My block\" has the \"request_path\" condition removed\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the block :label should exist</code></summary>\n\n<br/>\nAssert that a block with the specified label exists\n<br/><br/>\n\n```gherkin\nThen the block \"My block\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the block :label should not exist</code></summary>\n\n<br/>\nAssert that a block with the specified label does not exist\n<br/><br/>\n\n```gherkin\nThen the block \"My block\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the block :label should exist in the :region region</code></summary>\n\n<br/>\nAssert that a block with the specified label exists in a region\n<br/><br/>\n\n```gherkin\nThen the block \"My block\" should exist in the \"content\" region\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the block :label should not exist in the :region region</code></summary>\n\n<br/>\nAssert that a block with the specified label does not exist in a region\n<br/><br/>\n\n```gherkin\nThen the block \"My block\" should not exist in the \"content\" region\n\n```\n\n</details>\n\n## Drupal\\ContentBlockTrait\n\n[Source](mdc:src/Drupal/ContentBlockTrait.php), [Example](mdc:tests/behat/features/drupal_content_block.feature)\n\n>  Manage Drupal content blocks.\n>  - Define reusable custom block content with structured field data.\n>  - Create, edit, and verify block_content entities by type and description.\n>  - Automatically clean up created entities after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:contentBlockAfterScenario`\n\n\n<details>\n  <summary><code>@Given the following :type content blocks do not exist:</code></summary>\n\n<br/>\nRemove content blocks of a specified type with the given descriptions\n<br/><br/>\n\n```gherkin\nGiven the following \"basic\" content blocks do not exist:\n| [TEST] Footer Block  |\n| [TEST] Contact Form  |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the following :type content blocks exist:</code></summary>\n\n<br/>\nCreate content blocks of the specified type with the given field values\n<br/><br/>\n\n```gherkin\nGiven the following \"basic\" content blocks exist:\n| info                  | status | body                   | created           |\n| [TEST] Footer Contact | 1      | Call us at 555-1234    | 2023-01-17 8:00am |\n| [TEST] Copyright      | 1      | © 2023 Example Company | 2023-01-18 9:00am |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I edit the :type content block with the description :description</code></summary>\n\n<br/>\nNavigate to the edit page for a specified content block\n<br/><br/>\n\n```gherkin\nWhen I edit the \"basic\" content block with the description \"[TEST] Footer Block\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the content block type :type should exist</code></summary>\n\n<br/>\nAssert that a content block type exists\n<br/><br/>\n\n```gherkin\nThen the content block type \"Search\" should exist\n\n```\n\n</details>\n\n## Drupal\\ContentTrait\n\n[Source](mdc:src/Drupal/ContentTrait.php), [Example](mdc:tests/behat/features/drupal_content.feature)\n\n>  Manage Drupal content with workflow and moderation support.\n>  - Create, find, and manipulate nodes with structured field data.\n>  - Navigate to node pages by title and manage editorial workflows.\n>  - Support content moderation transitions and scheduled publishing.\n\n\n<details>\n  <summary><code>@Given the content type :content_type does not exist</code></summary>\n\n<br/>\nDelete content type\n<br/><br/>\n\n```gherkin\nGiven the content type \"article\" does not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the following :content_type content does not exist:</code></summary>\n\n<br/>\nRemove content defined by provided properties\n<br/><br/>\n\n```gherkin\nGiven the following \"article\" content does not exist:\n  | title                |\n  | Test article         |\n  | Another test article |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit the :content_type content page with the title :title</code></summary>\n\n<br/>\nVisit a page of a type with a specified title\n<br/><br/>\n\n```gherkin\nWhen I visit the \"article\" content page with the title \"Test article\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit the :content_type content edit page with the title :title</code></summary>\n\n<br/>\nVisit an edit page of a type with a specified title\n<br/><br/>\n\n```gherkin\nWhen I visit the \"article\" content edit page with the title \"Test article\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit the :content_type content delete page with the title :title</code></summary>\n\n<br/>\nVisit a delete page of a type with a specified title\n<br/><br/>\n\n```gherkin\nWhen I visit the \"article\" content delete page with the title \"Test article\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit the :content_type content scheduled transitions page with the title :title</code></summary>\n\n<br/>\nVisit a scheduled transitions page of a type with a specified title\n<br/><br/>\n\n```gherkin\nWhen I visit the \"article\" content scheduled transitions page with the title \"Test article\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I change the moderation state of the :content_type content with the title :title to the :new_state state</code></summary>\n\n<br/>\nChange moderation state of a content with the specified title\n<br/><br/>\n\n```gherkin\nWhen I change the moderation state of the \"article\" content with the title \"Test article\" to the \"published\" state\n\n```\n\n</details>\n\n## Drupal\\DraggableviewsTrait\n\n[Source](mdc:src/Drupal/DraggableviewsTrait.php), [Example](mdc:tests/behat/features/drupal_draggableviews.feature)\n\n>  Order items in the Drupal Draggable Views.\n\n\n<details>\n  <summary><code>@When I save the draggable views items of the view :view_id and the display :views_display_id for the :bundle content in the following order:</code></summary>\n\n<br/>\nSave order of the Draggable Order items\n<br/><br/>\n\n```gherkin\nWhen I save the draggable views items of the view \"draggableviews_demo\" and the display \"page_1\" for the \"article\" content in the following order:\n  | First Article  |\n  | Second Article |\n  | Third Article  |\n\n```\n\n</details>\n\n## Drupal\\EckTrait\n\n[Source](mdc:src/Drupal/EckTrait.php), [Example](mdc:tests/behat/features/drupal_eck.feature)\n\n>  Manage Drupal ECK entities with custom type and bundle creation.\n>  - Create structured ECK entities with defined field values.\n>  - Assert entity type registration and visit entity pages.\n>  - Automatically clean up created entities after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:eckAfterScenario`\n\n\n<details>\n  <summary><code>@Given the following eck :bundle :entity_type entities exist:</code></summary>\n\n<br/>\nCreate eck entities\n<br/><br/>\n\n```gherkin\nGiven the following eck \"contact\" \"contact_type\" entities exist:\n| title  | field_marine_animal     | field_fish_type | ... |\n| Snook  | Fish                    | Marine fish     | 10  |\n| ...    | ...                     | ...             | ... |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the following eck :bundle :entity_type entities do not exist:</code></summary>\n\n<br/>\nRemove custom entities by field\n<br/><br/>\n\n```gherkin\nGiven the following eck \"contact\" \"contact_type\" entities do not exist:\n| field        | value           |\n| field_a      | Entity label    |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit eck :bundle :entity_type entity with the title :title</code></summary>\n\n<br/>\nNavigate to view entity page with specified type and title\n<br/><br/>\n\n```gherkin\nWhen I visit eck \"contact\" \"contact_type\" entity with the title \"Test contact\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I edit eck :bundle :entity_type entity with the title :title</code></summary>\n\n<br/>\nNavigate to edit eck entity page with specified type and title\n<br/><br/>\n\n```gherkin\nWhen I edit eck \"contact\" \"contact_type\" entity with the title \"Test contact\"\n\n```\n\n</details>\n\n## Drupal\\EmailTrait\n\n[Source](mdc:src/Drupal/EmailTrait.php), [Example](mdc:tests/behat/features/drupal_email.feature)\n\n>  Test Drupal email functionality with content verification.\n>  - Capture and examine outgoing emails with header and body validation.\n>  - Follow links and test attachments within email content.\n>  - Configure mail handler systems for proper test isolation.\n>\n>  Skip processing with tags: `@behat-steps-skip:emailBeforeScenario` or\n>  `@behat-steps-skip:emailAfterScenario`\n>  <br/><br/>\n>  Special tags:\n>  - `@email` - enable email tracking using a default handler\n>  - `@email:{type}` - enable email tracking using a `{type}` handler\n>  - `@debug` (enable detailed logs)\n\n\n<details>\n  <summary><code>@When I clear the test email system queue</code></summary>\n\n<br/>\nClear test email system queue\n<br/><br/>\n\n```gherkin\nWhen I clear the test email system queue\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I follow link number :link_number in the email with the subject :subject</code></summary>\n\n<br/>\nFollow a specific link number in an email with the given subject\n<br/><br/>\n\n```gherkin\nWhen I follow link number \"1\" in the email with the subject \"Account Verification\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I follow link number :link_number in the email with the subject containing :subject</code></summary>\n\n<br/>\nFollow a specific link number in an email whose subject contains the given substring\n<br/><br/>\n\n```gherkin\nWhen I follow link number \"1\" in the email with the subject containing \"Verification\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I enable the test email system</code></summary>\n\n<br/>\nEnable the test email system\n<br/><br/>\n\n```gherkin\nWhen I enable the test email system\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I disable the test email system</code></summary>\n\n<br/>\nDisable test email system\n<br/><br/>\n\n```gherkin\nWhen I disable the test email system\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then an email should be sent to the :address</code></summary>\n\n<br/>\nAssert that an email should be sent to an address\n<br/><br/>\n\n```gherkin\nThen an email should be sent to the \"user@example.com\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then no emails should have been sent</code></summary>\n\n<br/>\nAssert that no email messages should be sent\n<br/><br/>\n\n```gherkin\nThen no emails should have been sent\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then no emails should have been sent to the :address</code></summary>\n\n<br/>\nAssert that no email messages should be sent to a specified address\n<br/><br/>\n\n```gherkin\nThen no emails should have been sent to the \"user@example.com\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the email header :header should contain:</code></summary>\n\n<br/>\nAssert that the email message header should contain specified content\n<br/><br/>\n\n```gherkin\nThen the email header \"Subject\" should contain:\n\"\"\"\nAccount details\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the email header :header should exactly be:</code></summary>\n\n<br/>\nAssert that the email message header should be the exact specified content\n<br/><br/>\n\n```gherkin\nThen the email header \"Subject\" should exactly be:\n\"\"\"\nYour Account Details\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then an email should be sent to the address :address with the content:</code></summary>\n\n<br/>\nAssert that an email should be sent to an address with the exact content in the body\n<br/><br/>\n\n```gherkin\nThen an email should be sent to the address \"user@example.com\" with the content:\n\"\"\"\nWelcome to our site!\nClick the link below to verify your account.\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then an email should be sent to the address :address with the content containing:</code></summary>\n\n<br/>\nAssert that an email should be sent to an address with the body containing specific content\n<br/><br/>\n\n```gherkin\nThen an email should be sent to the address \"user@example.com\" with the content containing:\n\"\"\"\nverification link\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then an email should be sent to the address :address with the content not containing:</code></summary>\n\n<br/>\nAssert that an email should be sent to an address with the body not containing specific content\n<br/><br/>\n\n```gherkin\nThen an email should be sent to the address \"user@example.com\" with the content not containing:\n\"\"\"\npassword\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then an email should not be sent to the address :address with the content:</code></summary>\n\n<br/>\nAssert that an email should not be sent to an address with the exact content in the body\n<br/><br/>\n\n```gherkin\nThen an email should not be sent to the address \"wrong@example.com\" with the content:\n\"\"\"\nWelcome to our site!\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then an email should not be sent to the address :address with the content containing:</code></summary>\n\n<br/>\nAssert that an email should not be sent to an address with the body containing specific content\n<br/><br/>\n\n```gherkin\nThen an email should not be sent to the address \"wrong@example.com\" with the content containing:\n\"\"\"\nverification link\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the email field :field should contain:</code></summary>\n\n<br/>\nAssert that the email field should contain a value\n<br/><br/>\n\n```gherkin\nThen the email field \"body\" should contain:\n\"\"\"\nPlease verify your account\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the email field :field should be:</code></summary>\n\n<br/>\nAssert that the email field should exactly match a value\n<br/><br/>\n\n```gherkin\nThen the email field \"subject\" should be:\n\"\"\"\nAccount Verification\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the email field :field should not contain:</code></summary>\n\n<br/>\nAssert that the email field should not contain a value\n<br/><br/>\n\n```gherkin\nThen the email field \"body\" should not contain:\n\"\"\"\npassword\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the email field :field should not be:</code></summary>\n\n<br/>\nAssert that the email field should not exactly match a value\n<br/><br/>\n\n```gherkin\nThen the email field \"subject\" should not be:\n\"\"\"\nPassword Reset\n\"\"\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the file :file_name should be attached to the email with the subject :subject</code></summary>\n\n<br/>\nAssert that a file is attached to an email message with specified subject\n<br/><br/>\n\n```gherkin\nThen the file \"document.pdf\" should be attached to the email with the subject \"Your document\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the file :file_name should be attached to the email with the subject containing :subject</code></summary>\n\n<br/>\nAssert that a file is attached to an email message with a subject containing the specified substring\n<br/><br/>\n\n```gherkin\nThen the file \"report.xlsx\" should be attached to the email with the subject containing \"Monthly Report\"\n\n```\n\n</details>\n\n## Drupal\\FieldTrait\n\n[Source](mdc:src/Drupal/FieldTrait.php), [Example](mdc:tests/behat/features/drupal_field.feature)\n\n>  Manipulate Drupal form fields and verify widget functionality.\n>  - Set field values for various input types including selects and WYSIWYG.\n>  - Assert field existence, state, and selected options.\n>  - Support for specialized widgets like color pickers and rich text editors.\n\n\n<details>\n  <summary><code>@When I fill in the color field :field with the value :value</code></summary>\n\n<br/>\nFill value for color field\n<br/><br/>\n\n```gherkin\nWhen I fill in the color field \"#edit-text-color\" with the value \"#3366FF\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I fill in the WYSIWYG field :field with the :value</code></summary>\n\n<br/>\nSet value for WYSIWYG field\n<br/><br/>\n\n```gherkin\nWhen I fill in the WYSIWYG field \"edit-body-0-value\" with the \"<p>This is a <strong>formatted</strong> paragraph.</p>\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the field :name should exist</code></summary>\n\n<br/>\nAssert that field exists on the page using id,name,label or value\n<br/><br/>\n\n```gherkin\nThen the field \"Body\" should exist\nThen the field \"field_body\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the field :name should not exist</code></summary>\n\n<br/>\nAssert that field does not exist on the page using id,name,label or value\n<br/><br/>\n\n```gherkin\nThen the field \"Body\" should not exist\nThen the field \"field_body\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the field :name should be :enabled_or_disabled</code></summary>\n\n<br/>\nAssert whether the field has a state\n<br/><br/>\n\n```gherkin\nThen the field \"Body\" should be \"disabled\"\nThen the field \"field_body\" should be \"disabled\"\nThen the field \"Tags\" should be \"enabled\"\nThen the field \"field_tags\" should be \"not enabled\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the color field :field should have the value :value</code></summary>\n\n<br/>\nAssert that a color field has a value\n<br/><br/>\n\n```gherkin\nThen the color field \"#edit-background-color\" should have the value \"#FF5733\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the option :option should exist within the select element :selector</code></summary>\n\n<br/>\nAssert that a select has an option\n<br/><br/>\n\n```gherkin\nThen the option \"Administrator\" should exist within the select element \"edit-roles\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the option :option should not exist within the select element :selector</code></summary>\n\n<br/>\nAssert that a select does not have an option\n<br/><br/>\n\n```gherkin\nThen the option \"Guest\" should not exist within the select element \"edit-roles\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the option :option should be selected within the select element :selector</code></summary>\n\n<br/>\nAssert that a select option is selected\n<br/><br/>\n\n```gherkin\nThen the option \"Administrator\" should be selected within the select element \"edit-roles\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the option :option should not be selected within the select element :selector</code></summary>\n\n<br/>\nAssert that a select option is not selected\n<br/><br/>\n\n```gherkin\nThen the option \"Editor\" should not be selected within the select element \"edit-roles\"\n\n```\n\n</details>\n\n## Drupal\\FileTrait\n\n[Source](mdc:src/Drupal/FileTrait.php), [Example](mdc:tests/behat/features/drupal_file.feature)\n\n>  Manage Drupal file entities with upload and storage operations.\n>  - Create managed and unmanaged files with specific URIs and content.\n>  - Verify file existence, content, and proper storage locations.\n>  - Set up file system directories and clean up created files.\n>\n>  Skip processing with tags: `@behat-steps-skip:fileBeforeScenario` or\n>  `@behat-steps-skip:fileAfterScenario`\n\n\n<details>\n  <summary><code>@Given the following managed files:</code></summary>\n\n<br/>\nCreate managed files with properties provided in the table\n<br/><br/>\n\n```gherkin\nGiven the following managed files:\n| path         | uri                    | status |\n| document.pdf | public://document.pdf  | 1      |\n| image.jpg    | public://images/pic.jpg| 1      |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the following managed files do not exist:</code></summary>\n\n<br/>\nDelete managed files defined by provided properties/fields\n<br/><br/>\n\n```gherkin\nGiven no managed files:\n| filename      |\n| myfile.jpg    |\n| otherfile.jpg |\n Given no managed files:\n | uri                    |\n | public://myfile.jpg    |\n | public://otherfile.jpg |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the unmanaged file at the URI :uri exists</code></summary>\n\n<br/>\nCreate an unmanaged file\n<br/><br/>\n\n```gherkin\nGiven the unmanaged file at the URI \"public://sample.txt\" exists\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the unmanaged file at the URI :uri exists with :content</code></summary>\n\n<br/>\nCreate an unmanaged file with specified content\n<br/><br/>\n\n```gherkin\nGiven the unmanaged file at the URI \"public://data.txt\" exists with \"Sample content\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then an unmanaged file at the URI :uri should exist</code></summary>\n\n<br/>\nAssert that an unmanaged file with specified URI exists\n<br/><br/>\n\n```gherkin\nThen an unmanaged file at the URI \"public://sample.txt\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then an unmanaged file at the URI :uri should not exist</code></summary>\n\n<br/>\nAssert that an unmanaged file with specified URI does not exist\n<br/><br/>\n\n```gherkin\nThen an unmanaged file at the URI \"public://temp.txt\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then an unmanaged file at the URI :uri should contain :content</code></summary>\n\n<br/>\nAssert that an unmanaged file exists and has specified content\n<br/><br/>\n\n```gherkin\nThen an unmanaged file at the URI \"public://config.txt\" should contain \"debug=true\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then an unmanaged file at the URI :uri should not contain :content</code></summary>\n\n<br/>\nAssert that an unmanaged file exists and does not have specified content\n<br/><br/>\n\n```gherkin\nThen an unmanaged file at the URI \"public://config.txt\" should not contain \"debug=false\"\n\n```\n\n</details>\n\n## Drupal\\MediaTrait\n\n[Source](mdc:src/Drupal/MediaTrait.php), [Example](mdc:tests/behat/features/drupal_media.feature)\n\n>  Manage Drupal media entities with type-specific field handling.\n>  - Create structured media items with proper file reference handling.\n>  - Assert media browser functionality and edit media entity fields.\n>  - Support for multiple media types with field value expansion handling.\n>  - Automatically clean up created entities after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:mediaAfterScenario`\n\n\n<details>\n  <summary><code>@Given :media_type media type does not exist</code></summary>\n\n<br/>\nRemove media type\n<br/><br/>\n\n```gherkin\nGiven \"video\" media type does not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the following media :media_type exist:</code></summary>\n\n<br/>\nCreate media of a given type\n<br/><br/>\n\n```gherkin\nGiven \"video\" media:\n| name     | field1   | field2 | field3           |\n| My media | file.jpg | value  | value            |\n| ...      | ...      | ...    | ...              |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the following media :media_type do not exist:</code></summary>\n\n<br/>\nRemove media defined by provided properties\n<br/><br/>\n\n```gherkin\nGiven the following media \"image\" do not exist:\n| name               |\n| Media item         |\n| Another media item |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I edit the media :media_type with the name :name</code></summary>\n\n<br/>\nNavigate to edit media with specified type and name\n<br/><br/>\n\n```gherkin\nWhen I edit \"document\" media \"Test document\"\n\n```\n\n</details>\n\n## Drupal\\MenuTrait\n\n[Source](mdc:src/Drupal/MenuTrait.php), [Example](mdc:tests/behat/features/drupal_menu.feature)\n\n>  Manage Drupal menu systems and menu link rendering.\n>  - Assert menu items by label, path, and containment hierarchy.\n>  - Assert menu link visibility and active states in different regions.\n>  - Create and manage menu hierarchies with parent-child relationships.\n>  - Automatically clean up created menu links after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:menuAfterScenario`\n\n\n<details>\n  <summary><code>@Given the menu :menu_name does not exist</code></summary>\n\n<br/>\nRemove a single menu by its label if it exists\n<br/><br/>\n\n```gherkin\nGiven the menu \"Test Menu\" does not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the following menus:</code></summary>\n\n<br/>\nCreate a menu if one does not exist\n<br/><br/>\n\n```gherkin\nGiven the following menus:\n| label            | description                    |\n| Footer Menu     | Links displayed in the footer  |\n| Secondary Menu  | Secondary navigation menu      |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the following menu links do not exist in the menu :menu_name:</code></summary>\n\n<br/>\nRemove menu links by title\n<br/><br/>\n\n```gherkin\nGiven the following menu links do not exist in the menu \"Main navigation\":\n| About Us     |\n| Contact      |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the following menu links exist in the menu :menu_name :</code></summary>\n\n<br/>\nCreate menu links\n<br/><br/>\n\n```gherkin\nGiven the following menu links exist in the menu \"Main navigation\":\n| title           | enabled | uri                     | parent       |\n| Products        | 1       | /products               |              |\n| Latest Products | 1       | /products/latest        | Products     |\n\n```\n\n</details>\n\n## Drupal\\MetatagTrait\n\n[Source](mdc:src/Drupal/MetatagTrait.php), [Example](mdc:tests/behat/features/drupal_metatag.feature)\n\n>  Assert `<meta>` tags in page markup.\n>  - Assert presence and content of meta tags with proper attribute handling.\n\n\n## Drupal\\OverrideTrait\n\n[Source](mdc:src/Drupal/OverrideTrait.php), [Example](mdc:tests/behat/features/drupal_override.feature)\n\n>  Override Drupal Extension behaviors.\n>  - Automated entity deletion before creation to avoid duplicates.\n>  - Improved user authentication handling for anonymous users.\n>\n>  Use with caution: depending on your version of Drupal Extension, PHP and\n>  Composer, the step definition string (/^Given etc.../) may need to be defined\n>  for these overrides. If you encounter errors about missing or duplicated\n>  step definitions, do not include this trait and rather copy the contents of\n>  this file into your feature context file and copy the step definition strings\n>  from the Drupal Extension.\n\n\n## Drupal\\ParagraphsTrait\n\n[Source](mdc:src/Drupal/ParagraphsTrait.php), [Example](mdc:tests/behat/features/drupal_paragraphs.feature)\n\n>  Manage Drupal paragraphs entities with structured field data.\n>  - Create paragraph items with type-specific field values.\n>  - Test nested paragraph structures and reference field handling.\n>  - Attach paragraphs to various entity types with parent-child relationships.\n>  - Automatically clean up created paragraph items after scenario completion.\n>\n>  Skip processing with tag: `@behat-steps-skip:paragraphsAfterScenario`\n\n\n<details>\n  <summary><code>@Given the following fields for the paragraph :paragraph_type exist in the field :parent_field within the :parent_bundle :parent_entity_type identified by the field :parent_lookup_field and the value :parent_lookup_value:</code></summary>\n\n<br/>\nCreate a paragraph of the given type with fields within an existing entity\n<br/><br/>\n\n```gherkin\nGiven the following fields for the paragraph \"text\" exist in the field \"field_component\" within the \"landing_page\" \"node\" identified by the field \"title\" and the value \"My landing page\":\n| field_paragraph_title           | My paragraph title   |\n| field_paragraph_longtext:value  | My paragraph message |\n| field_paragraph_longtext:format | full_html            |\n| ...                             | ...                  |\n\n```\n\n</details>\n\n## Drupal\\SearchApiTrait\n\n[Source](mdc:src/Drupal/SearchApiTrait.php), [Example](mdc:tests/behat/features/drupal_search_api.feature)\n\n>  Assert Drupal Search API with index and query operations.\n>  - Add content to an index\n>  - Run indexing for a specific number of items.\n\n\n<details>\n  <summary><code>@When I add the :content_type content with the title :title to the search index</code></summary>\n\n<br/>\nIndex a node of a specific content type with a specific title\n<br/><br/>\n\n```gherkin\nWhen I add the \"article\" content with the title \"Test Article\" to the search index\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I run search indexing for :count item(s)</code></summary>\n\n<br/>\nRun indexing for a specific number of items\n<br/><br/>\n\n```gherkin\nWhen I run search indexing for 5 items\nWhen I run search indexing for 1 item\n\n```\n\n</details>\n\n## Drupal\\TaxonomyTrait\n\n[Source](mdc:src/Drupal/TaxonomyTrait.php), [Example](mdc:tests/behat/features/drupal_taxonomy.feature)\n\n>  Manage Drupal taxonomy terms with vocabulary organization.\n>  - Create term vocabulary structures using field values.\n>  - Navigate to term pages\n>  - Verify vocabulary configurations.\n\n\n<details>\n  <summary><code>@Given the following :vocabulary_machine_name vocabulary terms do not exist:</code></summary>\n\n<br/>\nRemove terms from a specified vocabulary\n<br/><br/>\n\n```gherkin\nGiven the following \"fruits\" vocabulary terms do not exist:\n  | Apple |\n  | Pear  |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit the :vocabulary_machine_name vocabulary :term_name term page</code></summary>\n\n<br/>\nVisit specified vocabulary term page\n<br/><br/>\n\n```gherkin\nWhen I visit the \"fruits\" vocabulary \"Apple\" term page\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I edit the :vocabulary_machine_name vocabulary :term_name term page</code></summary>\n\n<br/>\nEdit specified vocabulary term page\n<br/><br/>\n\n```gherkin\nWhen I edit the \"fruits\" vocabulary \"Apple\" term page\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the vocabulary :machine_name with the name :name should exist</code></summary>\n\n<br/>\nAssert that a vocabulary with a specific name exists\n<br/><br/>\n\n```gherkin\nThen the vocabulary \"topics\" with the name \"Topics\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the vocabulary :machine_name should not exist</code></summary>\n\n<br/>\nAssert that a vocabulary with a specific name does not exist\n<br/><br/>\n\n```gherkin\nThen the vocabulary \"topics\" should not exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the taxonomy term :term_name from the vocabulary :vocabulary_machine_name should exist</code></summary>\n\n<br/>\nAssert that a taxonomy term exist by name\n<br/><br/>\n\n```gherkin\nThen the taxonomy term \"Apple\" from the vocabulary \"Fruits\" should exist\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the taxonomy term :term_name from the vocabulary :vocabulary_machine_name should not exist</code></summary>\n\n<br/>\nAssert that a taxonomy term does not exist by name\n<br/><br/>\n\n```gherkin\nThen the taxonomy term \"Apple\" from the vocabulary \"Fruits\" should not exist\n\n```\n\n</details>\n\n## Drupal\\TestmodeTrait\n\n[Source](mdc:src/Drupal/TestmodeTrait.php), [Example](mdc:tests/behat/features/drupal_testmode.feature)\n\n>  Configure Drupal Testmode module for controlled testing scenarios.\n>  <br/><br/>\n>  Skip processing with tags: `@behat-steps-skip:testmodeBeforeScenario` and\n>  `@behat-steps-skip:testmodeAfterScenario`.\n>  <br/><br/>\n>  Special tags:\n>  - `@testmode` - enable for scenario\n\n\n## Drupal\\UserTrait\n\n[Source](mdc:src/Drupal/UserTrait.php), [Example](mdc:tests/behat/features/drupal_user.feature)\n\n>  Manage Drupal users with role and permission assignments.\n>  - Create user accounts\n>  - Create user roles\n>  - Visit user profile pages for editing and deletion.\n>  - Assert user roles and permissions.\n>  - Assert user account status (active/inactive).\n\n\n<details>\n  <summary><code>@Given the following users do not exist:</code></summary>\n\n<br/>\nRemove users specified in a table\n<br/><br/>\n\n```gherkin\nGiven the following users do not exist:\n | name |\n | John |\n | Jane |\n Given the following users do not exist:\n  | mail             |\n  | john@example.com |\n  | jane@example.com |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the password for the user :name is :password</code></summary>\n\n<br/>\nSet a password for a user\n<br/><br/>\n\n```gherkin\nGiven the password for the user \"John\" is \"password\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the last access time for the user :name is :datetime</code></summary>\n\n<br/>\nSet last access time for a user\n<br/><br/>\n\n```gherkin\nGiven the last access time for the user \"John\" is \"Friday, 22 November 2024 13:46:14\"\nGiven the last access time for the user \"John\" is \"1732319174\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the last login time for the user :name is :datetime</code></summary>\n\n<br/>\nSet last login time for a user\n<br/><br/>\n\n```gherkin\nGiven the last login time for the user \"John\" is \"Friday, 22 November 2024 13:46:14\"\nGiven the last login time for the user \"John\" is \"1732319174\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the role :role_name with the permissions :permissions</code></summary>\n\n<br/>\nCreate a single role with specified permissions\n<br/><br/>\n\n```gherkin\nGiven the role \"Content Manager\" with the permissions \"access content, create article content, edit any article content\"\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Given the following roles:</code></summary>\n\n<br/>\nCreate multiple roles from the specified table\n<br/><br/>\n\n```gherkin\nGiven the following roles:\n| name              | permissions                              |\n| Content Editor    | access content, create article content   |\n| Content Approver  | access content, edit any article content |\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit :name user profile page</code></summary>\n\n<br/>\nVisit the profile page of the specified user\n<br/><br/>\n\n```gherkin\nWhen I visit \"John\" user profile page\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit my own user profile page</code></summary>\n\n<br/>\nVisit the profile page of the current user\n<br/><br/>\n\n```gherkin\nWhen I visit my own user profile page\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit :name user profile edit page</code></summary>\n\n<br/>\nVisit the profile edit page of the specified user\n<br/><br/>\n\n```gherkin\nWhen I visit \"John\" user profile edit page\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit my own user profile edit page</code></summary>\n\n<br/>\nVisit the profile edit page of the current user\n<br/><br/>\n\n```gherkin\nWhen I visit my own user profile edit page\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit :name user profile delete page</code></summary>\n\n<br/>\nVisit the profile delete page of the specified user\n<br/><br/>\n\n```gherkin\nWhen I visit \"John\" user profile delete page\n\n```\n\n</details>\n\n<details>\n  <summary><code>@When I visit my own user profile delete page</code></summary>\n\n<br/>\nVisit the profile delete page of the current user\n<br/><br/>\n\n```gherkin\nWhen I visit my own user profile delete page\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the user :name should have the role(s) :roles assigned</code></summary>\n\n<br/>\nAssert that a user has roles assigned\n<br/><br/>\n\n```gherkin\nThen the user \"John\" should have the roles \"administrator, editor\" assigned\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the user :name should not have the role(s) :roles assigned</code></summary>\n\n<br/>\nAssert that a user does not have roles assigned\n<br/><br/>\n\n```gherkin\nThen the user \"John\" should not have the roles \"administrator, editor\" assigned\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the user :name should be blocked</code></summary>\n\n<br/>\nAssert that a user is blocked\n<br/><br/>\n\n```gherkin\nThen the user \"John\" should be blocked\n\n```\n\n</details>\n\n<details>\n  <summary><code>@Then the user :name should not be blocked</code></summary>\n\n<br/>\nAssert that a user is not blocked\n<br/><br/>\n\n```gherkin\nThen the user \"John\" should not be blocked\n\n```\n\n</details>\n\n## Drupal\\WatchdogTrait\n\n[Source](mdc:src/Drupal/WatchdogTrait.php), [Example](mdc:tests/behat/features/drupal_watchdog.feature)\n\n>  Assert Drupal does not trigger PHP errors during scenarios using Watchdog.\n>  - Check for Watchdog messages after scenario completion.\n>  - Optionally check only for specific message types.\n>  - Optionally skip error checking for specific scenarios.\n>\n>  Skip processing with tags: `@behat-steps-skip:watchdogSetScenario` or\n>  `@behat-steps-skip:watchdogAfterScenario`\n>  <br/><br/>\n>  Special tags:\n>  - `@watchdog:{type}` - limit watchdog messages to specific types.\n>  - `@error` - add to scenarios that are expected to trigger an error.\n\n## Steps Format Guidelines\n- **General Guidelines**:\n  - Use tuple format instead of regular expressions\n  - Use descriptive placeholder names\n  - Use `the following` for tabled content\n  - Use `with` for properties: `Then the link with the title :title should exist`\n  - Avoid optional words like `(the|a)`\n  - Omit unnecessary suffixes like `on the page`\n  - Method names should begin with the trait name: `userAssertHasRoles()`\n\n- **Given Steps**:\n  - Define test prerequisites\n  - Use words like `exists` or `have`\n  - Avoid using `should` or `should not`\n  - Avoid using `Given I`\n\n- **When Steps**:\n  - Describe an action with an action verb\n  - Use the format `When I <verb>`\n\n- **Then Steps**:\n  - Specify assertions and expectations\n  - Use `should` and `should not` for assertions\n  - Start with the entity being asserted\n  - Avoid using `Then I`\n  - Methods should include the `Assert` prefix\n\n## Common Behat Step Patterns\n- Block assertions:\n  - `I should see the block with label \"...\"`\n  - `I should see the block with label \"...\" in the region \"...\"`\n\n- Content block operations:\n  - `the content block type \"...\" should exist`\n  - `the following \"...\" content blocks exist:`\n  - `I edit the \"...\" content block with the description \"...\"`\n\n- Email testing:\n  - `I enable the test email system`\n  - `I clear the test email system queue`\n  - `an email should be sent to the \"...\"`\n\n## Skipping Before Scenario Hooks\nSome traits provide `beforeScenario` hook implementations that can be disabled by adding `behat-steps-skip:METHOD_NAME` tag to your test.\n\nExample: To skip `beforeScenario` hook from `ElementTrait`, add `@behat-steps-skip:ElementTrait` tag to the feature.\n\n## Code Style Conventions\n- Code is written using Drupal coding standards\n- Local variables and method arguments: `snake_case`\n- Method names and class properties: `camelCase`\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/behat-steps.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/behat-steps.mdc",
      "sha": "e859ac67ab4edc01ac6e54dc70aa1baa06ea85dc"
    }
  },
  {
    "name": "ivangrynenko-build-optimization",
    "slug": "build-optimization",
    "displayName": "Build Optimization",
    "description": "--- description: Webpack/Vite configuration and build process optimization globs: webpack.config.js, vite.config.js, *.config.js",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Webpack/Vite configuration and build process optimization\nglobs: webpack.config.js, vite.config.js, *.config.js\n---\n# Enhanced Build Process Optimization\n\nEnsures optimal build configuration and process for better performance and maintainability.\n\n<rule>\nname: enhanced_build_optimization\ndescription: Enforce standards for optimizing build processes\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(js|ts|json)$\"  # Expanded to cover more config file types\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"mode:\\\\s*['\\\"]development['\\\"]\"\n        pattern_negate: \"process\\\\.env\\\\.NODE_ENV === 'development'\"\n        message: \"Set 'mode' to 'production' for production builds unless dynamically set by NODE_ENV.\"\n\n      - pattern: \"devtool:\\\\s*['\\\"]eval\"\n        message: \"Use 'source-map' or 'hidden-source-map' for production builds to balance performance and debugging.\"\n\n      - pattern: \"optimization:\\\\s*{[^}]*?splitChunks:\\\\s*{[^}]*?chunks:\\\\s*(?!'all')\"\n        message: \"Enable code splitting for all chunks in optimization settings.\"\n\n      - pattern: \"optimization:\\\\s*{[^}]*?usedExports:\\\\s*(?!true)\"\n        message: \"Enable tree shaking by setting 'usedExports' to true.\"\n\n      - pattern: \"output\\\\s*:\\\\s*{[^}]*?filename:\\\\s*['\\\"][^\\\\[]+['\\\"]\"\n        message: \"Use content hashing in filenames for better caching (e.g., '[name].[contenthash].js').\"\n\n  - type: suggest\n    message: |\n      **Build Optimization Best Practices:**\n      - **Code Splitting:** Implement code splitting to load only what's necessary for each page or component.\n      - **Tree Shaking:** Enable tree shaking to eliminate dead code, which reduces bundle size.\n      - **Asset Optimization:**\n        - Compress images and use modern formats like WebP where supported.\n        - Use lazy loading for images and other media.\n      - **Caching:**\n        - Configure proper caching strategies (e.g., HTTP headers, service workers for PWA).\n        - Use long-term caching for static assets with content hashing in filenames.\n      - **Modern JavaScript:** \n        - Use ES6+ features but ensure polyfills for older browsers if needed.\n        - Consider using features like module/nomodule for graceful degradation.\n      - **Minification & Compression:** Ensure all JavaScript and CSS are minified and consider enabling gzip compression on the server.\n      - **Performance Budgets:** Set performance budgets to keep bundle sizes in check.\n      - **Environment Variables:** Use environment variables for configuration differentiation between development and production.\n      - **CI/CD:** Integrate with CI/CD pipelines for automated builds and testing, ensuring only optimized code goes to production.\n\nmetadata:\n  priority: high\n  version: 1.1\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/build-optimization.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/build-optimization.mdc",
      "sha": "1ba168056c6b2dbe2dc381102e6a031b82ee083b"
    }
  },
  {
    "name": "ivangrynenko-code-generation-standards",
    "slug": "code-generation-standards",
    "displayName": "Code Generation Standards",
    "description": "--- description: Standards for code generation and implementation globs: *.php, *.js, *.ts, *.vue, *.jsx, *.tsx, *.py",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standards for code generation and implementation\nglobs: *.php, *.js, *.ts, *.vue, *.jsx, *.tsx, *.py\n---\n# Enhanced Code Generation Standards\n\nEnsures high-quality, executable code generation adhering to best practices across multiple programming languages.\n\n<rule>\nname: enhanced_code_generation_standards\ndescription: Enforce standards for code generation ensuring high quality and integration readiness\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|js|ts|vue|jsx|tsx|py|rb|java)$\"  # Expanded to include Ruby and Java\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"// TODO:|#\\\\s*TODO:\"\n        message: \"Replace TODOs with actual implementation - no placeholders allowed.\"\n\n      - pattern: \"function\\\\s+\\\\w+\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{\\\\s*(?:return\\\\s+null|throw\\\\s+new\\\\s+Error|console\\\\.log)\\\\s*\\\\}\"\n        message: \"Implement full functionality - no stub methods.\"\n\n      - pattern: \"\\\\bif\\\\b\\\\s*\\\\(\\\\s*false\\\\s*\\\\)\"\n        message: \"Remove or replace conditional statements that are always false.\"\n\n      - pattern: \"\\\\bconsole\\\\.[^(]+|print\\\\s*\\\\(\"\n        pattern_negate: \"DEBUG|LOGGING\"\n        message: \"Remove debug logging unless it's conditional on a debug flag.\"\n\n      - pattern: \"^\\\\s*#\\\\s*\\\\w+:\\\\s*\\\\w+\\\\s*$\"\n        language: python\n        message: \"In Python, prefer type hints over comments for type annotations.\"\n\n  - type: suggest\n    message: |\n      **Code Generation Best Practices:**\n      - **Executable Solutions:** Generate fully functional code, not just skeletons or stubs.\n      - **Readability:** \n        - Prioritize code readability, with clear naming conventions and logical structure.\n        - Use whitespace effectively to enhance code clarity.\n      - **Error Handling:** \n        - Implement comprehensive error handling with appropriate exceptions or error codes.\n        - Consider edge cases and provide meaningful error messages.\n      - **Imports/Dependencies:** \n        - Include all necessary imports or require statements at the beginning of the file.\n        - Manage dependencies to ensure the code is self-contained or clearly documented for setup.\n      - **Integration:** \n        - Code should be immediately usable within the project's existing framework or technology stack.\n        - Ensure compatibility with existing patterns or libraries used in the project.\n      - **Formatting:** \n        - Adhere to the project's coding style guide (e.g., Prettier, Black for Python, etc.).\n        - Use linters and formatters to maintain consistent code style.\n      - **Testing:** \n        - Include unit or integration tests where applicable to validate generated code.\n        - Encourage test-driven development if part of the project's culture.\n      - **Documentation:** \n        - Provide inline comments for complex logic or algorithms.\n        - Write docstrings or JSDoc for functions, classes, and modules to describe usage, parameters, and return values.\n        - Consider generating external documentation if the project uses tools like Swagger for APIs or Sphinx for Python.\n      - **Security:** \n        - Avoid hardcoded credentials or sensitive information.\n        - Follow security best practices for the language (e.g., SQL injection prevention in PHP, XSS in JavaScript).\n      - **Performance:** While readability takes precedence, be mindful of performance implications of the generated code.\n\nmetadata:\n  priority: critical\n  version: 1.1\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/code-generation-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/code-generation-standards.mdc",
      "sha": "a1689b4690a627284a7e647adaa6623050cf9061"
    }
  },
  {
    "name": "ivangrynenko-confluence-editing-standards",
    "slug": "confluence-editing-standards",
    "displayName": "Confluence Editing Standards",
    "description": "# Confluence Editing Standards (Markdown Authoring)  Purpose: Ensure Markdown renders cleanly in Confluence by applying spacing, nesting, and code for",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "# Confluence Editing Standards (Markdown Authoring)\n\nPurpose: Ensure Markdown renders cleanly in Confluence by applying spacing, nesting, and code formatting rules during page creation/updates.\n\n## Lists & Spacing\n- Always insert a blank line between list items.\n\n- Use nested sub-bullets for subpoints; never concatenate multiple points on a single line.\n\n- For ordered lists, keep each step single-purpose; add an empty line between steps when a step has sub-bullets.\n\n## Inline vs Code Blocks\n- Prefer inline code for short, single-line commands or file paths (e.g., `composer install`).\n\n- Use fenced code blocks only when necessary (multi-line commands, config snippets). Verify Confluence renders the block without collapsing; otherwise, convert to inline steps.\n\n- Do not mix bullets and code blocks without a blank line before and after the block.\n\n## Headings & Anchors\n- Keep headings concise; avoid trailing punctuation.\n\n- When using Markdown format, avoid enabling heading anchors if they introduce ID artifacts in rendered output.\n\n## Tables\n- Keep tables simple (5–7 columns max). Prefer bullets when content wraps heavily.\n\n- Add a brief sentence above a large table explaining what it captures.\n\n## Nested Structure\n- Depth guidance: limit nesting to two levels (bullet → sub-bullet). If content requires more depth, split into a new subsection.\n\n## Check Before Publish (Quicklist)\n- Bullets have blank lines between items.\n\n- Sub-bullets are properly indented and grouped.\n\n- Commands are inline where possible; multi-line blocks tested for rendering.\n\n- No anchor artifacts in headings.\n\n- Tables are readable; consider bullets if wide.\n\n## Optional Page Label Cue\nWhen editing an existing Confluence page, if the page has label `format-spaced-lists`, apply these spacing rules strictly even if the original content is inconsistent.\n\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/confluence-editing-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/confluence-editing-standards.mdc",
      "sha": "35a60bc44889a1d2bad1aa2e7013331393badf36"
    }
  },
  {
    "name": "ivangrynenko-cursor-rules",
    "slug": "cursor-rules",
    "displayName": "Cursor Rules",
    "description": "--- description: Describes how and where to create Cursor Rules globs: *.mdc",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Describes how and where to create Cursor Rules\nglobs: *.mdc\n---\n# Cursor Rules Location\n\nStandards for placing and organizing Cursor rule files in the repository, ensuring rules are always up-to-date and follow best practices.\n\n<rule>\nname: cursor_rules_location_and_maintenance\ndescription: Standards for placing and maintaining Cursor rule files in the correct directory\nfilters:\n  # Match any .mdc files\n  - type: file_extension\n    pattern: \"\\\\.mdc$\"\n  # Match files that look like Cursor rules\n  - type: content\n    pattern: \"(?s)<rule>.*?</rule>\"\n  # Match file creation or modification events\n  - type: event\n    pattern: \"file_create|file_modify\"\n\nactions:\n  - type: reject\n    conditions:\n      - pattern: \"^(?!\\\\.\\\\/\\\\.cursor\\\\/rules\\\\/.*\\\\.mdc$)\"\n        message: \"Cursor rule files (.mdc) must be placed in the .cursor/rules directory\"\n\n  - type: suggest\n    message: |\n      ## Cursor Rules Best Practices\n\n      ### 1. Location and Structure\n      - **Location:** Always place rule files in **PROJECT_ROOT/.cursor/rules/**\n      - **Directory Structure:**\n        ```\n        PROJECT_ROOT/\n        ├── .cursor/\n        │   └── rules/\n        │       ├── your-rule-name.mdc\n        │       └── ...\n        └── ...\n        ```\n\n      ### 2. Naming Conventions\n      - Use **kebab-case** for filenames (e.g., `php-drupal-standards.mdc`)\n      - Always use the **.mdc** extension\n      - Make names descriptive of the rule's purpose\n      - Group related rules with common prefixes (e.g., `drupal-*`, `lagoon-*`)\n\n      ### 3. Rule File Structure\n      ```\n      ---\n      description: Brief description of the rule\n      globs: *.php, *.module, *.inc\n      alwaysApply: false\n      ---\n      # Rule Title\n\n      <rule>\n      name: rule_name_in_snake_case\n      description: Detailed description of what the rule enforces\n      filters:\n        - type: file_extension\n          pattern: \"pattern_to_match\"\n      \n      actions:\n        - type: enforce|suggest|validate\n          conditions:\n            - pattern: \"regex_pattern\"\n              message: \"Clear message explaining the issue\"\n      \n      metadata:\n        priority: high|medium|low\n        version: 1.0\n      </rule>\n      ```\n\n      ### 4. Rule Maintenance\n      - **When adding new rules:**\n        - Check for overlapping or conflicting rules\n        - Ensure patterns are efficient and specific\n        - Test rules against sample code\n      - **When modifying existing rules:**\n        - Update version number\n        - Document changes in commit messages\n        - Review and update related rules for consistency\n        - Consider backward compatibility\n\n      ### 5. Best Practices for Rule Content\n      - Use clear, specific regex patterns\n      - Provide helpful, actionable messages\n      - Include examples of good and bad code\n      - Set appropriate priority levels\n      - Use multiple conditions for complex rules\n      - Consider performance impact of complex patterns\n\n      ### 6. Rule Testing\n      - Test rules against both compliant and non-compliant code\n      - Verify that messages are clear and helpful\n      - Check for false positives and false negatives\n      - Ensure rules don't conflict with each other\n\nexamples:\n  - input: |\n      # Bad: Rule file in wrong location\n      rules/my-rule.mdc\n      my-rule.mdc\n      .rules/my-rule.mdc\n\n      # Good: Rule file in correct location\n      .cursor/rules/my-rule.mdc\n    output: \"Correctly placed Cursor rule file\"\n  \n  - input: |\n      # Bad: Poorly structured rule\n      <rule>\n      name: bad_rule\n      description: This rule does something\n      </rule>\n\n      # Good: Well-structured rule\n      <rule>\n      name: good_rule\n      description: This rule enforces proper error handling in PHP code\n      filters:\n        - type: file_extension\n          pattern: \"\\\\.php$\"\n      actions:\n        - type: enforce\n          conditions:\n            - pattern: \"try\\\\s*{[^}]*}\\\\s*catch\\\\s*\\\\([^)]*\\\\)\\\\s*{\\\\s*}\"\n              message: \"Empty catch blocks should include at least error logging\"\n      metadata:\n        priority: high\n        version: 1.0\n      </rule>\n    output: \"Well-structured Cursor rule with proper components\"\n\nmetadata:\n  priority: high\n  version: 1.2\n</rule>\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/cursor-rules.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/cursor-rules.mdc",
      "sha": "b76782a18ed02856cd2802fde1e335e54a5663aa"
    }
  },
  {
    "name": "ivangrynenko-debugging-standards",
    "slug": "debugging-standards",
    "displayName": "Debugging Standards",
    "description": "--- description: Standards for debugging and error handling globs: *.php, *.js, *.ts, *.vue, *.jsx, *.tsx, *.py",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standards for debugging and error handling\nglobs: *.php, *.js, *.ts, *.vue, *.jsx, *.tsx, *.py\n---\n# Debugging Standards\n\nEnsures proper debugging practices and error handling.\n\n<rule>\nname: debugging_standards\ndescription: Enforce standards for debugging and error handling\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|js|ts|vue|jsx|tsx|py)$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"console\\\\.log\\\\(|print_r\\\\(|var_dump\\\\(\"\n        message: \"Replace debug statements with proper logging\"\n\n      - pattern: \"catch\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{\\\\s*\\\\}\"\n        message: \"Implement proper error handling in catch blocks\"\n\n  - type: suggest\n    message: |\n      Debugging Best Practices:\n      - Address root causes, not symptoms\n      - Add descriptive logging messages\n      - Create isolated test functions\n      - Implement comprehensive error handling\n      - Use appropriate logging levels\n      - Add context to error messages\n      - Consider debugging tools integration\n\nmetadata:\n  priority: high\n  version: 1.0\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/debugging-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/debugging-standards.mdc",
      "sha": "4fb041fa009532988bbf1fb050470d45ed89760b"
    }
  },
  {
    "name": "ivangrynenko-docker-compose-standards",
    "slug": "docker-compose-standards",
    "displayName": "Docker Compose Standards",
    "description": "--- description: Docker Compose standards Rule globs:",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Docker Compose standards Rule\nglobs: \nalwaysApply: false\n---\n<rule>\nname: docker_compose_best_practices\ndescription: Enforces best practices in docker-compose files to ensure maintainability, security, and consistency\nfilters:\n  - type: file_name\n    pattern: \"docker-compose\\\\.ya?ml$\"\n  - type: event\n    pattern: \"(file_create|file_modify)\"\nactions:\n  # 1. Prevent deprecated 'version' field\n  - type: reject\n    conditions:\n      - pattern: \"^\\\\s*version\\\\s*:\"\n        message: \"The 'version' field is deprecated in Docker Compose files. Compose files are now version-less by default.\"\n  # 2. Enforce consistent indentation\n  - type: reject\n    conditions:\n      - pattern: \"^(  |\\t)\"\n        message: \"Inconsistent indentation detected. Use 2 spaces for indentation.\"\n  # 3. Prevent usage of deprecated 'links' key\n  - type: reject\n    conditions:\n      - pattern: \"^\\\\s*links\\\\s*:\"\n        message: \"The 'links' key is deprecated. Use networks and service names for inter-service communication.\"\n  # 4. Enforce explicit image tags\n  - type: reject\n    conditions:\n      - pattern: \"^\\\\s*image\\\\s*:\\\\s*[^:]+$\"\n        message: \"Specify an explicit image tag to ensure consistency.\"\n  # 5. Prevent services from running in privileged mode\n  - type: reject\n    conditions:\n      - pattern: \"^\\\\s*privileged\\\\s*:\\\\s*true\"\n        message: \"Running services in privileged mode is discouraged for security reasons.\"\n  # 6. Enforce defining resource limits\n  - type: reject\n    conditions:\n      - pattern: \"^\\\\s*services\\\\s*:\\\\s*[^\\\\n]+\\\\n(?!.*\\\\blimits\\\\b)\"\n        message: \"Define resource limits for each service to prevent resource exhaustion.\"\n  # Suggestions for best practices\n  - type: suggest\n    message: |\n      To adhere to Docker Compose best practices:\n\n      1. **Omit the 'version' field**: Compose files are version-less by default.\n         ```yaml\n         services:\n           web:\n             image: nginx\n         ```\n\n      2. **Use consistent indentation**: Use 2 spaces for indentation.\n         ```yaml\n         services:\n           web:\n             image: nginx\n         ```\n\n      3. **Avoid 'links' key**: Use networks and service names for service communication.\n         ```yaml\n         services:\n           web:\n             image: nginx\n             networks:\n               - my-network\n           db:\n             image: mysql\n             networks:\n               - my-network\n         networks:\n           my-network:\n         ```\n\n      4. **Specify explicit image tags**: Prevent unintended updates by defining image tags.\n         ```yaml\n         services:\n           web:\n             image: nginx:1.21.0\n         ```\n\n      5. **Avoid privileged mode**: Do not use 'privileged: true'. Grant specific capabilities if necessary.\n         ```yaml\n         services:\n           web:\n             image: nginx\n             cap_add:\n               - NET_ADMIN\n         ```\n\n      6. **Define resource limits**: Prevent services from consuming excessive resources.\n         ```yaml\n         services:\n           web:\n             image: nginx\n             deploy:\n               resources:\n                 limits:\n                   cpus: '0.50'\n                   memory: '512M'\n         ```\n\n      Implementing these practices ensures secure, maintainable, and consistent Docker Compose configurations.\nexamples:\n  - input: |\n      version: '3'\n      services:\n        web:\n          image: nginx\n          links:\n            - db\n          privileged: true\n        db:\n          image: mysql\n    output: |\n      services:\n        web:\n          image: nginx:1.21.0\n          networks:\n            - my-network\n          deploy:\n            resources:\n              limits:\n                cpus: '0.50'\n                memory: '512M'\n        db:\n          image: mysql:5.7\n          networks:\n            - my-network\n      networks:\n        my-network:\nmetadata:\n  priority: high\n  version: 1.0\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/docker-compose-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/docker-compose-standards.mdc",
      "sha": "8bb85cd5a4e12708b93d5f43803e2ee04b3eed83"
    }
  },
  {
    "name": "ivangrynenko-drupal-authentication-failures",
    "slug": "drupal-authentication-failures",
    "displayName": "Drupal Authentication Failures",
    "description": "--- description: Detect and prevent identification and authentication failures in Drupal as defined in OWASP Top 10:2021-A07 globs: *.php, *.inc, *.mo",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Detect and prevent identification and authentication failures in Drupal as defined in OWASP Top 10:2021-A07\nglobs: *.php, *.inc, *.module, *.install, *.info.yml, *.theme\nalwaysApply: false\n---\n# Drupal Identification and Authentication Failures Standards (OWASP A07:2021)\n\nThis rule enforces security best practices to prevent identification and authentication failures in Drupal applications, as defined in OWASP Top 10:2021-A07.\n\n<rule>\nname: drupal_authentication_failures\ndescription: Detect and prevent identification and authentication failures in Drupal as defined in OWASP Top 10:2021-A07\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|inc|module|install|theme|yml)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Weak or missing password policies\n      - pattern: \"UserPasswordConstraint|PasswordPolicy|user\\\\.settings\\\\.yml\"\n        message: \"Ensure strong password policies are configured to require complexity, length, and prevent common passwords.\"\n        \n      # Pattern 2: Custom authentication without proper validation\n      - pattern: \"(authenticate|login|auth).*function[^}]*return\\\\s+(TRUE|true|1)\\\\s*;\"\n        message: \"Custom authentication functions should implement proper validation and not return TRUE without checks.\"\n        \n      # Pattern 3: Improper password comparison\n      - pattern: \"==\\\\s*\\\\$password|===\\\\s*\\\\$password|strcmp\\\\(|password_verify\\\\([^,]+,[^,]+\\\\$plainTextPassword\"\n        message: \"Avoid direct password comparison. Use Drupal's built-in password verification services.\"\n        \n      # Pattern 4: Credentials in code\n      - pattern: \"(username|user|pass|password|pwd)\\\\s*=\\\\s*['\\\"][^'\\\"]+['\\\"]\"\n        message: \"Hardcoded credentials detected. Store credentials securely outside of code.\"\n        \n      # Pattern 5: Missing or weak CSRF protection\n      - pattern: \"drupal_get_token\\\\(|form_token|\\\\$form\\\\[['\\\"]#token['\\\"]\\\\]\\\\s*=|drupal_valid_token\\\\(\"\n        message: \"Ensure proper CSRF protection is implemented for all authenticated actions.\"\n        \n      # Pattern 6: Insecure session management\n      - pattern: \"setcookie\\\\(|session_regenerate_id\\\\(false\\\\)|session_regenerate_id\\\\([^\\\\)]*\"\n        message: \"Use Drupal's session management. If custom code is required, ensure secure session handling practices.\"\n        \n      # Pattern 7: Missing account lockout protection\n      - pattern: \"user\\\\.flood\\\\.yml|flood_control|UserFloodControl|user_failed_login_\"\n        message: \"Ensure proper account lockout and flood control mechanisms are configured to prevent brute force attacks.\"\n        \n      # Pattern 8: Insecure password reset implementation\n      - pattern: \"user_pass_reset|password_reset|reset.*token\"\n        message: \"Verify password reset functionality uses secure tokens with proper expiration and validation.\"\n        \n      # Pattern 9: Lack of multi-factor authentication\n      - pattern: \"tfa|two_factor|multi_factor|2fa\"\n        message: \"Consider implementing multi-factor authentication for sensitive operations or user roles.\"\n        \n      # Pattern 10: Default or test accounts\n      - pattern: \"\\\\$user->name\\\\s*=\\\\s*['\\\"]admin['\\\"]|\\\\$name\\\\s*=\\\\s*['\\\"]admin['\\\"]|->values\\\\(['\\\"](mdc:name|mail)['\\\"]\\\\)\\\\s*->\\\\s*set\\\\(['\\\"][^\\\\'\\\"]+['\\\"]\\\\)\"\n        message: \"Avoid creating default administrator accounts or test users in production code.\"\n\n  - type: suggest\n    message: |\n      **Drupal Authentication Security Best Practices:**\n      \n      1. **Password Policies:**\n         - Use Drupal's Password Policy module for enforcing strong passwords\n         - Configure minimum password length (12+ characters recommended)\n         - Require complexity (uppercase, lowercase, numbers, special characters)\n         - Implement password rotation for sensitive roles\n         - Check passwords against known breached password databases\n      \n      2. **Authentication Infrastructure:**\n         - Use Drupal's core authentication mechanisms rather than custom solutions\n         - Implement proper account lockout after failed login attempts\n         - Consider multi-factor authentication (TFA module) for privileged accounts\n         - Implement session timeout for inactivity\n         - Use HTTPS for all authentication traffic\n      \n      3. **Session Management:**\n         - Use Drupal's session management system rather than PHP's session functions\n         - Configure secure session cookie settings in settings.php\n         - Implement proper session regeneration on privilege changes\n         - Consider using the Session Limit module to restrict concurrent sessions\n         - Properly destroy sessions on logout\n      \n      4. **Account Management:**\n         - Implement proper account provisioning and deprovisioning processes\n         - Use email verification for new account registration\n         - Implement secure password reset mechanisms with limited-time tokens\n         - Apply the principle of least privilege for user roles\n         - Regularly audit user accounts and permissions\n      \n      5. **Authentication Hardening:**\n         - Monitor for authentication failures and suspicious patterns\n         - Implement IP-based and username-based flood control\n         - Log authentication events for security monitoring\n         - Consider CAPTCHA or reCAPTCHA for login forms\n         - Use OAuth or SAML for single sign-on where appropriate\n\n  - type: validate\n    conditions:\n      # Check 1: Proper password handling\n      - pattern: \"password_verify\\\\(|UserPassword|\\\\\\\\Drupal::service\\\\(['\\\"]password['\\\"]\\\\)\"\n        message: \"Using Drupal's password services correctly.\"\n      \n      # Check 2: CSRF token implementation\n      - pattern: \"\\\\$form\\\\[['\\\"]#token['\\\"]\\\\]\\\\s*=\\\\s*['\\\"][^'\\\"]+['\\\"]\"\n        message: \"Form includes CSRF protection token.\"\n      \n      # Check 3: Proper session management\n      - pattern: \"\\\\$request->getSession\\\\(\\\\)|\\\\\\\\Drupal::service\\\\(['\\\"]session['\\\"]\\\\)\"\n        message: \"Using Drupal's session management services.\"\n      \n      # Check 4: User flood control\n      - pattern: \"user\\\\.flood\\\\.yml|flood|user_login_final_validate\"\n        message: \"Implementing user flood protection.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - drupal\n    - authentication\n    - identification\n    - owasp\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:authentication\n    - standard:owasp-top10\n    - risk:a07-authentication-failures\n  references:\n    - \"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\n    - \"https://www.drupal.org/docs/security-in-drupal/drupal-security-best-practices\"\n    - \"https://www.drupal.org/project/tfa\"\n    - \"https://www.drupal.org/project/password_policy\"\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-authentication-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-authentication-failures.mdc",
      "sha": "c0ba535e6a647975b2ea8845a3d1d20bd93ae0a1"
    }
  },
  {
    "name": "ivangrynenko-drupal-broken-access-control",
    "slug": "drupal-broken-access-control",
    "displayName": "Drupal Broken Access Control",
    "description": "--- description: Detect and prevent broken access control vulnerabilities in Drupal as defined in OWASP Top 10:2021-A01 globs: *.php, *.install, *.mod",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Detect and prevent broken access control vulnerabilities in Drupal as defined in OWASP Top 10:2021-A01\nglobs: *.php, *.install, *.module, *.inc, *.theme\nalwaysApply: false\n---\n# Drupal Broken Access Control Security Standards (OWASP A01:2021)\n\nThis rule enforces security best practices to prevent broken access control vulnerabilities in Drupal applications, as defined in OWASP Top 10:2021-A01.\n\n<rule>\nname: drupal_broken_access_control\ndescription: Detect and prevent broken access control vulnerabilities in Drupal as defined in OWASP Top 10:2021-A01\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|inc|module|install|theme)$\"\n  - type: file_path\n    pattern: \"(modules|themes|profiles)/custom\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Missing access checks in routes\n      - pattern: \"\\\\s*\\\\$routes\\\\['[^']*'\\\\]\\\\s*=\\\\s*.*(?!_access|access_callback|requirements)\"\n        message: \"Route definition is missing access control. Add '_permission', '_role', '_access', or custom access check in requirements.\"\n        \n      # Pattern 2: Using user_access() instead of more secure methods\n      - pattern: \"user_access\\\\(\"\n        message: \"user_access() is deprecated. Use $account->hasPermission() or proper dependency injection with AccessResult methods.\"\n        \n      # Pattern 3: Hard-coded user ID checks\n      - pattern: \"(\\\\$user->id\\\\(\\\\)|\\\\$user->uid)\\\\s*===?\\\\s*1\"\n        message: \"Avoid hardcoded checks against user ID 1. Use role-based permissions or proper access control services.\"\n        \n      # Pattern 4: Missing access check on entity operations\n      - pattern: \"\\\\$entity->(?!access)(save|delete|update)\\\\(\\\\)\"\n        message: \"Entity operation without prior access check. Use \\$entity->access('operation') before performing operations.\"\n        \n      # Pattern 5: Using Drupal::currentUser() directly in services\n      - pattern: \"\\\\\\\\Drupal::currentUser\\\\(\\\\)\"\n        message: \"Avoid using \\\\Drupal::currentUser() directly. Inject the current_user service for better testability and security.\"\n        \n      # Pattern 6: Missing access checks in controllers\n      - pattern: \"class [A-Za-z0-9_]+Controller.+extends ControllerBase[^}]+public function [a-zA-Z0-9_]+\\\\([^{]*\\\\)\\\\s*\\\\{(?![^}]*access)\"\n        message: \"Controller method lacks explicit access checking. Add checks via route requirements or within the controller method.\"\n        \n      # Pattern 7: Direct field value manipulation without access check\n      - pattern: \"\\\\$entity->set\\\\([^)]+\\\\)\\\\s*;(?![^;]*access)\"\n        message: \"Direct field value manipulation without access check. Verify entity field access before manipulation.\"\n        \n      # Pattern 8: Unprotected REST endpoints\n      - pattern: \"@RestResource\\\\([^)]*\\\\)(?![^{]*_access|access_callback)\"\n        message: \"REST resource lacks access controls. Add access checks via annotations or in methods.\"\n        \n      # Pattern 9: Insecure access check by client IP\n      - pattern: \"\\\\$_SERVER\\\\['REMOTE_ADDR'\\\\]\\\\s*===?\\\\s*\"\n        message: \"IP-based access control is insufficient. Use proper Drupal permission system instead.\"\n        \n      # Pattern 10: Allow bypassing cache for authenticated users without proper checks\n      - pattern: \"#cache\\\\['contexts'\\\\]\\\\s*=\\\\s*\\\\[[^\\\\]]*'user'[^\\\\]]*\\\\]\"\n        message: \"Using 'user' cache context without proper access checks may expose content to unauthorized users.\"\n\n  - type: suggest\n    message: |\n      **Drupal Access Control Best Practices:**\n      \n      1. **Route Access Controls:**\n         - Always define access requirements in route definitions\n         - Use permission-based access checks: '_permission', '_role', '_entity_access'\n         - Implement custom access checkers implementing AccessInterface\n      \n      2. **Entity Access Controls:**\n         - Always check entity access: $entity->access('view'|'update'|'delete') \n         - Use EntityAccessControlHandler for consistent access control\n         - Respect entity field access with $entity->get('field')->access('view'|'edit')\n      \n      3. **Controller Security:**\n         - Inject and use proper services rather than \\Drupal static calls\n         - Add explicit access checks within controller methods\n         - Use AccessResult methods (allowed, forbidden, neutral) with proper caching metadata\n      \n      4. **Service Security:**\n         - Inject AccountProxyInterface rather than calling currentUser() directly\n         - Use dependency injection for access-related services\n         - Implement session-based CSRF protection with form tokens\n      \n      5. **REST/API Security:**\n         - Implement OAuth or proper authentication\n         - Define specific permissions for REST operations\n         - Never rely solely on client-side access control\n\n  - type: validate\n    conditions:\n      # Check 1: Ensuring proper access check implementation\n      - pattern: \"AccessResult::(allowed|forbidden|neutral)\\\\(\\\\)(?=.*addCacheContexts)\"\n        message: \"Access check is properly implemented with cache metadata.\"\n      \n      # Check 2: Proper hook_entity_access implementation\n      - pattern: \"function hook_entity_access\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*return AccessResult\"\n        message: \"Entity access hook is correctly returning AccessResult.\"\n      \n      # Check 3: Properly secured route access\n      - pattern: \"_permission|_role|_access|_entity_access|_custom_access\"\n        message: \"Route has proper access controls defined.\"\n      \n      # Check 4: Secure REST implementation\n      - pattern: \"@RestResource\\\\(.*,\\\\s*authentication\\\\s*=\\\\s*\\\\{[^}]+\\\\}\"\n        message: \"REST Resource has authentication configured.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - drupal\n    - access-control\n    - permissions\n    - owasp\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:access-control\n    - standard:owasp-top10\n    - risk:a01-broken-access-control\n  references:\n    - \"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\n    - \"https://www.drupal.org/docs/8/api/routing-system/access-checking-on-routes\"\n    - \"https://www.drupal.org/docs/8/api/entity-api/entity-access-api\"\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-broken-access-control.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-broken-access-control.mdc",
      "sha": "4166475c9b48f93a7356982afcde7545c7f696d6"
    }
  },
  {
    "name": "ivangrynenko-drupal-cryptographic-failures",
    "slug": "drupal-cryptographic-failures",
    "displayName": "Drupal Cryptographic Failures",
    "description": "--- description: Detect and prevent cryptographic failures in Drupal as defined in OWASP Top 10:2021-A02 globs: *.php, *.install, *.module, *.inc, *.t",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Detect and prevent cryptographic failures in Drupal as defined in OWASP Top 10:2021-A02\nglobs: *.php, *.install, *.module, *.inc, *.theme\nalwaysApply: false\n---\n# Drupal Cryptographic Failures Security Standards (OWASP A02:2021)\n\nThis rule enforces security best practices to prevent cryptographic failures in Drupal applications, as defined in OWASP Top 10:2021-A02.\n\n<rule>\nname: drupal_cryptographic_failures\ndescription: Detect and prevent cryptographic failures in Drupal as defined in OWASP Top 10:2021-A02\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|inc|module|install|theme)$\"\n  - type: file_path\n    pattern: \"(modules|themes|profiles|core)/.*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Use of weak hash algorithms\n      - pattern: \"(md5|sha1)\\\\([^)]*\\\\)\"\n        message: \"Weak hash algorithm detected. Use password_hash() for passwords or hash('sha256'/'sha512') for other data.\"\n        \n      # Pattern 2: Hardcoded credentials or keys\n      - pattern: \"(password|key|token|secret|credentials|pwd)\\\\s*=\\\\s*['\\\"][^'\\\"]+['\\\"]\"\n        message: \"Hardcoded credentials or sensitive keys detected. Use Drupal's State API, key module, or environment variables.\"\n        \n      # Pattern 3: Plaintext password storage\n      - pattern: \"\\\\$user->setPassword\\\\((?!password_hash|\\\\$hash)[^)]+\\\\)\"\n        message: \"Never store plaintext passwords. Drupal handles password hashing internally.\"\n        \n      # Pattern 4: Improper file encryption\n      - pattern: \"file_(get|put)_contents\\\\([^,]+,\\\\s*[^,]+\\\\)\"\n        message: \"Consider encrypting sensitive file contents using Drupal's encryption API or PHP's openssl functions.\"\n        \n      # Pattern 5: Unprotected sensitive data in settings\n      - pattern: \"\\\\$settings\\\\[['\\\"](mdc:?!hash_salt|update_free_access)[^]]+\\\\]\\\\s*=\\\\s*['\\\"][^\\\"']+['\\\"]\"\n        message: \"Sensitive data in settings.php should be moved to environment variables or settings.local.php.\"\n        \n      # Pattern 6: Insecure random number generation\n      - pattern: \"(rand|mt_rand|array_rand)\\\\(\"\n        message: \"Insecure random number generation. Use random_bytes() or random_int() for cryptographic purposes.\"\n        \n      # Pattern 7: Missing HTTPS enforcement\n      - pattern: \"'#cache'|'cache'\"\n        message: \"Ensure HTTPS is enforced for cached pages containing sensitive information.\"\n        \n      # Pattern 8: Missing encryption for content with private information\n      - pattern: \"(->set|->get)\\\\('field_[^']*(?:password|ssn|credit|card|secret|key|token|credentials|pwd)[^']*'\\\\)\"\n        message: \"Consider using field encryption for sensitive data fields.\"\n        \n      # Pattern 9: Custom session handling without proper security\n      - pattern: \"session_(start|regenerate_id)\"\n        message: \"Avoid custom session handling. Use Drupal's session management services.\"\n        \n      # Pattern 10: API tokens without expiration or rotation\n      - pattern: \"\\\\$token\\\\s*=\\\\s*.*?\\\\$[^;]+;(?![^;]*expir|[^;]*valid)\"\n        message: \"API tokens should include expiration time or rotation mechanism.\"\n\n  - type: suggest\n    message: |\n      **Drupal Cryptographic Security Best Practices:**\n      \n      1. **Secure Data Storage:**\n         - Use Drupal's Key module for storing encryption keys\n         - Store sensitive configuration in environment variables or settings.local.php\n         - Use Drupal's State API for non-configuration sensitive data\n         - Never store plaintext sensitive information in the database\n      \n      2. **Encryption and Hashing:**\n         - Use Drupal's password hashing system, which uses password_hash() internally\n         - For non-password data hashing, use SHA-256 or SHA-512\n         - Use the Encrypt module or PHP's openssl_encrypt() with proper algorithms (AES-256-GCM)\n         - Always use proper salting techniques\n      \n      3. **Communication Security:**\n         - Enforce HTTPS site-wide using settings.php configuration\n         - Use secure cookies (secure, HttpOnly, SameSite)\n         - Implement proper Content-Security-Policy headers\n         - Use TLS 1.2+ for all connections\n      \n      4. **API Security:**\n         - Use OAuth or JWT with proper signature verification\n         - Implement token expiration and rotation\n         - Use HMAC for API request signatures when appropriate\n         - Never expose internal encryption keys through APIs\n      \n      5. **Configuration Best Practices:**\n         - Regularly rotate encryption keys and credentials\n         - Implement secure key storage using key management services\n         - Monitor and log cryptographic operations \n         - Maintain an inventory of cryptographic algorithms in use\n\n  - type: validate\n    conditions:\n      # Check 1: Proper password handling\n      - pattern: \"UserInterface::PASSWORD_|password_hash\\\\(\"\n        message: \"Using Drupal's password system correctly.\"\n      \n      # Check 2: Proper random generation\n      - pattern: \"random_bytes|random_int|\\\\\\\\Drupal::service\\\\('random'\\\\)\"\n        message: \"Using secure random generation methods.\"\n      \n      # Check 3: Secure settings\n      - pattern: \"getenv\\\\('|\\\\$_ENV\\\\['|\\\\$_SERVER\\\\['|settings\\\\.local\\\\.php\"\n        message: \"Using environment variables or local settings correctly.\"\n      \n      # Check 4: Proper encryption usage\n      - pattern: \"openssl_encrypt\\\\(|\\\\\\\\Drupal::service\\\\('encryption'\\\\)\"\n        message: \"Using proper encryption methods.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - drupal\n    - cryptography\n    - encryption\n    - owasp\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:cryptography\n    - standard:owasp-top10\n    - risk:a02-cryptographic-failures\n  references:\n    - \"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\n    - \"https://www.drupal.org/docs/security-in-drupal\"\n    - \"https://www.drupal.org/project/key\"\n    - \"https://www.drupal.org/project/encrypt\"\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-cryptographic-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-cryptographic-failures.mdc",
      "sha": "a116255962daa6c8d3c826e248fefb527acdb1f2"
    }
  },
  {
    "name": "ivangrynenko-drupal-database-standards",
    "slug": "drupal-database-standards",
    "displayName": "Drupal Database Standards",
    "description": "--- description: Database schema changes, migrations, and query optimization globs: *.php, *.install, *.module",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Database schema changes, migrations, and query optimization\nglobs: *.php, *.install, *.module\n---\n# Drupal Database Standards\n\nEnsures proper database handling in Drupal applications.\n\n<rule>\nname: drupal_database_standards\ndescription: Enforce Drupal database best practices and standards\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|install|module)$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"db_query\"\n        message: \"Use Database API instead of db_query\"\n\n      - pattern: \"hook_update_N.*\\\\{\\\\s*[^}]*\\\\}\"\n        message: \"Ensure hook_update_N includes proper schema changes\"\n\n      - pattern: \"\\\\$query->execute\\\\(\\\\)\"\n        message: \"Consider using try-catch block for database operations\"\n\n  - type: suggest\n    message: |\n      Database Best Practices:\n      - Use Schema API for table definitions\n      - Implement proper error handling\n      - Use update hooks for schema changes\n      - Follow Drupal's database abstraction layer\n      - Implement proper indexing strategies\n\nmetadata:\n  priority: critical\n  version: 1.0\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-database-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-database-standards.mdc",
      "sha": "d3252952a2a9b1d12e250870040cd286b4726312"
    }
  },
  {
    "name": "ivangrynenko-drupal-file-permissions",
    "slug": "drupal-file-permissions",
    "displayName": "Drupal File Permissions",
    "description": "--- description: Drupal file permissions security standards globs: *.dockerfile, *.sh, docker-compose.yml, Dockerfile",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Drupal file permissions security standards\nglobs: *.dockerfile, *.sh, docker-compose.yml, Dockerfile\n---\n# Drupal File Permissions Security\n\nStandards for securing Drupal file permissions in Docker environments and production servers, ensuring proper security while maintaining functionality.\n\n<rule>\nname: drupal_file_permissions\ndescription: Enforce secure file permissions for Drupal sites/default directory and critical files\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(dockerfile|sh|yml)$\"\n  - type: file_name\n    pattern: \"^Dockerfile$|^docker-compose\\\\.yml$\"\n  - type: content\n    pattern: \"(?i)chmod|chown|drupal|settings\\\\.php|services\\\\.yml\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"chmod\\\\s+(?!755)\\\\d+\\\\s+[^\\\\n]*sites\\\\/default(?![^\\\\n]*files)\"\n        message: \"sites/default directory should have 755 permissions (read-only for group/others)\"\n\n      - pattern: \"chmod\\\\s+(?!444)\\\\d+\\\\s+[^\\\\n]*settings\\\\.php\"\n        message: \"settings.php should have 444 permissions (read-only for everyone)\"\n\n      - pattern: \"chmod\\\\s+(?!444)\\\\d+\\\\s+[^\\\\n]*services\\\\.yml\"\n        message: \"services.yml should have 444 permissions (read-only for everyone)\"\n        \n      - pattern: \"chmod\\\\s+(?!755)\\\\d+\\\\s+[^\\\\n]*sites\\\\/default\\\\/files\"\n        message: \"sites/default/files directory should have 755 permissions with proper ownership\"\n        \n      - pattern: \"chown\\\\s+(?!www-data:www-data)[^\\\\s]+\\\\s+[^\\\\n]*sites\\\\/default\\\\/files\"\n        message: \"sites/default/files should be owned by the web server user (www-data:www-data)\"\n\n  - type: suggest\n    message: |\n      ## Drupal File Permissions Security Best Practices\n\n      ### 1. Critical File Permissions\n      - **sites/default directory**: 755 (drwxr-xr-x)\n      - **settings.php**: 444 (r--r--r--)\n      - **services.yml**: 444 (r--r--r--)\n      - **settings.local.php**: 444 (r--r--r--)\n      - **sites/default/files**: 755 (drwxr-xr-x)\n      - **sites/default/files/** (contents): 644 (rw-r--r--) for files, 755 (drwxr-xr-x) for directories\n\n      ### 2. Ownership Configuration\n      - **Web root**: application user (varies by environment)\n      - **sites/default/files**: web server user (www-data:www-data)\n      \n      ### 3. Implementation in Dockerfile\n      ```dockerfile\n      # Set proper permissions for Drupal\n      RUN mkdir -p /app/${WEBROOT}/sites/default/files && \\\n          chown www-data:www-data /app/${WEBROOT}/sites/default/files && \\\n          chmod 755 /app/${WEBROOT}/sites/default && \\\n          chmod 444 /app/${WEBROOT}/sites/default/settings.php && \\\n          chmod 444 /app/${WEBROOT}/sites/default/services.yml && \\\n          find /app/${WEBROOT}/sites/default/files -type d -exec chmod 755 {} \\\\; && \\\n          find /app/${WEBROOT}/sites/default/files -type f -exec chmod 644 {} \\\\;\n      ```\n\n      ### 4. Permission Fix Script\n      Create a script at `/app/scripts/custom/fix-drupal-permissions.sh`:\n      ```bash\n      #!/bin/bash\n      \n      # Exit on error\n      set -e\n      \n      WEBROOT=${WEBROOT:-web}\n      \n      echo \"Setting Drupal file permissions...\"\n      \n      # Ensure directories exist\n      mkdir -p /app/${WEBROOT}/sites/default/files\n      \n      # Set ownership\n      chown www-data:www-data /app/${WEBROOT}/sites/default/files\n      \n      # Set directory permissions\n      chmod 755 /app/${WEBROOT}/sites/default\n      chmod 755 /app/${WEBROOT}/sites/default/files\n      find /app/${WEBROOT}/sites/default/files -type d -exec chmod 755 {} \\;\n      \n      # Set file permissions\n      chmod 444 /app/${WEBROOT}/sites/default/settings.php\n      [ -f /app/${WEBROOT}/sites/default/services.yml ] && chmod 444 /app/${WEBROOT}/sites/default/services.yml\n      [ -f /app/${WEBROOT}/sites/default/settings.local.php ] && chmod 444 /app/${WEBROOT}/sites/default/settings.local.php\n      find /app/${WEBROOT}/sites/default/files -type f -exec chmod 644 {} \\;\n      \n      echo \"Drupal file permissions set successfully.\"\n      ```\n\n      ### 5. Verify Permissions\n      ```bash\n      # Check file permissions\n      ahoy cli \"ls -la /app/${WEBROOT}/sites/default\"\n      ahoy cli \"ls -la /app/${WEBROOT}/sites/default/files\"\n      \n      # Check Drupal status\n      ahoy drush status-report | grep -i \"protected\"\n      ```\n\n      ### 6. Security Considerations\n      - Never set 777 permissions on any Drupal files or directories\n      - Temporary files should be stored in private file system when possible\n      - Use Drupal's private file system for sensitive uploads\n      - Implement file access controls through Drupal's permission system\n      - Consider using file encryption for highly sensitive data\n\nexamples:\n  - input: |\n      # Bad: Insecure permissions\n      RUN chmod 777 /app/${WEBROOT}/sites/default\n      RUN chmod 666 /app/${WEBROOT}/sites/default/settings.php\n      RUN chmod -R 777 /app/${WEBROOT}/sites/default/files\n\n      # Good: Secure permissions\n      RUN chmod 755 /app/${WEBROOT}/sites/default\n      RUN chmod 444 /app/${WEBROOT}/sites/default/settings.php\n      RUN chmod 444 /app/${WEBROOT}/sites/default/services.yml\n      RUN chown www-data:www-data /app/${WEBROOT}/sites/default/files\n      RUN find /app/${WEBROOT}/sites/default/files -type d -exec chmod 755 {} \\;\n      RUN find /app/${WEBROOT}/sites/default/files -type f -exec chmod 644 {} \\;\n    output: \"Correctly set Drupal file permissions with proper security\"\n\nmetadata:\n  priority: high\n  version: 1.1\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-file-permissions.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-file-permissions.mdc",
      "sha": "ac45a4bf869cb9236d653ced8fd011809da4041d"
    }
  },
  {
    "name": "ivangrynenko-drupal-injection",
    "slug": "drupal-injection",
    "displayName": "Drupal Injection",
    "description": "Drupal Injection cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Detect and prevent injection vulnerabilities in Drupal as defined in OWASP Top 10:2021-A03\nglobs: *.php, *.inc, *.module, *.install, *.info.yml, *.theme, **/modules/**, **/themes/**, **/profiles/**\nalwaysApply: false\n---\n# Drupal Injection Security Standards (OWASP A03:2021)\n\nThis rule enforces security best practices to prevent injection vulnerabilities in Drupal applications, as defined in OWASP Top 10:2021-A03.\n\n<rule>\nname: drupal_injection\ndescription: Detect and prevent injection vulnerabilities in Drupal as defined in OWASP Top 10:2021-A03\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|inc|module|install|theme)$\"\n  - type: file_path\n    pattern: \"(modules|themes|profiles|core)/.*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Raw SQL queries without placeholders\n      - pattern: \"db_query\\\\(['\\\"][^'\\\"]*\\\\$[^'\\\"]*['\\\"]\"\n        message: \"Direct variables in SQL queries are vulnerable to SQL injection. Use parameterized queries with placeholders.\"\n        \n      # Pattern 2: Modern DB API without placeholders\n      - pattern: \"->query\\\\(['\\\"][^'\\\"]*\\\\$[^'\\\"]*['\\\"]\"\n        message: \"Use parameterized queries with placeholders to prevent SQL injection: ->query($sql, [$param1, $param2]).\"\n        \n      # Pattern 3: Unescaped output\n      - pattern: \"<?=|<?php\\\\s+echo\\\\s+(?!(t|\\\\\\\\t|\\\\$this->t))[^;]*;\"\n        message: \"Direct output may lead to XSS. Use t(), escaped variables with Html::escape(), or Twig templates.\"\n        \n      # Pattern 4: Unfiltered user input in render arrays\n      - pattern: \"[\\\"']#markup[\\\"']\\\\s*=>\\\\s*(?!t\\\\(|\\\\\\\\t\\\\(|Xss::filterAdmin|Html::escape)\\\\$\"\n        message: \"Never use unfiltered variables in #markup. Use t(), Xss::filterAdmin(), or Html::escape().\"\n        \n      # Pattern 5: Unescaped variables in JavaScript settings\n      - pattern: \"->addJsSettings\\\\(\\\\[(?![^\\\\]]*(Xss::filter|Json::encode))\\\\$\"\n        message: \"Filter variables before adding to JavaScript settings using Xss::filter() or properly encode with Json::encode().\"\n        \n      # Pattern 6: Direct command execution\n      - pattern: \"exec\\\\(|shell_exec\\\\(|system\\\\(|passthru\\\\(|proc_open\\\\(|popen\\\\(|`\"\n        message: \"Command execution functions can lead to command injection. Use Symfony\\Component\\Process\\Process if necessary.\"\n        \n      # Pattern 7: Unvalidated redirect\n      - pattern: \"->redirect\\\\(\\\\s*\\\\$(?!(this->|allowed_destinations|config))\"\n        message: \"Unvalidated redirects can lead to open redirect vulnerabilities. Whitelist allowed destinations.\"\n        \n      # Pattern 8: Raw user input in conditions\n      - pattern: \"->condition\\\\([^,]*,\\\\s*\\\\$(?!(this->|config|entity|storage))[^,]*,\"\n        message: \"Use proper input validation before using variables in database conditions to prevent SQL injection.\"\n        \n      # Pattern 9: Missing CSRF protection in forms\n      - pattern: \"(?<!buildForm|getFormId)\\\\s*function\\\\s+[a-zA-Z0-9_]+Form\\\\s*\\\\([^{]*\\\\{[^}]*return\\\\s+\\\\$form;(?![^}]*FormBuilderInterface|[^}]*::TOKEN|[^}]*#token)\"\n        message: \"Form submissions must include CSRF protection with $form['#token'].\"\n        \n      # Pattern 10: Unvalidated file operations\n      - pattern: \"file_get_contents\\\\(\\\\s*\\\\$(?!(this->|allowed_paths|config))\"\n        message: \"Validate file paths before operations to prevent path traversal attacks.\"\n\n  - type: suggest\n    message: |\n      **Drupal Injection Prevention Best Practices:**\n      \n      1. **SQL Injection Prevention:**\n         - Always use parameterized queries with placeholders\n         - Use the Database API's condition methods: ->condition(), ->where()\n         - Properly escape table and field names with {}\n         - Consider using EntityQuery for entity operations\n      \n      2. **XSS Prevention:**\n         - Use Drupal's t() function for user-visible strings\n         - Apply appropriate filtering: Html::escape(), Xss::filter(), Xss::filterAdmin()\n         - Use #plain_text instead of #markup when displaying user input\n         - Utilize Twig's automatic escaping in templates\n         - For admin UIs, be careful with Xss::filterAdmin() as it allows some tags\n      \n      3. **CSRF Protection:**\n         - Always include form tokens with $form['#token']\n         - Validate form tokens with FormState->validateToken()\n         - For AJAX requests, utilize Drupal's ajax framework\n         - Use drupal_valid_token() for custom validation\n      \n      4. **Command Injection Prevention:**\n         - Avoid command execution functions entirely\n         - Use Symfony\\Component\\Process\\Process with escaped arguments\n         - Validate and whitelist any input used in command contexts\n      \n      5. **Path Traversal Prevention:**\n         - Validate file paths with FileSystem::validatedLocalFileSystem()\n         - Use stream wrappers (public://, private://) instead of direct paths\n         - Implement strict input validation for any path components\n\n  - type: validate\n    conditions:\n      # Check 1: Proper SQL query usage\n      - pattern: \"->query\\\\(['\\\"][^'\\\"]*\\\\?[^'\\\"]*['\\\"],\\\\s*\\\\[[^\\\\]]*\\\\]\\\\)\"\n        message: \"Properly using parameterized queries with placeholders.\"\n      \n      # Check 2: Proper XSS prevention\n      - pattern: \"(t\\\\(|Xss::filter|Html::escape|#plain_text)\"\n        message: \"Using proper XSS prevention techniques.\"\n      \n      # Check 3: Proper CSRF protection\n      - pattern: \"#token|FormBuilderInterface::TOKEN|drupal_valid_token\"\n        message: \"Implementing CSRF protection correctly.\"\n      \n      # Check 4: Safe file operations\n      - pattern: \"FileSystem::validatedLocalFileSystem|file_exists\\\\(\\\\s*DRUPAL_ROOT\"\n        message: \"Using safe file operation practices.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - drupal\n    - injection\n    - sql\n    - xss\n    - csrf\n    - owasp\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:injection\n    - standard:owasp-top10\n    - risk:a03-injection\n  references:\n    - \"https://owasp.org/Top10/A03_2021-Injection/\"\n    - \"https://www.drupal.org/docs/security-in-drupal/writing-secure-code-for-drupal\"\n    - \"https://www.drupal.org/docs/8/security/drupal-8-sanitizing-output\"\n    - \"https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Component%21Utility%21Xss.php/class/Xss/9\"\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-injection.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-injection.mdc",
      "sha": "3d8a5026cef2be93b1eda945af7eec9e6aa78f74"
    }
  },
  {
    "name": "ivangrynenko-drupal-insecure-design",
    "slug": "drupal-insecure-design",
    "displayName": "Drupal Insecure Design",
    "description": "--- description: Detect and prevent insecure design patterns in Drupal as defined in OWASP Top 10:2021-A04 globs: *.php, *.install, *.module, *.inc, *",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Detect and prevent insecure design patterns in Drupal as defined in OWASP Top 10:2021-A04\nglobs: *.php, *.install, *.module, *.inc, *.theme, *.yml, *.info\nalwaysApply: false\n---\n# Drupal Insecure Design Security Standards (OWASP A04:2021)\n\nThis rule enforces security best practices to prevent insecure design vulnerabilities in Drupal applications, as defined in OWASP Top 10:2021-A04.\n\n<rule>\nname: drupal_insecure_design\ndescription: Detect and prevent insecure design patterns in Drupal as defined in OWASP Top 10:2021-A04\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|inc|module|install|theme|info\\\\.yml)$\"\n  - type: file_path\n    pattern: \"(modules|themes|profiles)/custom\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Insecure permission design\n      - pattern: \"\\\\$permissions\\\\[['\\\"][^'\\\"]+['\\\"]\\\\]\\\\s*=\\\\s*array\\\\((?![^)]*(administer|manage|edit|delete)[^)]*(content|configuration|users)).*?\\\\);\"\n        message: \"Permissions should follow Drupal naming patterns (verb + object) and be specific. Avoid overly broad permissions.\"\n        \n      # Pattern 2: Hard-coded business logic values\n      - pattern: \"if\\\\s*\\\\([^\\\\)]*===?\\\\s*['\\\"][a-zA-Z0-9_]+['\\\"]\\\\s*\\\\)\"\n        message: \"Consider moving business logic rules to configuration to allow for proper adjustment without code changes.\"\n        \n      # Pattern 3: Ad hoc input sanitization\n      - pattern: \"preg_replace|str_replace|strip_tags\"\n        message: \"Avoid ad hoc sanitization. Use Drupal's built-in sanitization tools: t(), Xss::filter(), etc.\"\n        \n      # Pattern 4: Database logic in controllers\n      - pattern: \"class\\\\s+[a-zA-Z0-9_]+Controller.+\\\\{[^}]*->query\\\\(\"\n        message: \"Follow separation of concerns. Move database logic to services or repositories, not in controllers.\"\n        \n      # Pattern 5: Weak entity access policy\n      - pattern: \"function\\\\s+[a-zA-Z0-9_]+_entity_access\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*return\\\\s+AccessResult::allowed\\\\(\\\\);\"\n        message: \"Avoid unconditional access grants. Implement proper conditional checks based on roles, permissions, or entity ownership.\"\n        \n      # Pattern 6: Custom session management \n      - pattern: \"session_start|session_set_cookie_params\"\n        message: \"Avoid custom session management. Use Drupal's session handling system and services.\"\n        \n      # Pattern 7: Excessive global state dependency\n      - pattern: \"(?:\\\\\\\\Drupal::[a-zA-Z_]+\\\\(\\\\).*){3,}\"\n        message: \"Excessive static service calls indicate poor dependency injection. Use proper service injection.\"\n        \n      # Pattern 8: Custom user authentication\n      - pattern: \"password_verify\\\\(|password_hash\\\\(\"\n        message: \"Avoid custom authentication. Use Drupal's built-in authentication system and services.\"\n        \n      # Pattern 9: Missing schema definitions\n      - pattern: \"function\\\\s+[a-zA-Z0-9_]+_schema\\\\(\\\\)[^{]*\\\\{[^}]*return\\\\s+\\\\$schema;(?![^}]*validate_utf8|[^}]*'not null')\"\n        message: \"Database schemas should enforce data integrity with proper constraints (NOT NULL, length, etc.).\"\n        \n      # Pattern 10: Insecure defaults\n      - pattern: \"\\\\$config\\\\[['\\\"](mdc:?!secure_|security_|private_)[^'\\\"]+['\\\"]\\\\]\\\\s*=\\\\s*(?:FALSE|0|'0'|\\\"0\\\");\"\n        message: \"Security-related configuration should default to secure settings (opt-in for potentially insecure features).\"\n\n  - type: suggest\n    message: |\n      **Drupal Secure Design Best Practices:**\n      \n      1. **Secure Architecture Principles:**\n         - Follow the principle of least privilege for all user roles and permissions\n         - Implement defense in depth with multiple security layers\n         - Use Drupal's entity/field API for structured data instead of custom tables\n         - Employ service-oriented architecture with proper dependency injection\n         - Follow Drupal coding standards to leverage community security expertise\n      \n      2. **Permission System Design:**\n         - Design granular permissions following the verb+object pattern\n         - Avoid creating omnipotent permissions that grant excessive access\n         - Use context-aware access systems like Entity Access or Node Grants\n         - Consider record-based and field-based access for better control\n         - Document permission architecture and security implications\n      \n      3. **Module Architecture:**\n         - Separate concerns into appropriate services\n         - Use hooks judiciously and document security implications\n         - Implement proper validation and sanitization layers\n         - Design APIs with security in mind from the start\n         - Provide secure default configurations\n      \n      4. **Data Modeling Security:**\n         - Implement appropriate validation constraints on entity fields\n         - Design schema definitions with integrity constraints\n         - Use appropriate field types for sensitive data\n         - Implement field-level access control when needed\n         - Consider encryption for sensitive stored data\n      \n      5. **Error Handling and Logging:**\n         - Design contextual error messages (detailed for admins, general for users)\n         - Implement appropriate logging for security events\n         - Avoid exposing sensitive data in error messages\n         - Design fault-tolerant systems that fail securely\n         - Include appropriate transaction management\n\n  - type: validate\n    conditions:\n      # Check 1: Proper dependency injection\n      - pattern: \"protected\\\\s+\\\\$[a-zA-Z0-9_]+;[^}]*public\\\\s+function\\\\s+__construct\\\\([^\\\\)]*\\\\)\"\n        message: \"Using proper dependency injection pattern.\"\n      \n      # Check 2: Configuration schema usage\n      - pattern: \"config\\\\/schema\\\\/[a-zA-Z0-9_]+\\\\.schema\\\\.yml\"\n        message: \"Providing configuration schema for validation.\"\n      \n      # Check 3: Proper permission definition\n      - pattern: \"\\\\$permissions\\\\[['\\\"][a-z\\\\s]+[a-z0-9\\\\s]+['\\\"]\\\\]\\\\s*=\\\\s*\\\\[\"\n        message: \"Following permission naming conventions.\"\n      \n      # Check 4: Entity access handlers\n      - pattern: \"@EntityAccessControl\\\\(|class\\\\s+[a-zA-Z0-9_]+AccessControlHandler\\\\s+extends\\\\s+\"\n        message: \"Using dedicated access control handlers for entities.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - drupal\n    - design\n    - architecture\n    - owasp\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:design\n    - standard:owasp-top10\n    - risk:a04-insecure-design\n  references:\n    - \"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\n    - \"https://www.drupal.org/docs/develop/security-in-drupal\"\n    - \"https://www.drupal.org/docs/8/api/entity-api/access-control-for-entities\"\n    - \"https://www.drupal.org/docs/8/api/configuration-api/configuration-schemametadata\"\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-insecure-design.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-insecure-design.mdc",
      "sha": "1402dc688cc1728d5fe5b7e8a77f3be47d08a9e3"
    }
  },
  {
    "name": "ivangrynenko-drupal-integrity-failures",
    "slug": "drupal-integrity-failures",
    "displayName": "Drupal Integrity Failures",
    "description": "--- description: Detect and prevent software and data integrity failures in Drupal as defined in OWASP Top 10:2021-A08 globs: *.php, *.install, *.modu",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Detect and prevent software and data integrity failures in Drupal as defined in OWASP Top 10:2021-A08\nglobs: *.php, *.install, *.module, *.inc, *.theme, *.yml, *.json\nalwaysApply: false\n---\n# Drupal Software and Data Integrity Failures Standards (OWASP A08:2021)\n\nThis rule enforces security best practices to prevent software and data integrity failures in Drupal applications, as defined in OWASP Top 10:2021-A08.\n\n<rule>\nname: drupal_integrity_failures\ndescription: Detect and prevent software and data integrity failures in Drupal as defined in OWASP Top 10:2021-A08\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|inc|module|install|theme|yml|json)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Insecure deserialization\n      - pattern: \"unserialize\\\\(\\\\$|unserialize\\\\([^,]+\\\\$|php_unserialize\\\\(\\\\$\"\n        message: \"Insecure PHP deserialization detected. Use safer alternatives like JSON for data interchange or implement proper validation before deserialization.\"\n        \n      # Pattern 2: Unsafe use of eval or similar functions\n      - pattern: \"eval\\\\(|assert\\\\(|create_function\\\\(\"\n        message: \"Potentially dangerous code execution function detected. Avoid dynamic code execution whenever possible.\"\n        \n      # Pattern 3: Insecure plugin/module loading\n      - pattern: \"module_load_include\\\\(\\\\$|require(_once)?\\\\s*\\\\(\\\\s*\\\\$|include(_once)?\\\\s*\\\\(\\\\s*\\\\$\"\n        message: \"Dynamic inclusion of files based on user input is dangerous. Use validated, allowlisted paths only.\"\n        \n      # Pattern 4: Missing update verification\n      - pattern: \"update\\\\.settings\\\\.yml|function [a-zA-Z0-9_]+_update_[0-9]+\\\\(\\\\)\"\n        message: \"Ensure update hooks validate the integrity of updates and data transformations to prevent unauthorized modifications.\"\n        \n      # Pattern 5: Unsafe configuration imports\n      - pattern: \"ConfigImporter|\\\\$config_importer|config_import|cmci\"\n        message: \"Validate configuration before import to ensure integrity and detect potentially malicious changes.\"\n        \n      # Pattern 6: Unchecked remote data\n      - pattern: \"drupal_http_request\\\\(|\\\\\\\\Drupal::httpClient\\\\(\\\\)->get\\\\(|curl_exec\\\\(\"\n        message: \"Always validate data from remote sources before processing or storing it. Implement integrity checks for remote content.\"\n        \n      # Pattern 7: Insecure Composer usage\n      - pattern: \"composer\\\\.json\"\n        message: \"Verify you're using secure Composer practices: validate package signatures, pin dependencies, and use composer.lock.\"\n        \n      # Pattern 8: Direct database modifications\n      - pattern: \"INSERT\\\\s+INTO|UPDATE\\\\s+[a-zA-Z0-9_]+\\\\s+SET|db_update\\\\(|->update\\\\(|->insert\\\\(\"\n        message: \"Direct database modifications should implement validation to preserve data integrity. Prefer using entity API.\"\n        \n      # Pattern 9: Missing file integrity verification\n      - pattern: \"file_save_data\\\\(|file_save_upload\\\\(|file_copy\\\\(|file_move\\\\(\"\n        message: \"Implement file integrity checking for uploaded or manipulated files to prevent malicious content.\"\n        \n      # Pattern 10: Unsafe entity creation\n      - pattern: \"\\\\$entity\\\\s*=\\\\s*new\\\\s+[A-Za-z]+\\\\(|::create\\\\(\\\\$\"\n        message: \"Validate all input used to create entity objects to maintain data integrity and prevent creating malicious entities.\"\n\n  - type: suggest\n    message: |\n      **Drupal Data & Software Integrity Best Practices:**\n      \n      1. **Secure Deserialization:**\n         - Avoid PHP's unserialize() with untrusted data entirely\n         - Use JSON or other structured formats for data interchange\n         - When deserialization is necessary, implement allowlists and validation\n         - Consider using Drupal's typed data API for structured data handling\n         - Avoid serializing sensitive data that could be tampered with\n      \n      2. **Update & Configuration Integrity:**\n         - Validate data before and after migrations/updates\n         - Implement checksums/hashing for critical configuration\n         - Use Drupal's Configuration Management system properly\n         - Monitor configuration changes for unauthorized modifications\n         - Implement proper workflow for configuration management\n      \n      3. **Dependency & Plugin Security:**\n         - Verify the integrity of downloaded modules and themes\n         - Use Composer with package signature verification\n         - Pin dependencies to specific versions in production\n         - Maintain awareness of security advisories\n         - Implement proper validation for plugin/module loading\n      \n      4. **CI/CD Pipeline Security:**\n         - Sign build artifacts\n         - Verify signatures during deployment\n         - Implement proper secrets management\n         - Control access to build and deployment systems\n         - Validate code changes through code reviews\n      \n      5. **Data Integrity Validation:**\n         - Use database constraints to enforce data integrity\n         - Implement validation at every layer of the application\n         - Add integrity checks for critical data flows\n         - Maintain audit logs for data modifications\n         - Regularly verify data consistency\n\n  - type: validate\n    conditions:\n      # Check 1: Secure serialization alternatives\n      - pattern: \"json_encode|json_decode|\\\\\\\\Drupal::service\\\\('serialization\\\\.|->toArray\\\\(\\\\)\"\n        message: \"Using safer serialization alternatives.\"\n      \n      # Check 2: Proper entity validation\n      - pattern: \"\\\\$entity->validate\\\\(\\\\)|\\\\$violations\\\\s*=\\\\s*\\\\$entity->validate\\\\(\\\\)\"\n        message: \"Properly validating entity data.\"\n      \n      # Check 3: Config verification\n      - pattern: \"::validateSyncedConfig\\\\(|ConfigImporter::validate|->getUnprocessedConfiguration\\\\(\\\\)\"\n        message: \"Implementing configuration validation.\"\n      \n      # Check 4: Safe file handling\n      - pattern: \"file_validate_|FileValidatorInterface|\\\\$validators\"\n        message: \"Using file validation mechanisms.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - drupal\n    - integrity\n    - deserialization\n    - owasp\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:integrity\n    - standard:owasp-top10\n    - risk:a08-integrity-failures\n  references:\n    - \"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\n    - \"https://www.drupal.org/docs/develop/security-in-drupal/drupal-8-sanitizing-output\"\n    - \"https://www.drupal.org/docs/8/api/configuration-api/configuration-api-overview\"\n    - \"https://www.drupal.org/docs/develop/using-composer\"\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-integrity-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-integrity-failures.mdc",
      "sha": "2af80047788223e10c50a7bb867bc4b6b70679f6"
    }
  },
  {
    "name": "ivangrynenko-drupal-logging-failures",
    "slug": "drupal-logging-failures",
    "displayName": "Drupal Logging Failures",
    "description": "--- description: Detect and prevent security logging and monitoring failures in Drupal as defined in OWASP Top 10:2021-A09 globs: *.php, *.install, *.",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Detect and prevent security logging and monitoring failures in Drupal as defined in OWASP Top 10:2021-A09\nglobs: *.php, *.install, *.module, *.inc, *.theme, *.yml\nalwaysApply: false\n---\n# Drupal Security Logging and Monitoring Failures Standards (OWASP A09:2021)\n\nThis rule enforces security best practices to prevent logging and monitoring failures in Drupal applications, as defined in OWASP Top 10:2021-A09.\n\n<rule>\nname: drupal_logging_failures\ndescription: Detect and prevent security logging and monitoring failures in Drupal as defined in OWASP Top 10:2021-A09\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|inc|module|install|theme|yml)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Missing critical event logging\n      - pattern: \"(delete|update|create|execute|grant|revoke|config|schema).*function[^}]*\\\\{(?![^}]*(log|watchdog|logger))\"\n        message: \"Critical operations should include logging. Implement proper logging for security-relevant actions.\"\n        \n      # Pattern 2: Suppressed error logging\n      - pattern: \"@include|@require|@eval|error_reporting\\\\(0\\\\)|ini_set\\\\(['\\\"](mdc:display_errors|log_errors)['\\\"],\\\\s*['\\\"]0['\\\"]\\\\)\"\n        message: \"Avoid suppressing errors and warnings. Implement proper error handling and logging instead.\"\n        \n      # Pattern 3: Improper exception handling without logging\n      - pattern: \"catch\\\\s*\\\\([^{]*\\\\)\\\\s*\\\\{(?![^}]*log|[^}]*watchdog|[^}]*logger)\"\n        message: \"Exceptions should be properly logged, especially in security-critical sections.\"\n        \n      # Pattern 4: Disabled watchdog\n      - pattern: \"dblog\\\\.settings\\\\.yml|syslog\\\\.settings\\\\.yml|logging\\\\.settings\\\\.yml\"\n        message: \"Ensure logging is properly configured and not disabled. Verify log verbosity and retention policies.\"\n        \n      # Pattern 5: Missing authentication event logging\n      - pattern: \"(login|authenticate|logout|password).*function[^}]*\\\\{(?![^}]*(log|watchdog|logger))\"\n        message: \"Authentication events should always be logged for security monitoring and auditing.\"\n        \n      # Pattern 6: Failure to log access control decisions\n      - pattern: \"AccessResult::(allowed|forbidden|neutral)\\\\([^)]*\\\\)(?![^;]*(log|watchdog|logger))\"\n        message: \"Consider logging significant access control decisions, especially denials, for security monitoring.\"\n        \n      # Pattern 7: Missing logging in file operations\n      - pattern: \"(file_save|file_delete|file_move|file_copy)[^;]*;(?![^;]*(log|watchdog|logger))\"\n        message: \"File operations should be logged, especially for security-sensitive files.\"\n        \n      # Pattern 8: Insufficient detail in log messages\n      - pattern: \"(\\\\->log|watchdog)\\\\([^,)]*,[^,)]*\\\\)\"\n        message: \"Log messages should include sufficient context and detail for effective security monitoring.\"\n        \n      # Pattern 9: Failure to log configuration changes\n      - pattern: \"\\\\$config->set\\\\([^;]*;(?![^;]*(log|watchdog|logger))\"\n        message: \"Configuration changes should be logged to maintain an audit trail and detect unauthorized changes.\"\n        \n      # Pattern 10: Missing logs for API access\n      - pattern: \"class\\\\s+[a-zA-Z0-9_]+Resource.+\\\\{[^}]*function\\\\s+[a-zA-Z0-9_]+\\\\([^{]*\\\\)\\\\s*\\\\{(?![^}]*(log|watchdog|logger))\"\n        message: \"API endpoint access should be logged for security monitoring, especially for sensitive operations.\"\n\n  - type: suggest\n    message: |\n      **Drupal Security Logging & Monitoring Best Practices:**\n      \n      1. **Comprehensive Logging Implementation:**\n         - Use Drupal's Logger Factory service: `\\Drupal::logger('module_name')`\n         - Implement proper log levels: emergency, alert, critical, error, warning, notice, info, debug\n         - Include context in log messages with relevant identifiers and information\n         - Log security-relevant events consistently across the application\n         - Structure log messages to facilitate automated analysis\n      \n      2. **Critical Events to Log:**\n         - Authentication events (login attempts, failures, logouts)\n         - Access control decisions (particularly denials)\n         - All administrative actions\n         - Data modification operations on sensitive information\n         - Configuration and settings changes\n         - File operations (uploads, downloads of sensitive content)\n         - API access and usage\n      \n      3. **Logging Configuration:**\n         - Configure appropriate log retention periods based on security requirements\n         - Implement log rotation to maintain performance\n         - Consider using syslog for centralized logging\n         - Protect log files from unauthorized access and modification\n         - Configure appropriate verbosity for different environments\n      \n      4. **Monitoring Implementation:**\n         - Define security-relevant log patterns to monitor\n         - Implement log aggregation and analysis\n         - Set up alerts for suspicious activity patterns\n         - Establish response procedures for security events\n         - Consider integration with SIEM solutions\n      \n      5. **Error Handling:**\n         - Log exceptions with appropriate error levels\n         - Include stack traces in development but not production\n         - Implement custom error handlers that ensure proper logging\n         - Avoid suppressing errors that might indicate security issues\n         - Monitor for patterns in error logs that could indicate attacks\n\n  - type: validate\n    conditions:\n      # Check 1: Proper logger usage\n      - pattern: \"\\\\\\\\Drupal::logger\\\\([^)]+\\\\)->\\\\w+\\\\(|\\\\$this->logger->\\\\w+\\\\(\"\n        message: \"Using Drupal's logger service correctly.\"\n      \n      # Check 2: Context in log messages\n      - pattern: \"->\\\\w+\\\\([^,]+,\\\\s*[^,]+,\\\\s*\\\\[\"\n        message: \"Including context information in log messages.\"\n      \n      # Check 3: Logging configuration\n      - pattern: \"dblog\\\\.settings|syslog\\\\.settings|logging\\\\.yml\"\n        message: \"Configuring logging appropriately.\"\n      \n      # Check 4: Exception logging\n      - pattern: \"catch[^{]*\\\\{[^}]*logger|catch[^{]*\\\\{[^}]*watchdog|catch[^{]*\\\\{[^}]*log\"\n        message: \"Properly logging exceptions.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - drupal\n    - logging\n    - monitoring\n    - owasp\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:logging\n    - standard:owasp-top10\n    - risk:a09-logging-monitoring\n  references:\n    - \"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\n    - \"https://www.drupal.org/docs/8/api/logging-api/overview\"\n    - \"https://www.drupal.org/docs/develop/security-in-drupal/writing-secure-code-for-drupal\"\n    - \"https://www.drupal.org/docs/8/modules/syslog\"\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-logging-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-logging-failures.mdc",
      "sha": "6ce9692e269365b6704a2a5928efb9a5a838029d"
    }
  },
  {
    "name": "ivangrynenko-drupal-security-misconfiguration",
    "slug": "drupal-security-misconfiguration",
    "displayName": "Drupal Security Misconfiguration",
    "description": "--- description: Detect and prevent security misconfigurations in Drupal as defined in OWASP Top 10:2021-A05 globs: *.php, *.install, *.module, *.inc,",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Detect and prevent security misconfigurations in Drupal as defined in OWASP Top 10:2021-A05\nglobs: *.php, *.install, *.module, *.inc, *.theme, *.yml, *.info\nalwaysApply: false\n---\n# Drupal Security Misconfiguration Standards (OWASP A05:2021)\n\nThis rule enforces security best practices to prevent misconfiguration vulnerabilities in Drupal applications, as defined in OWASP Top 10:2021-A05.\n\n<rule>\nname: drupal_security_misconfiguration\ndescription: Detect and prevent security misconfigurations in Drupal as defined in OWASP Top 10:2021-A05\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|inc|module|install|theme|yml|info\\\\.yml)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Development settings in production code\n      - pattern: \"\\\\$settings\\\\['update_free_access'\\\\]\\\\s*=\\\\s*TRUE|\\\\$settings\\\\['cache'\\\\]\\\\s*=\\\\s*FALSE|\\\\$settings\\\\['rebuild_access'\\\\]\\\\s*=\\\\s*TRUE|\\\\$config\\\\['system\\\\.performance'\\\\]\\\\['cache'\\\\]\\\\s*=\\\\s*FALSE\"\n        message: \"Development settings detected in production code. Ensure these settings are only enabled in development environments.\"\n        \n      # Pattern 2: Missing or weak trusted host patterns\n      - pattern: \"settings\\\\.php|settings\\\\.local\\\\.php\"\n        message: \"Verify that $settings['trusted_host_patterns'] is properly configured to prevent HTTP Host header attacks.\"\n        \n      # Pattern 3: Debugging/error display enabled\n      - pattern: \"\\\\$config\\\\['system\\\\.logging'\\\\]\\\\['error_level'\\\\]\\\\s*=\\\\s*'verbose'|ini_set\\\\('display_errors'\\\\s*,\\\\s*'1'\\\\)|error_reporting\\\\(E_ALL\\\\)\"\n        message: \"Error display should be disabled in production. Use 'hide' for error_level in production.\"\n        \n      # Pattern 4: Insecure file permissions settings\n      - pattern: \"\\\\$settings\\\\['file_chmod_directory'\\\\]\\\\s*=\\\\s*0777|\\\\$settings\\\\['file_chmod_file'\\\\]\\\\s*=\\\\s*0666\"\n        message: \"Excessively permissive file permissions detected. Use more restrictive permissions.\"\n        \n      # Pattern 5: Disabled or misconfigured CSP headers\n      - pattern: \"\\\\.htaccess|sites/default/default\\\\.settings\\\\.php\"\n        message: \"Ensure Content-Security-Policy headers are properly configured to prevent XSS attacks.\"\n        \n      # Pattern 6: Insecure session cookie settings\n      - pattern: \"session\\\\.cookie_secure\\\\s*=\\\\s*0|session\\\\.cookie_httponly\\\\s*=\\\\s*0|\\\\$settings\\\\['cookie_secure_only'\\\\]\\\\s*=\\\\s*FALSE\"\n        message: \"Session cookies should be secure and HTTP-only in production environments.\"\n        \n      # Pattern 7: Missing or misconfigured private file path\n      - pattern: \"settings\\\\.php\"\n        message: \"Ensure $settings['file_private_path'] is properly configured for storing sensitive files.\"\n        \n      # Pattern 8: Development modules enabled in production\n      - pattern: \"core\\\\.extension\\\\.yml\"\n        message: \"Check for development modules (devel, webprofiler, etc.) that should not be enabled in production.\"\n        \n      # Pattern 9: Default or demo content in production\n      - pattern: \"function\\\\s+[a-zA-Z0-9_]+_install\\\\(\\\\)\"\n        message: \"Remove or secure default/demo content and users in production environments.\"\n        \n      # Pattern 10: Missing or misconfigured security headers\n      - pattern: \"\\\\.htaccess|nginx\\\\.conf\"\n        message: \"Verify X-Frame-Options, X-Content-Type-Options, X-XSS-Protection, and Referrer-Policy headers are properly configured.\"\n\n  - type: suggest\n    message: |\n      **Drupal Security Configuration Best Practices:**\n      \n      1. **Environment-Specific Configurations:**\n         - Use `settings.local.php` for environment-specific settings\n         - Maintain separate development, staging, and production configurations\n         - Never enable development settings in production: update_free_access, rebuild_access, etc.\n         - Use environment variables or secrets management for sensitive information\n      \n      2. **Essential Security Settings:**\n         - Configure trusted_host_patterns to prevent HTTP Host header attacks\n         - Set secure file permissions (e.g., 0755 for directories, 0644 for files)\n         - Configure private file path for sensitive uploads\n         - Set file_scan_ignore_directories to prevent public access to sensitive directories\n         - Implement secure session cookie settings (HTTPOnly, Secure, SameSite)\n      \n      3. **Error Handling:**\n         - Disable verbose error reporting in production with $config['system.logging']['error_level'] = 'hide'\n         - Configure custom error pages that don't leak system information\n         - Implement appropriate logging without exposing sensitive data\n      \n      4. **Security Headers:**\n         - Set Content-Security-Policy to restrict resource origins\n         - Configure X-Frame-Options to prevent clickjacking\n         - Enable X-Content-Type-Options to prevent MIME-type sniffing\n         - Set Referrer-Policy to control information in HTTP referers\n      \n      5. **Module & Extension Security:**\n         - Disable and uninstall unnecessary modules in production\n         - Keep core and contributed modules updated\n         - Remove development modules from production (devel, webprofiler, etc.)\n         - Implement proper configuration management workflows\n\n  - type: validate\n    conditions:\n      # Check 1: Proper trusted host patterns\n      - pattern: \"\\\\$settings\\\\['trusted_host_patterns'\\\\]\\\\s*=\\\\s*\\\\[\\\\s*['\\\"][^\\\"']+['\\\"]\"\n        message: \"Trusted host patterns are properly configured.\"\n      \n      # Check 2: Secure session cookie settings\n      - pattern: \"\\\\$settings\\\\['cookie_secure_only'\\\\]\\\\s*=\\\\s*TRUE|session\\\\.cookie_secure\\\\s*=\\\\s*1\"\n        message: \"Secure cookie settings are properly configured.\"\n      \n      # Check 3: Private file path configuration\n      - pattern: \"\\\\$settings\\\\['file_private_path'\\\\]\\\\s*=\\\\s*(\\\"|')[^\\\"']+(\\\"|')\"\n        message: \"Private file path is configured for sensitive files.\"\n      \n      # Check 4: Production error settings\n      - pattern: \"\\\\$config\\\\['system\\\\.logging'\\\\]\\\\['error_level'\\\\]\\\\s*=\\\\s*'hide'\"\n        message: \"Error reporting is properly configured for production.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - drupal\n    - configuration\n    - misconfiguration\n    - owasp\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:configuration\n    - standard:owasp-top10\n    - risk:a05-misconfiguration\n  references:\n    - \"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\n    - \"https://www.drupal.org/docs/security-in-drupal/securing-your-site\"\n    - \"https://www.drupal.org/docs/security-in-drupal/drupal-security-best-practices\"\n    - \"https://www.drupal.org/docs/8/security/writing-secure-code-for-drupal-8\"\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-security-misconfiguration.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-security-misconfiguration.mdc",
      "sha": "a51b6e82ae7977fdbb2a9dc8d5ce9495f2624768"
    }
  },
  {
    "name": "ivangrynenko-drupal-ssrf",
    "slug": "drupal-ssrf",
    "displayName": "Drupal Ssrf",
    "description": "--- description: Detect and prevent Server-Side Request Forgery (SSRF) vulnerabilities in Drupal applications as defined in OWASP Top 10:2021-A10 glob",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Detect and prevent Server-Side Request Forgery (SSRF) vulnerabilities in Drupal applications as defined in OWASP Top 10:2021-A10\nglobs: *.php, *.inc, *.module, *.install, *.theme\nalwaysApply: false\n---\n# Drupal Server-Side Request Forgery Standards (OWASP A10:2021)\n\nThis rule enforces security best practices to prevent Server-Side Request Forgery (SSRF) vulnerabilities in Drupal applications, as defined in OWASP Top 10:2021-A10.\n\n<rule>\nname: drupal_ssrf\ndescription: Detect and prevent Server-Side Request Forgery (SSRF) vulnerabilities in Drupal applications as defined in OWASP Top 10:2021-A10\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|inc|module|install|theme)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Unsafe URL construction with user input\n      - pattern: \"(file_get_contents|fopen|curl_exec|drupal_http_request|\\\\$client->request|\\\\$client->get|Drupal::httpClient\\\\(\\\\)->get)\\\\s*\\\\([^)]*\\\\$_(GET|POST|REQUEST|COOKIE|SERVER|FILES)[^)]*\\\\)\"\n        message: \"Potential SSRF vulnerability: URL constructed with user input. Validate and sanitize user-supplied URL parameters before making requests.\"\n        \n      # Pattern 2: Unsafe Guzzle HTTP client usage\n      - pattern: \"GuzzleHttp\\\\\\\\Client[^;]*;[^;]*->request\\\\s*\\\\([^;]*\\\\$[^;]*\"\n        message: \"Validate and restrict URLs before making HTTP requests with Guzzle to prevent SSRF attacks.\"\n        \n      # Pattern 3: Missing URL validation before making HTTP requests\n      - pattern: \"(Http(Client|Request)|curl_exec|file_get_contents)\\\\s*\\\\([^)]*(http|\\\\$[a-zA-Z0-9_]+)[^)]*\\\\)[^;]*;(?![^;]*(valid|check|sanitize|UrlHelper))\"\n        message: \"HTTP requests should validate URLs with \\\\Drupal\\\\Component\\\\Utility\\\\UrlHelper::isValid() before execution to prevent SSRF.\"\n        \n      # Pattern 4: Unsafe URL construction with variable input\n      - pattern: \"(https?:?//|www\\\\.)\\\\s*\\\\.\\\\s*\\\\$[a-zA-Z0-9_]+\"\n        message: \"Potential SSRF vulnerability: URL being constructed with variable concatenation. Use URL validation and allowlisting.\"\n        \n      # Pattern 5: Using file system wrappers which can lead to SSRF\n      - pattern: \"file_get_contents\\\\([\\\"'](mdc:?:http|https|ftp|php|data|expect|zip|phar)://\"\n        message: \"Avoid using PHP wrappers with file operations that could lead to SSRF vulnerabilities.\"\n        \n      # Pattern 6: Bypassing local proxy settings\n      - pattern: \"CURLOPT_PROXY[^;]*none|CURLOPT_PROXY[^;]*null\"\n        message: \"Bypassing proxy settings can lead to SSRF vulnerabilities. Maintain proper proxy configurations.\"\n        \n      # Pattern 7: Unsafe processing of XML with external entities\n      - pattern: \"simplexml_load_|DOMDocument|SimpleXMLElement|xml_parse\"\n        message: \"XML processing without disabling external entities can lead to XXE and SSRF. Use libxml_disable_entity_loader(true).\"\n        \n      # Pattern 8: Accessing or using internal network IPs\n      - pattern: \"(127\\\\.0\\\\.0\\\\.1|10\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}|172\\\\.(1[6-9]|2[0-9]|3[0-1])\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}|192\\\\.168\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}|169\\\\.254\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}|localhost)\"\n        message: \"Hardcoded internal IP addresses or localhost may facilitate SSRF attacks if exposed to user manipulation.\"\n        \n      # Pattern 9: Custom Drupal HTTP client usage without validation\n      - pattern: \"\\\\\\\\Drupal::httpClient\\\\(\\\\)(?!.*[^;]*UrlHelper::isValid)\"\n        message: \"Always validate URLs with UrlHelper::isValid() before making HTTP requests with Drupal's HTTP client.\"\n        \n      # Pattern 10: Allowing unrestricted ports in HTTP requests\n      - pattern: \"curl_setopt\\\\([^,]+,\\\\s*CURLOPT_PORT,\\\\s*\\\\$[a-zA-Z0-9_]+\"\n        message: \"Potential SSRF vulnerability: Restrict allowed ports for outbound HTTP requests to prevent service probing.\"\n\n  - type: suggest\n    message: |\n      **Drupal SSRF Prevention Best Practices:**\n      \n      1. **Input Validation for URLs:**\n         - Always validate any user-supplied URL or URL components\n         - Use `\\Drupal\\Component\\Utility\\UrlHelper::isValid()` to validate URLs\n         - Implement allowlists rather than blocklists for domains/IPs\n         - Parse URLs and validate each component (protocol, domain, port, path)\n         \n      2. **Network-Level Controls:**\n         - Implement network-level access controls for internal services\n         - Use application firewalls to restrict outbound connections\n         - Configure proxies to control and monitor outbound requests\n         - Segment sensitive internal services from public-facing applications\n         \n      3. **Request Handling:**\n         - Avoid passing raw user input to HTTP clients\n         - Set reasonable timeouts for all HTTP requests\n         - Disable HTTP redirects or limit redirect chains\n         - Validate response types match expected formats\n         - Use dedicated service accounts with minimal privileges for API calls\n         \n      4. **Drupal-Specific Controls:**\n         - Utilize Drupal's built-in UrlHelper class for URL validation\n         - Configure Guzzle HTTP client with appropriate security options\n         - Consider using middleware to enforce URL validation\n         - Use Drupal's logging system to record suspicious outbound requests\n         - Implement specific content security policies\n         \n      5. **Authentication and Access Controls:**\n         - Implement proper authentication for internal service calls\n         - Use context-specific API tokens with limited privileges\n         - Avoid exposing service credentials in code or configurations\n         - Implement rate limiting for outbound requests\n\n  - type: validate\n    conditions:\n      # Check 1: Proper URL validation\n      - pattern: \"UrlHelper::isValid\\\\([^)]+\\\\)\"\n        message: \"Using proper URL validation with UrlHelper.\"\n      \n      # Check 2: Allowlisting domains\n      - pattern: \"array_intersect|in_array|allowlist|whitelist\"\n        message: \"Implementing domain/URL allowlisting for outbound requests.\"\n      \n      # Check 3: Safe XML processing\n      - pattern: \"libxml_disable_entity_loader\\\\(true\\\\)\"\n        message: \"Properly disabling XML external entities.\"\n      \n      # Check 4: Using Drupal's HTTP client safely\n      - pattern: \"\\\\\\\\Drupal::httpClient\\\\(\\\\)[^;]*\\\\$options\"\n        message: \"Using Drupal's HTTP client with explicit options.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - drupal\n    - ssrf\n    - owasp\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:ssrf\n    - standard:owasp-top10\n    - risk:a10-ssrf\n  references:\n    - \"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\"\n    - \"https://cwe.mitre.org/data/definitions/918.html\"\n    - \"https://www.drupal.org/docs/develop/security-in-drupal/writing-secure-code-for-drupal\"\n    - \"https://portswigger.net/web-security/ssrf\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-ssrf.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-ssrf.mdc",
      "sha": "c48453de2ead667bf460f3fe9d5e8d7693a28c78"
    }
  },
  {
    "name": "ivangrynenko-drupal-vulnerable-components",
    "slug": "drupal-vulnerable-components",
    "displayName": "Drupal Vulnerable Components",
    "description": "Drupal Vulnerable Components cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Detect and prevent vulnerabilities related to outdated or vulnerable components in Drupal as defined in OWASP Top 10:2021-A06\nglobs: *.php, *.install, *.module, *.inc, *.theme, *.yml, *.info\nalwaysApply: false\n---\n# Drupal Vulnerable and Outdated Components Standards (OWASP A06:2021)\n\nThis rule enforces security best practices to prevent vulnerabilities related to outdated or vulnerable components in Drupal applications, as defined in OWASP Top 10:2021-A06.\n\n<rule>\nname: drupal_vulnerable_components\ndescription: Detect and prevent vulnerabilities related to outdated or vulnerable components in Drupal as defined in OWASP Top 10:2021-A06\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|inc|module|install|info\\\\.yml|json)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Outdated Drupal core version declaration\n      - pattern: \"core:\\\\s*('|\\\")8\\\\.[0-6](mdc:'|\\\")|core_version_requirement:\\\\s*('|\\\")[^9].+('|\\\")\"\n        message: \"Potentially outdated Drupal core version detected. Consider upgrading to the latest secure version of Drupal 9 or 10.\"\n        \n      # Pattern 2: Usage of deprecated functions\n      - pattern: \"drupal_set_message\\\\(|format_date\\\\(|drupal_render\\\\(|entity_load\\\\(|variable_get\\\\(|variable_set\\\\(\"\n        message: \"Deprecated function detected. Use modern replacements to ensure compatibility and security updates.\"\n        \n      # Pattern 3: Known vulnerable libraries referenced\n      - pattern: \"jquery\\\\.min\\\\.js\\\\?v=1\\\\.|jquery-1\\\\.|jquery-2\\\\.|ckeditor/|tinymce/|angular\\\\.js@1\\\\.\"\n        message: \"Potentially vulnerable JavaScript library version detected. Update to the latest secure version.\"\n        \n      # Pattern 4: Direct inclusion of external scripts without SRI\n      - pattern: \"<script\\\\s+src=['\\\"]http|<script\\\\s+src=['\\\"]//|<link\\\\s+[^>]*href=['\\\"]http\"\n        message: \"External scripts or stylesheets without Subresource Integrity (SRI) checks detected. Add integrity and crossorigin attributes.\"\n        \n      # Pattern 5: Use of obsolete or removed modules\n      - pattern: \"module:\\\\s*('[^']*captcha'|'recaptcha'|'xmlrpc'|'openid'|'php')\"\n        message: \"Potentially vulnerable or deprecated module detected. Consider using more secure alternatives.\"\n        \n      # Pattern 6: Hard-coded versions in composer.json\n      - pattern: \"\\\"drupal/[^\\\"]+\\\":\\\\s*\\\"(~|\\\\^)?[0-9]\\\\.[0-9]\\\\.[0-9]\\\"\" \n        message: \"Hard-coded specific version detected in composer.json. Consider using version ranges to receive security updates.\"\n        \n      # Pattern 7: Outdated or insecure PHP API usage\n      - pattern: \"mysql_|split\\\\(|ereg\\\\(|eregi\\\\(|create_function\\\\(|each\\\\(\"\n        message: \"Deprecated or insecure PHP function detected. Use modern alternatives for better security.\"\n        \n      # Pattern 8: Usage of contrib modules without version constraints\n      - pattern: \"type:\\\\s*module\\\\s*\\\\nname:\"\n        message: \"Ensure your module specifies core_version_requirement to prevent installation on unsupported Drupal versions.\"\n        \n      # Pattern 9: Missing security advisories handling in composer.json\n      - pattern: \"composer\\\\.json\"\n        message: \"Consider adding drupal/core-security-advisories as a dev dependency to detect known vulnerable packages.\"\n        \n      # Pattern 10: Direct usage of vulnerable sanitization functions\n      - pattern: \"check_plain\\\\(|filter_xss\\\\(|filter_xss_admin\\\\(\"\n        message: \"Legacy text sanitization function detected. Use Html::escape() or Xss::filter() instead.\"\n\n  - type: suggest\n    message: |\n      **Drupal Component Security Best Practices:**\n      \n      1. **Update Management:**\n         - Keep Drupal core updated to the latest secure version\n         - Subscribe to the Drupal Security Newsletter\n         - Implement a regular update schedule (monthly at minimum)\n         - Use security advisories checking in your development workflow\n         - Implement Composer's security-advisories metadata\n      \n      2. **Dependency Management:**\n         - Use Composer for managing all dependencies\n         - Specify version constraints that allow security updates\n         - Add drupal/core-security-advisories as a dev dependency\n         - Regularly run `composer update --with-dependencies`\n         - Use `composer outdated` to identify outdated packages\n      \n      3. **API Usage:**\n         - Use modern Drupal APIs rather than deprecated functions\n         - Migrate away from jQuery to modern JavaScript where possible\n         - Implement Subresource Integrity (SRI) for external resources\n         - Update custom code to use current best practices\n         - Follow the Drupal API deprecation policies\n      \n      4. **Security Monitoring:**\n         - Implement automated vulnerability scanning in CI/CD\n         - Use tools like Drupal Check or Upgrade Status module\n         - Monitor the Drupal security advisories page\n         - Implement automated updates for non-critical dependencies\n         - Set up alerts for security issues in used components\n      \n      5. **Module Management:**\n         - Remove unused modules from your codebase\n         - Prefer well-maintained modules with security teams\n         - Implement proper version constraints in module info files\n         - Consider the security impact before adding new dependencies\n         - Document your dependency management practices\n\n  - type: validate\n    conditions:\n      # Check 1: Proper core version requirement\n      - pattern: \"core_version_requirement:\\\\s*[\\\"']\\\\^(8\\\\.8|8\\\\.9|9|10)\\\\.[0-9]+[\\\"']\"\n        message: \"Using proper core version requirements.\"\n      \n      # Check 2: Use of modern APIs\n      - pattern: \"\\\\\\\\Drupal::messenger\\\\(\\\\)|->messenger\\\\(\\\\)|\\\\\\\\Drupal::service\\\\('messenger'\\\\)\"\n        message: \"Using modern message API instead of deprecated functions.\"\n      \n      # Check 3: Proper composer usage\n      - pattern: \"\\\"require\\\":\\\\s*\\\\{[^}]*\\\"drupal/core(-recommended)?\\\":\\\\s*\\\"\\\\^[0-9]+\\\\.[0-9]+\\\"\"\n        message: \"Using proper version constraints in Composer.\"\n      \n      # Check 4: SRI implementation\n      - pattern: \"integrity=[\\\"'][a-zA-Z0-9\\\\+/=\\\\-_]+[\\\"']\\\\s+crossorigin=[\\\"']anonymous[\\\"']\"\n        message: \"Properly implementing Subresource Integrity.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - drupal\n    - dependencies\n    - vulnerable-components\n    - owasp\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:dependencies\n    - standard:owasp-top10\n    - risk:a06-vulnerable-components\n  references:\n    - \"https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/\"\n    - \"https://www.drupal.org/docs/security-in-drupal/staying-up-to-date\"\n    - \"https://www.drupal.org/docs/upgrading-drupal\"\n    - \"https://www.drupal.org/docs/develop/using-composer/managing-dependencies-for-a-drupal-project\"\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/drupal-vulnerable-components.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/drupal-vulnerable-components.mdc",
      "sha": "96975a7879032112238a3022b0e44f9c24f9260b"
    }
  },
  {
    "name": "ivangrynenko-generic-bash-style",
    "slug": "generic-bash-style",
    "displayName": "Generic_bash_style",
    "description": "--- description: Enforce general Bash scripting standards with enhanced logging globs:",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Enforce general Bash scripting standards with enhanced logging\nglobs: \n---\n# Enhanced Bash Scripting Standard with Colorized Logging\n\nThis rule enforces best practices for writing Bash scripts, with an emphasis on using colorized logging for better output readability.\n\n<rule>\nname: enhanced_bash_style\ndescription: Enforce Bash scripting standards with colorized logging\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.sh$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"^#!/usr/bin/env bash$\"\n        message: \"All scripts should start with the shebang '#!/usr/bin/env bash'.\"\n\n      - pattern: \"^set -eu$\"\n        message: \"Enable 'set -eu' for script robustness.\"\n\n      - pattern: \"^set -x$\"\n        pattern_negate: \"^\\\\[ \\\"\\\\${DEBUG-}\\\" = \\\"1\\\" ] && set -x$\"\n        message: \"Use conditional 'set -x' based on debug flag.\"\n\n      - pattern: \"^# @formatter:off$\"\n        message: \"Start of formatting block for log functions.\"\n\n      - pattern: \"note\\\\(\\\\) { printf \\\"       %s\\\\n\\\" \\\"\\\\${1}\\\"; }$\"\n        message: \"Include 'note' function for plain messages.\"\n\n      - pattern: \"info\\\\(\\\\) { \\\\[ \\\"\\\\${TERM:-}\\\" != \\\"dumb\\\" ] && tput colors >/dev/null 2>&1 && printf \\\"\\\\\\\\033\\\\[34m\\\\[INFO] %s\\\\\\\\033\\\\[0m\\\\n\\\" \\\"\\\\${1}\\\" || printf \\\"\\\\[INFO] %s\\\\n\\\" \\\"\\\\${1}\\\"; }$\"\n        message: \"Include 'info' function for blue informational messages.\"\n\n      - pattern: \"pass\\\\(\\\\) { \\\\[ \\\"\\\\${TERM:-}\\\" != \\\"dumb\\\" ] && tput colors >/dev/null 2>&1 && printf \\\"\\\\\\\\033\\\\[32m\\\\[ OK ] %s\\\\\\\\033\\\\[0m\\\\n\\\" \\\"\\\\${1}\\\" || printf \\\"\\\\[ OK ] %s\\\\n\\\" \\\"\\\\${1}\\\"; }$\"\n        message: \"Include 'pass' function for green success messages.\"\n\n      - pattern: \"fail\\\\(\\\\) { \\\\[ \\\"\\\\${TERM:-}\\\" != \\\"dumb\\\" ] && tput colors >/dev/null 2>&1 && printf \\\"\\\\\\\\033\\\\[31m\\\\[FAIL] %s\\\\\\\\033\\\\[0m\\\\n\\\" \\\"\\\\${1}\\\" || printf \\\"\\\\[FAIL] %s\\\\n\\\" \\\"\\\\${1}\\\"; }$\"\n        message: \"Include 'fail' function for red error messages.\"\n\n      - pattern: \"warn\\\\(\\\\) { \\\\[ \\\"\\\\${TERM:-}\\\" != \\\"dumb\\\" ] && tput colors >/dev/null 2>&1 && printf \\\"\\\\\\\\033\\\\[33m\\\\[WARN] %s\\\\\\\\033\\\\[0m\\\\n\\\" \\\"\\\\${1}\\\" || printf \\\"\\\\[WARN] %s\\\\n\\\" \\\"\\\\${1}\\\"; }$\"\n        message: \"Include 'warn' function for yellow warning messages.\"\n\n      - pattern: \"^# @formatter:on$\"\n        message: \"End of formatting block for log functions.\"\n\n  - type: suggest\n    message: |\n      **Bash Scripting Best Practices:**\n      - **Error Handling:** Use `set -eu` to catch errors and undefined variables early.\n      - **Debugging:** Implement conditional debugging with `set -x` using a DEBUG variable.\n      - **Logging Functions:** Use colorized logging for better script output readability:\n        - `note()` for plain notes\n        - `info()` for blue informational messages\n        - `pass()` for green success messages\n        - `fail()` for red error messages\n        - `warn()` for yellow warnings, ensuring users can distinguish different types of messages easily\n      - **Security:** Avoid using `eval` or similar constructs; use safe alternatives.\n      - **Documentation:** Include descriptive comments, especially for complex logic.\n      - **Portability:** Use `/usr/bin/env bash` for the shebang to ensure script runs with bash on any system.\n      - **Variable Checks:** Ensure necessary variables are set, enhancing script reliability.\n      - **Exit Codes:** Use explicit exit codes for different failure scenarios.\n      - **Color Support:** Ensure logging functions check for terminal color support before applying colors.\n\nmetadata:\n  priority: medium\n  version: 1.1\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/generic_bash_style.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/generic_bash_style.mdc",
      "sha": "45f08a8103c435464570d131121c645ca079d4b5"
    }
  },
  {
    "name": "ivangrynenko-git-commit-standards",
    "slug": "git-commit-standards",
    "displayName": "Git Commit Standards",
    "description": "--- description: Enforce structured Git commit messages. globs: .git/*",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Enforce structured Git commit messages.\nglobs: .git/*\n---\n# Git Commit Standards\n\nEnsures consistent Git commit messages.\n\n<rule>\nname: git_commit_standards\ndescription: Enforce structured Git commit messages.\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.git/.*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # More precise regex to ensure prefix is followed by colon and space\n      - pattern: \"^(?!fix|feat|perf|docs|style|refactor|test|chore): \"\n        message: \"Use a commit message prefix followed by colon and space (fix:, feat:, etc.).\"\n\n      # Check for uppercase after the prefix\n      - pattern: \"^(fix|feat|perf|docs|style|refactor|test|chore): [A-Z]\"\n        message: \"First word after prefix should be lowercase.\"\n\n      # More precise length check that excludes the prefix from the count\n      - pattern: \"^(fix|feat|perf|docs|style|refactor|test|chore): .{46,}\"\n        message: \"Keep commit message content (excluding prefix) under 46 characters.\"\n\n      # Ensure there's a space after the colon\n      - pattern: \"^(fix|feat|perf|docs|style|refactor|test|chore):(?! )\"\n        message: \"Include a space after the colon in prefix.\"\n\n  - type: suggest\n    message: |\n      Recommended commit format:\n      - \"fix: resolved bug in user authentication\"\n      - \"feat: added new search functionality\"\n      - \"docs: updated installation guide\"\n      - \"style: fixed button alignment\"\n      - \"refactor: simplified login logic\"\n      - \"test: added unit tests for auth\"\n      - \"chore: updated dependencies\"\n      - \"perf: optimized database queries\"\n\nmetadata:\n  priority: high\n  version: 1.1\n</rule>\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/git-commit-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/git-commit-standards.mdc",
      "sha": "ace1472e6e8f42b31dd2462c6af0565846b56102"
    }
  },
  {
    "name": "ivangrynenko-github-actions-standards",
    "slug": "github-actions-standards",
    "displayName": "Github Actions Standards",
    "description": "--- description:  globs: .github/workflows/*.yml",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: \nglobs: .github/workflows/*.yml\nalwaysApply: false\n---\n # GitHub Actions Standards\n\nEnsures GitHub Actions workflows follow best practices and use the latest action versions.\n\n<rule>\nname: github_actions_standards\ndescription: Enforce standards for GitHub Actions workflows\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.ya?ml$\"\n  - type: file_path\n    pattern: \"\\\\.github/workflows/\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"uses:\\\\s*actions/upload-artifact@v[123]\"\n        message: \"Use actions/upload-artifact@v4 instead of older versions. Version 3 is deprecated: https://github.blog/changelog/2024-04-16-deprecation-notice-v3-of-the-artifact-actions/\"\n\n      - pattern: \"uses:\\\\s*actions/download-artifact@v[123]\"\n        message: \"Use actions/download-artifact@v4 instead of older versions.\"\n\n      - pattern: \"uses:\\\\s*actions/checkout@v[12]\"\n        message: \"Consider using actions/checkout@v4 for the latest features and security updates.\"\n\n  - type: suggest\n    message: |\n      **GitHub Actions Best Practices:**\n      - **Latest Action Versions:** Always use the latest stable versions of GitHub Actions.\n        - `actions/checkout@v4`\n        - `actions/upload-artifact@v4`\n        - `actions/download-artifact@v4`\n        - `actions/setup-node@v4`\n        - `actions/setup-python@v5`\n      - **Workflow Structure:** Organize workflows with clear job names and step descriptions.\n      - **Caching:** Implement caching for dependencies to speed up workflows.\n      - **Security:** Use `GITHUB_TOKEN` with minimum required permissions.\n      - **Artifacts:** Use descriptive names for artifacts and set appropriate retention periods.\n      - **Matrix Strategy:** Use matrix builds for testing across multiple environments.\n      - **Timeouts:** Set appropriate timeouts for jobs to prevent hanging workflows.\n\n  - type: validate\n    conditions:\n      - pattern: \"uses:\\\\s*actions/upload-artifact@v4\"\n        message: \"Good job using the latest version of actions/upload-artifact!\"\n\n      - pattern: \"uses:\\\\s*actions/download-artifact@v4\"\n        message: \"Good job using the latest version of actions/download-artifact!\"\n\n      - pattern: \"uses:\\\\s*actions/checkout@v[34]\"\n        message: \"Good job using a recent version of actions/checkout!\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - ci/cd\n    - github\n    - automation\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/github-actions-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/github-actions-standards.mdc",
      "sha": "37abb6e664b0f17b8920edcfcf3f217394b51e55"
    }
  },
  {
    "name": "ivangrynenko-improve-cursorrules-efficiency",
    "slug": "improve-cursorrules-efficiency",
    "displayName": "Improve Cursorrules Efficiency",
    "description": "--- description: AI Query Efficiency & Auto-Optimization globs: *.mdc",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: AI Query Efficiency & Auto-Optimization\nglobs: *.mdc\n---\n# AI Query Efficiency & Auto-Optimization\n\nEnsures Cursor analyzes AI query efficiency, detects repeated requests, and automatically updates relevant rules to improve response quality and reduce redundancy.\n\n<rule>\nname: ai_query_efficiency_optimization\ndescription: Analyze AI query efficiency, optimize rules, and prevent repeated requests.\nfilters:\n  # Match AI query interactions in supported files\n  - type: file_extension\n    pattern: \"\\\\.(md|mdc|txt|json|py|js|ts|php|yaml|yml|cursorrules)$\"\n  # Match AI communication patterns indicating inefficiency or repetition\n  - type: content\n    pattern: \"(?i)(retry|again|didn't work|not what I expected|try another way|improve|fix this|optimize|rewrite|regenerate)\"\n\nactions:\n  - type: analyze\n    conditions:\n      - pattern: \"(?i)(retry|again|fix this|not what I expected|didn't work|rewrite|regenerate)\"\n        message: \"Detected inefficiencies or repeated requests. Initiating efficiency analysis...\"\n    execute: |\n      - **Identify inefficiencies** in AI responses by comparing previous queries and results.\n      - **Suggest improvements** in query structure or Cursor usage based on analysis:\n        - Use more specific or detailed prompts.\n        - Implement structured queries for complex tasks.\n        - Provide feedback on past responses for better contextual understanding.\n        - Break down complex tasks into smaller, more manageable steps.\n        - Use specific technical terminology for clearer communication.\n      - **Automatically update** relevant Cursor rules:\n        - Enhance pattern recognition for similar future queries.\n        - Adjust rule priorities or conditions to prevent repeat inefficiencies.\n        - Update rule suggestions to guide users towards more effective interactions.\n        - Create new rules for frequently encountered patterns.\n\n  - type: suggest\n    message: |\n      ## Query Optimization Recommendations\n\n      I notice you're making multiple requests for similar tasks. Here's how to optimize your AI interactions:\n\n      ### 1. Refine Your Prompts\n      - **Be more specific:** Include technical details, file paths, and exact requirements\n      - **Use structured formats:** For complex requests, use bullet points or numbered lists\n      - **Include context:** Mention relevant technologies, frameworks, or standards\n      - **Set clear expectations:** Specify the format and level of detail you need\n\n      ### 2. Break Down Complex Tasks\n      - Split large tasks into smaller, focused requests\n      - Ask for step-by-step approaches for complex problems\n      - Request specific examples for unclear concepts\n\n      ### 3. Provide Feedback\n      - Tell the AI what worked and what didn't in previous responses\n      - Clarify misunderstandings explicitly\n      - Highlight successful parts of previous responses\n\n      ### 4. Use Technical Terminology\n      - Use precise technical terms for your domain (Drupal, Lagoon, etc.)\n      - Reference specific functions, methods, or patterns\n      - Mention relevant standards or best practices\n\n      ### 5. Leverage Cursor Features\n      - Use file references when discussing specific code\n      - Reference line numbers for targeted changes\n      - Utilize code blocks for examples\n\n      The system will now optimize rules based on this interaction pattern to improve future responses.\n\n  - type: auto_update\n    target: \".cursor/rules/ai-optimization.mdc\"\n    conditions:\n      - pattern: \"(?i)(retry|again|fix this|not what I expected|not what I meant|didn't work|rewrite|regenerate)\"\n    message: \"Updating AI efficiency rules based on detected inefficiencies or repeated queries.\"\n\n  - type: log\n    message: \"AI Query Efficiency Analysis: [{{query_count}} queries in {{time_period}} detected inefficiency.]\"\n    conditions:\n      - pattern: \"(?i)(retry|again|fix this|not what I expected|didn't work|rewrite|regenerate)\"\n\nexamples:\n  - input: |\n      \"This Drupal module is not working, let's try again.\"\n      \"That didn't work, let's refine the approach.\"\n      \"Please rewrite this code to be more efficient.\"\n    output: |\n      Cursor detects inefficiency in queries and suggests:\n      \n      \"I notice you're making multiple attempts. To get better results:\n      1. Specify which part of the module isn't working\n      2. Include any error messages you're seeing\n      3. Mention the Drupal version and relevant modules\n      4. Describe what you've already tried\"\n\n  - input: |\n      \"Generate a Lagoon configuration file.\"\n      \"This doesn't look right, regenerate it.\"\n      \"Try again with better practices.\"\n    output: |\n      Cursor detects repetition and suggests:\n      \n      \"For better Lagoon configuration results:\n      1. Specify which services you need (nginx, php, mariadb, etc.)\n      2. Mention your project type (Drupal, WordPress, etc.)\n      3. Include any specific environment requirements\n      4. Reference any existing configuration you want to maintain\"\n\nmetadata:\n  priority: critical\n  version: 1.2\n</rule>\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/improve-cursorrules-efficiency.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/improve-cursorrules-efficiency.mdc",
      "sha": "b182364688c2bdebbd768215a4f93831aba14f61"
    }
  },
  {
    "name": "ivangrynenko-javascript-broken-access-control",
    "slug": "javascript-broken-access-control",
    "displayName": "Javascript Broken Access Control",
    "description": "Javascript Broken Access Control cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Detect and prevent broken access control patterns in JavaScript applications as defined in OWASP Top 10:2021-A01\nglobs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**\n---\n# JavaScript Broken Access Control (OWASP A01:2021)\n\nThis rule identifies and prevents broken access control vulnerabilities in JavaScript applications, focusing on both browser and Node.js environments, as defined in OWASP Top 10:2021-A01.\n\n<rule>\nname: javascript_broken_access_control\ndescription: Detect and prevent broken access control patterns in JavaScript applications as defined in OWASP Top 10:2021-A01\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Detect Direct Reference to User-Supplied IDs (IDOR vulnerability)\n      - pattern: \"(?:req|request)\\\\.(?:params|query|body)\\\\.(?:id|userId|recordId)[^\\\\n]*?(?:findById|getById|find\\\\(|get\\\\()\"\n        message: \"Potential Insecure Direct Object Reference (IDOR) vulnerability. User-supplied IDs should be validated against user permissions before database access.\"\n        \n      # Pattern 2: Detect Missing Authorization Checks in Route Handlers\n      - pattern: \"(?:app|router)\\\\.(?:get|post|put|delete|patch)\\\\(['\\\"][^'\\\"]+['\\\"],\\\\s*(?:async)?\\\\s*\\\\(?(?:req|request),\\\\s*(?:res|response)(?:,[^\\\\)]+)?\\\\)?\\\\s*=>\\\\s*\\\\{[^\\\\}]*?\\\\}\\\\)\"\n        negative_pattern: \"(?:isAuthenticated|isAuthorized|checkPermission|verifyAccess|auth\\\\.check|authenticate|authorize|userHasAccess|checkAuth|permissions\\\\.|requireAuth|requiresAuth|ensureAuth|\\\\bauth\\\\b|\\\\broles?\\\\b|\\\\bpermission\\\\b|\\\\baccess\\\\b)\"\n        message: \"Route handler appears to be missing authorization checks. Implement proper access control to verify user permissions before processing requests.\"\n        \n      # Pattern 3: Detect JWT Token Validation Issues\n      - pattern: \"(?:jwt|jsonwebtoken)\\\\.verify\\\\((?:[^,]+),\\\\s*['\\\"]((?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?)['\\\"]\"\n        message: \"Hardcoded JWT secret detected. Store JWT secrets securely in environment variables or a configuration manager.\"\n        \n      # Pattern 4: Detect Client-Side Authorization Checks\n      - pattern: \"if\\\\s*\\\\((?:user|currentUser)\\\\.(?:role|isAdmin|hasPermission|can[A-Z][a-zA-Z]+|is[A-Z][a-zA-Z]+)\\\\)\\\\s*\\\\{[^\\\\}]*?(?:fetch|axios|\\\\$\\\\.ajax|http\\\\.get|http\\\\.post)\\\\([^\\\\)]*?\\\\)\"\n        message: \"Authorization logic implemented on client-side. Client-side authorization checks can be bypassed. Always enforce authorization on the server.\"\n        \n      # Pattern 5: Detect Improper CORS Configuration\n      - pattern: \"(?:app\\\\.use\\\\(cors\\\\(\\\\{[^\\\\}]*?origin:\\\\s*['\\\"]\\\\*['\\\"])|Access-Control-Allow-Origin:\\\\s*['\\\"]\\\\*['\\\"]\"\n        message: \"Wildcard CORS policy detected. This allows any domain to make cross-origin requests. Restrict CORS to specific trusted domains.\"\n        \n      # Pattern 6: Detect Lack of Role Checks in Admin Functions\n      - pattern: \"(?:function|const)\\\\s+(?:admin|updateUser|deleteUser|createUser|updateRole|manageUsers|setPermission)[^\\\\{]*?\\\\{[^\\\\}]*?\\\\}\"\n        negative_pattern: \"(?:role|permission|isAdmin|hasAccess|authorize|authenticate|auth\\\\.check|checkPermission|checkRole|verifyRole|ensureAdmin|adminOnly|adminRequired|requirePermission)\"\n        message: \"Administrative function appears to be missing role or permission checks. Implement proper authorization checks to restrict access to administrative functions.\"\n        \n      # Pattern 7: Detect Missing Login Rate Limiting\n      - pattern: \"(?:function|const)\\\\s+(?:login|signin|authenticate|auth)[^\\\\{]*?\\\\{[^\\\\}]*?(?:compare(?:Sync)?|check(?:Password)?|match(?:Password)?|verify(?:Password)?)[^\\\\}]*?\\\\}\"\n        negative_pattern: \"(?:rate(?:Limit)?|throttle|limit|delay|cooldown|attempt|counter|maxTries|maxAttempts|lockout|timeout)\"\n        message: \"Login function appears to be missing rate limiting. Implement rate limiting to prevent brute force attacks.\"\n        \n      # Pattern 8: Detect Horizontal Privilege Escalation Vulnerability\n      - pattern: \"(?:findById|findOne|findByPk|get)\\\\((?:req|request)\\\\.(?:params|query|body)\\\\.(?:id|userId|accountId)\\\\)\"\n        negative_pattern: \"(?:!=|!==|===|==)\\\\s*(?:req\\\\.user\\\\.id|req\\\\.userId|currentUser\\\\.id|user\\\\.id|session\\\\.userId)\"\n        message: \"Potential horizontal privilege escalation vulnerability. Ensure the requested resource belongs to the authenticated user.\"\n        \n      # Pattern 9: Detect Missing CSRF Protection\n      - pattern: \"(?:app|router)\\\\.(?:post|put|delete|patch)\\\\(['\\\"][^'\\\"]+['\\\"]\"\n        negative_pattern: \"(?:csrf|xsrf|csurf|csrfProtection|antiForgery|csrfToken|csrfMiddleware)\"\n        message: \"Route may be missing CSRF protection. Implement CSRF tokens for state-changing operations to prevent cross-site request forgery attacks.\"\n        \n      # Pattern 10: Detect Bypassing Access Control with Path Traversal\n      - pattern: \"(?:fs|require)(?:\\\\.promises)?\\\\.(read|open|access|stat)(?:File|Sync)?\\\\([^\\\\)]*?(?:req|request)\\\\.(?:params|query|body|path)\\\\.[^\\\\)]*?\\\\)\"\n        negative_pattern: \"(?:normalize|resolve|sanitize|validate|pathValidation|checkPath)\"\n        message: \"Potential path traversal vulnerability in file access. Validate and sanitize user-supplied paths to prevent directory traversal attacks.\"\n        \n      # Pattern 11: Detect Missing Authentication Middleware\n      - pattern: \"(?:new\\\\s+)?express\\\\(\\\\)|(?:import|require)\\\\(['\\\"]express['\\\"]\\\\)\"\n        negative_pattern: \"(?:app\\\\.use\\\\((?:passport|auth|jwt|session|authenticate)|passport\\\\.authenticate|express-session|express-jwt|jsonwebtoken|requiresAuth|\\\\bauth\\\\b)\"\n        message: \"Express application may be missing authentication middleware. Implement proper authentication to secure your application.\"\n        \n      # Pattern 12: Detect Insecure Cookie Settings\n      - pattern: \"(?:res\\\\.cookie|cookie\\\\.set|cookies\\\\.set|document\\\\.cookie)\\\\([^\\\\)]*?\\\\)\"\n        negative_pattern: \"(?:secure:\\\\s*true|httpOnly:\\\\s*true|sameSite|expires|maxAge)\"\n        message: \"Cookies appear to be set without security attributes. Set the secure, httpOnly, and sameSite attributes for sensitive cookies.\"\n      \n      # Pattern 13: Detect Hidden Form Fields for Access Control\n      - pattern: \"<input[^>]*?type=['\\\"]hidden['\\\"][^>]*?(?:(?:name|id)=['\\\"](?:admin|role|isAdmin|access|permission|privilege)['\\\"])\"\n        message: \"Hidden form fields used for access control. Never rely on hidden form fields for access control decisions as they can be easily manipulated.\"\n        \n      # Pattern 14: Detect Client-Side Access Control Routing\n      - pattern: \"(?:isAdmin|hasRole|hasPermission|userCan|canAccess)\\\\s*\\\\?\\\\s*<(?:Route|Navigate|Link|Redirect)\"\n        message: \"Client-side conditional routing based on user roles detected. Always enforce access control on the server side as client-side checks can be bypassed.\"\n        \n      # Pattern 15: Detect Access Control based on URL Parameters\n      - pattern: \"if\\\\s*\\\\((?:req|request)\\\\.(?:query|params)\\\\.(?:admin|mode|access|role|type)\\\\s*===?\\\\s*['\\\"](?:admin|true|1|superuser|manager)['\\\"]\\\\)\"\n        message: \"Access control based on URL parameters detected. Never use request parameters for access control decisions as they can be easily manipulated.\"\n\n  - type: suggest\n    message: |\n      **JavaScript Access Control Best Practices:**\n      \n      1. **Implement Server-Side Access Control**\n         - Never rely solely on client-side access control\n         - Use middleware to enforce authorization\n         - Example Express.js middleware:\n           ```javascript\n           // Role-based access control middleware\n           function requireRole(role) {\n             return (req, res, next) => {\n               if (!req.user) {\n                 return res.status(401).json({ error: 'Authentication required' });\n               }\n               \n               if (!req.user.roles.includes(role)) {\n                 return res.status(403).json({ error: 'Insufficient permissions' });\n               }\n               \n               next();\n             };\n           }\n           \n           // Usage in routes\n           app.get('/admin/users', requireRole('admin'), (req, res) => {\n             // Handle admin-only route\n           });\n           ```\n      \n      2. **Implement Proper Authentication**\n         - Use established authentication libraries\n         - Implement multi-factor authentication for sensitive operations\n         - Example with Passport.js:\n           ```javascript\n           const passport = require('passport');\n           const JwtStrategy = require('passport-jwt').Strategy;\n           \n           passport.use(new JwtStrategy(jwtOptions, async (payload, done) => {\n             try {\n               const user = await User.findById(payload.sub);\n               if (!user) {\n                 return done(null, false);\n               }\n               return done(null, user);\n             } catch (error) {\n               return done(error, false);\n             }\n           }));\n           \n           // Protect routes\n           app.get('/protected', \n             passport.authenticate('jwt', { session: false }),\n             (req, res) => {\n               res.json({ success: true });\n             }\n           );\n           ```\n      \n      3. **Implement Proper Authorization**\n         - Use attribute or role-based access control\n         - Check permissions for each protected resource\n         - Example:\n           ```javascript\n           // Permission-based middleware\n           function checkPermission(permission) {\n             return async (req, res, next) => {\n               try {\n                 // Get user permissions from database\n                 const userPermissions = await getUserPermissions(req.user.id);\n                 \n                 if (!userPermissions.includes(permission)) {\n                   return res.status(403).json({ error: 'Permission denied' });\n                 }\n                 \n                 next();\n               } catch (error) {\n                 next(error);\n               }\n             };\n           }\n           \n           // Usage\n           app.post('/articles', \n             authenticate,\n             checkPermission('article:create'), \n             (req, res) => {\n               // Create article\n             }\n           );\n           ```\n      \n      4. **Protect Against Insecure Direct Object References (IDOR)**\n         - Validate that the requested resource belongs to the user\n         - Use indirect references or access control lists\n         - Example:\n           ```javascript\n           app.get('/documents/:id', authenticate, async (req, res) => {\n             try {\n               const document = await Document.findById(req.params.id);\n               \n               // Check if document exists\n               if (!document) {\n                 return res.status(404).json({ error: 'Document not found' });\n               }\n               \n               // Check if user owns the document or has access\n               if (document.userId !== req.user.id && \n                   !(await userHasAccess(req.user.id, document.id))) {\n                 return res.status(403).json({ error: 'Access denied' });\n               }\n               \n               res.json(document);\n             } catch (error) {\n               res.status(500).json({ error: error.message });\n             }\n           });\n           ```\n      \n      5. **Implement Proper CORS Configuration**\n         - Never use wildcard (*) in production\n         - Whitelist specific trusted origins\n         - Example:\n           ```javascript\n           const cors = require('cors');\n           \n           const corsOptions = {\n             origin: ['https://trusted-app.com', 'https://admin.trusted-app.com'],\n             methods: ['GET', 'POST', 'PUT', 'DELETE'],\n             allowedHeaders: ['Content-Type', 'Authorization'],\n             credentials: true,\n             maxAge: 86400 // 24 hours\n           };\n           \n           app.use(cors(corsOptions));\n           ```\n      \n      6. **Implement CSRF Protection**\n         - Use anti-CSRF tokens for state-changing operations\n         - Validate the token on the server\n         - Example with csurf:\n           ```javascript\n           const csrf = require('csurf');\n           \n           // Setup CSRF protection\n           const csrfProtection = csrf({ cookie: true });\n           \n           // Generate CSRF token\n           app.get('/form', csrfProtection, (req, res) => {\n             res.render('form', { csrfToken: req.csrfToken() });\n           });\n           \n           // Validate CSRF token\n           app.post('/process', csrfProtection, (req, res) => {\n             // Process the request\n           });\n           ```\n      \n      7. **Implement Secure Cookie Settings**\n         - Set secure, httpOnly, and sameSite attributes\n         - Use appropriate expiration times\n         - Example:\n           ```javascript\n           res.cookie('sessionId', sessionId, {\n             httpOnly: true,  // Prevents JavaScript access\n             secure: true,    // Only sent over HTTPS\n             sameSite: 'strict', // Prevents CSRF attacks\n             maxAge: 3600000, // 1 hour\n             path: '/',\n             domain: 'yourdomain.com'\n           });\n           ```\n      \n      8. **Implement Rate Limiting**\n         - Apply rate limiting to authentication endpoints\n         - Prevent brute force attacks\n         - Example with express-rate-limit:\n           ```javascript\n           const rateLimit = require('express-rate-limit');\n           \n           const loginLimiter = rateLimit({\n             windowMs: 15 * 60 * 1000, // 15 minutes\n             max: 5, // 5 attempts per window\n             standardHeaders: true,\n             legacyHeaders: false,\n             message: {\n               error: 'Too many login attempts, please try again after 15 minutes'\n             }\n           });\n           \n           app.post('/login', loginLimiter, (req, res) => {\n             // Handle login\n           });\n           ```\n      \n      9. **Implement Proper Session Management**\n         - Use secure session management libraries\n         - Rotate session IDs after login\n         - Example:\n           ```javascript\n           const session = require('express-session');\n           \n           app.use(session({\n             secret: process.env.SESSION_SECRET,\n             resave: false,\n             saveUninitialized: false,\n             cookie: {\n               secure: true,\n               httpOnly: true,\n               sameSite: 'strict',\n               maxAge: 3600000 // 1 hour\n             }\n           }));\n           \n           app.post('/login', (req, res) => {\n             // Authenticate user\n             \n             // Regenerate session to prevent session fixation\n             req.session.regenerate((err) => {\n               if (err) {\n                 return res.status(500).json({ error: 'Failed to create session' });\n               }\n               \n               // Set authenticated user in session\n               req.session.userId = user.id;\n               req.session.authenticated = true;\n               \n               res.json({ success: true });\n             });\n           });\n           ```\n      \n      10. **Implement Proper Access Control for APIs**\n          - Use OAuth 2.0 or JWT for API authentication\n          - Implement proper scope checking\n          - Example with JWT:\n            ```javascript\n            const jwt = require('jsonwebtoken');\n            \n            function verifyToken(req, res, next) {\n              const token = req.headers.authorization?.split(' ')[1];\n              \n              if (!token) {\n                return res.status(401).json({ error: 'No token provided' });\n              }\n              \n              try {\n                const decoded = jwt.verify(token, process.env.JWT_SECRET);\n                req.user = decoded;\n                \n                // Check if token has required scope\n                if (req.route.path === '/api/admin' && !decoded.scopes.includes('admin')) {\n                  return res.status(403).json({ error: 'Insufficient scope' });\n                }\n                \n                next();\n              } catch (error) {\n                return res.status(401).json({ error: 'Invalid token' });\n              }\n            }\n            \n            // Protect API routes\n            app.get('/api/users', verifyToken, (req, res) => {\n              // Handle request\n            });\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Authentication middleware\n      - pattern: \"(?:app\\\\.use\\\\((?:authenticate|auth\\\\.initialize|passport\\\\.initialize|express-session|jwt))|(?:passport\\\\.authenticate\\\\()|(?:auth\\\\.required)\"\n        message: \"Authentication middleware is implemented correctly.\"\n      \n      # Check 2: Authorization checks\n      - pattern: \"(?:isAuthorized|checkPermission|hasRole|requireRole|checkAccess|canAccess|checkAuth|roleRequired|requireScope)\"\n        message: \"Authorization checks are implemented.\"\n      \n      # Check 3: CSRF protection\n      - pattern: \"(?:csrf|csurf|csrfProtection|antiForgery|csrfToken)\"\n        message: \"CSRF protection is implemented.\"\n      \n      # Check 4: Secure cookies\n      - pattern: \"(?:cookie|cookies).*(?:secure:\\\\s*true|httpOnly:\\\\s*true|sameSite)\"\n        message: \"Secure cookie settings are configured.\"\n      \n      # Check 5: CORS configuration\n      - pattern: \"cors\\\\(\\\\{[^\\\\}]*?origin:\\\\s*\\\\[[^\\\\]]+\\\\]\"\n        message: \"CORS is configured with specific origins rather than wildcards.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - javascript\n    - access-control\n    - authorization\n    - authentication\n    - owasp\n    - language:javascript\n    - language:typescript\n    - framework:express\n    - framework:react\n    - framework:angular\n    - framework:vue\n    - category:security\n    - subcategory:access-control\n    - standard:owasp-top10\n    - risk:a01-broken-access-control\n  references:\n    - \"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\"\n    - \"https://nodejs.org/en/security/best-practices/\"\n    - \"https://expressjs.com/en/advanced/best-practice-security.html\"\n    - \"https://auth0.com/blog/node-js-and-express-tutorial-building-and-securing-restful-apis/\"\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-broken-access-control.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-broken-access-control.mdc",
      "sha": "1eac7ec1196452b2aafe6d3378d64d752bb543bd"
    }
  },
  {
    "name": "ivangrynenko-javascript-cryptographic-failures",
    "slug": "javascript-cryptographic-failures",
    "displayName": "Javascript Cryptographic Failures",
    "description": "Javascript Cryptographic Failures cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Detect and prevent cryptographic failures in JavaScript applications as defined in OWASP Top 10:2021-A02\nglobs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**\n---\n# JavaScript Cryptographic Failures (OWASP A02:2021)\n\n<rule>\nname: javascript_cryptographic_failures\ndescription: Detect and prevent cryptographic failures in JavaScript applications as defined in OWASP Top 10:2021-A02\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Weak or insecure cryptographic algorithms\n      - pattern: \"(?:createHash|crypto\\\\.createHash)\\\\(['\\\"](?:md5|sha1)['\\\"]\\\\)|(?:crypto|require\\\\(['\\\"]crypto['\\\"]\\\\))\\\\.(?:createHash|Hash)\\\\(['\\\"](?:md5|sha1)['\\\"]\\\\)|new (?:MD5|SHA1)\\\\(|CryptoJS\\\\.(?:MD5|SHA1)\\\\(\"\n        message: \"Using weak hashing algorithms (MD5/SHA1). Use SHA-256 or stronger algorithms.\"\n        \n      # Pattern 2: Hardcoded secrets/credentials\n      - pattern: \"(?:const|let|var)\\\\s+(?:password|secret|key|token|auth|apiKey|api_key)\\\\s*=\\\\s*['\\\"][^'\\\"]+['\\\"]\"\n        message: \"Potential hardcoded credentials detected. Store secrets in environment variables or a secure vault.\"\n        \n      # Pattern 3: Insecure random number generation\n      - pattern: \"Math\\\\.random\\\\(\\\\)|Math\\\\.floor\\\\(\\\\s*Math\\\\.random\\\\(\\\\)\\\\s*\\\\*\"\n        message: \"Using Math.random() for security purposes. Use crypto.randomBytes() or Web Crypto API for cryptographic operations.\"\n        \n      # Pattern 4: Weak SSL/TLS configuration\n      - pattern: \"(?:tls|https|require\\\\(['\\\"]https['\\\"]\\\\)|require\\\\(['\\\"]tls['\\\"]\\\\))\\\\.(?:createServer|request|get)\\\\([^\\\\)]*?{[^}]*?secureProtocol\\\\s*:\\\\s*['\\\"](?:SSLv2_method|SSLv3_method|TLSv1_method|TLSv1_1_method)['\\\"]\"\n        message: \"Using deprecated/insecure SSL/TLS protocol versions. Use TLS 1.2+ for secure communications.\"\n        \n      # Pattern 5: Missing certificate validation\n      - pattern: \"(?:rejectUnauthorized|strictSSL)\\\\s*:\\\\s*false\"\n        message: \"SSL certificate validation is disabled. Always validate certificates in production environments.\"\n        \n      # Pattern 6: Insecure cipher usage\n      - pattern: \"(?:createCipheriv|crypto\\\\.createCipheriv)\\\\(['\\\"](?:des|des3|rc4|bf|blowfish|aes-\\\\d+-ecb)['\\\"]\"\n        message: \"Using insecure encryption cipher or mode. Use AES with GCM or CBC mode with proper padding.\"\n        \n      # Pattern 7: Insufficient key length\n      - pattern: \"(?:generateKeyPair|generateKeyPairSync)\\\\([^,]*?['\\\"]rsa['\\\"][^,]*?{[^}]*?modulusLength\\\\s*:\\\\s*(\\\\d{1,3}|1[0-9]{3}|20[0-3][0-9]|204[0-7])\\\\s*}\"\n        message: \"Using insufficient key length for asymmetric encryption. RSA keys should be at least 2048 bits, preferably 4096 bits.\"\n        \n      # Pattern 8: Insecure password hashing\n      - pattern: \"(?:createHash|crypto\\\\.createHash)\\\\([^)]*?\\\\)\\\\.(?:update|digest)\\\\([^)]*?\\\\)|CryptoJS\\\\.(?:SHA256|SHA512|SHA3)\\\\([^)]*?\\\\)\"\n        negative_pattern: \"(?:bcrypt|scrypt|pbkdf2|argon2)\"\n        message: \"Using plain hashing for passwords. Use dedicated password hashing functions like bcrypt, scrypt, or PBKDF2.\"\n        \n      # Pattern 9: Missing salt in password hashing\n      - pattern: \"(?:pbkdf2|pbkdf2Sync)\\\\([^,]+,[^,]+,[^,]+,\\\\s*\\\\d+\\\\s*,[^,]+\\\\)\"\n        negative_pattern: \"(?:salt|crypto\\\\.randomBytes)\"\n        message: \"Ensure you're using a proper random salt with password hashing functions.\"\n        \n      # Pattern 10: Insecure cookie settings\n      - pattern: \"(?:document\\\\.cookie|cookies\\\\.set|res\\\\.cookie|cookie\\\\.serialize)\\\\([^)]*?\\\\)\"\n        negative_pattern: \"(?:secure\\\\s*:|httpOnly\\\\s*:|sameSite\\\\s*:)\"\n        message: \"Cookies with sensitive data should have secure and httpOnly flags enabled.\"\n        \n      # Pattern 11: Client-side encryption\n      - pattern: \"(?:encrypt|decrypt|createCipher|createDecipher)\\\\([^)]*?\\\\)\"\n        location: \"(?:frontend|client|browser|react|vue|angular)\"\n        message: \"Performing sensitive cryptographic operations on the client side. Move encryption/decryption logic to the server.\"\n        \n      # Pattern 12: Insecure JWT implementation\n      - pattern: \"(?:jwt\\\\.sign|jsonwebtoken\\\\.sign)\\\\([^,]*?,[^,]*?,[^\\\\)]*?\\\\)\"\n        negative_pattern: \"(?:expiresIn|algorithm\\\\s*:\\\\s*['\\\"](?:HS256|HS384|HS512|RS256|RS384|RS512|ES256|ES384|ES512)['\\\"])\"\n        message: \"JWT implementation missing expiration or using weak algorithm. Set expiresIn and use a strong algorithm.\"\n        \n      # Pattern 13: Weak PRNG in Node.js\n      - pattern: \"(?:crypto\\\\.pseudoRandomBytes|crypto\\\\.rng|crypto\\\\.randomInt)\\\\(\"\n        message: \"Using potentially weak pseudorandom number generator. Use crypto.randomBytes() for cryptographic security.\"\n        \n      # Pattern 14: Insecure local storage usage for sensitive data\n      - pattern: \"(?:localStorage\\\\.setItem|sessionStorage\\\\.setItem)\\\\(['\\\"](?:token|auth|jwt|password|secret|key|credential)['\\\"]\"\n        message: \"Storing sensitive data in browser storage. Use secure HttpOnly cookies for authentication tokens.\"\n        \n      # Pattern 15: Weak password validation\n      - pattern: \"(?:password\\\\.length\\\\s*>=?\\\\s*\\\\d|password\\\\.match\\\\(['\\\"][^'\\\"]+['\\\"]\\\\))\"\n        negative_pattern: \"(?:password\\\\.length\\\\s*>=?\\\\s*(?:8|9|10|11|12)|[A-Z]|[a-z]|[0-9]|[^A-Za-z0-9])\"\n        message: \"Weak password validation. Require at least 12 characters with a mix of uppercase, lowercase, numbers, and special characters.\"\n\n  - type: suggest\n    message: |\n      **JavaScript Cryptography Best Practices:**\n      \n      1. **Secure Password Storage:**\n         - Use dedicated password hashing algorithms:\n           ```javascript\n           // Node.js with bcrypt\n           const bcrypt = require('bcrypt');\n           const saltRounds = 12;\n           const hashedPassword = await bcrypt.hash(password, saltRounds);\n           \n           // Verify password\n           const match = await bcrypt.compare(password, hashedPassword);\n           ```\n         - Or use Argon2 (preferred) or PBKDF2 with sufficient iterations:\n           ```javascript\n           // Node.js with crypto\n           const crypto = require('crypto');\n           \n           function hashPassword(password) {\n             const salt = crypto.randomBytes(16);\n             const hash = crypto.pbkdf2Sync(password, salt, 310000, 32, 'sha256');\n             return { salt: salt.toString('hex'), hash: hash.toString('hex') };\n           }\n           ```\n      \n      2. **Secure Random Number Generation:**\n         - In Node.js:\n           ```javascript\n           const crypto = require('crypto');\n           const randomBytes = crypto.randomBytes(32); // 256 bits of randomness\n           ```\n         - In browsers:\n           ```javascript\n           const array = new Uint8Array(32);\n           window.crypto.getRandomValues(array);\n           ```\n      \n      3. **Secure Communications:**\n         - Use TLS 1.2+ for all communications:\n           ```javascript\n           // Node.js HTTPS server\n           const https = require('https');\n           const fs = require('fs');\n           \n           const options = {\n             key: fs.readFileSync('private-key.pem'),\n             cert: fs.readFileSync('certificate.pem'),\n             minVersion: 'TLSv1.2'\n           };\n           \n           https.createServer(options, (req, res) => {\n             res.writeHead(200);\n             res.end('Hello, world!');\n           }).listen(443);\n           ```\n         - Always validate certificates:\n           ```javascript\n           // Node.js HTTPS request\n           const https = require('https');\n           \n           const options = {\n             hostname: 'example.com',\n             port: 443,\n             path: '/',\n             method: 'GET',\n             rejectUnauthorized: true // Default, but explicitly set for clarity\n           };\n           \n           const req = https.request(options, (res) => {\n             // Handle response\n           });\n           ```\n      \n      4. **Proper Key Management:**\n         - Never hardcode secrets in source code\n         - Use environment variables or secure vaults:\n           ```javascript\n           // Node.js with dotenv\n           require('dotenv').config();\n           const apiKey = process.env.API_KEY;\n           ```\n         - Consider using dedicated key management services\n      \n      5. **Secure Encryption:**\n         - Use authenticated encryption (AES-GCM):\n           ```javascript\n           // Node.js crypto\n           const crypto = require('crypto');\n           \n           function encrypt(text, masterKey) {\n             const iv = crypto.randomBytes(12);\n             const cipher = crypto.createCipheriv('aes-256-gcm', masterKey, iv);\n             \n             let encrypted = cipher.update(text, 'utf8', 'hex');\n             encrypted += cipher.final('hex');\n             \n             const authTag = cipher.getAuthTag().toString('hex');\n             \n             return {\n               iv: iv.toString('hex'),\n               encrypted,\n               authTag\n             };\n           }\n           \n           function decrypt(encrypted, masterKey) {\n             const decipher = crypto.createDecipheriv(\n               'aes-256-gcm',\n               masterKey,\n               Buffer.from(encrypted.iv, 'hex')\n             );\n             \n             decipher.setAuthTag(Buffer.from(encrypted.authTag, 'hex'));\n             \n             let decrypted = decipher.update(encrypted.encrypted, 'hex', 'utf8');\n             decrypted += decipher.final('utf8');\n             \n             return decrypted;\n           }\n           ```\n      \n      6. **Secure Cookie Handling:**\n         - Set secure and httpOnly flags:\n           ```javascript\n           // Express.js\n           res.cookie('session', sessionId, {\n             httpOnly: true,\n             secure: true,\n             sameSite: 'strict',\n             maxAge: 3600000 // 1 hour\n           });\n           ```\n      \n      7. **JWT Security:**\n         - Use strong algorithms and set expiration:\n           ```javascript\n           // Node.js with jsonwebtoken\n           const jwt = require('jsonwebtoken');\n           \n           const token = jwt.sign(\n             { userId: user.id },\n             process.env.JWT_SECRET,\n             { \n               expiresIn: '1h',\n               algorithm: 'HS256'\n             }\n           );\n           ```\n         - Validate tokens properly:\n           ```javascript\n           try {\n             const decoded = jwt.verify(token, process.env.JWT_SECRET);\n             // Process request with decoded data\n           } catch (err) {\n             // Handle invalid token\n           }\n           ```\n      \n      8. **Constant-Time Comparison:**\n         - Use crypto.timingSafeEqual for comparing secrets:\n           ```javascript\n           const crypto = require('crypto');\n           \n           function safeCompare(a, b) {\n             const bufA = Buffer.from(a);\n             const bufB = Buffer.from(b);\n             \n             // Ensure the buffers are the same length to avoid timing attacks\n             // based on length differences\n             if (bufA.length !== bufB.length) {\n               return false;\n             }\n             \n             return crypto.timingSafeEqual(bufA, bufB);\n           }\n           ```\n\n  - type: validate\n    conditions:\n      # Check 1: Proper password hashing\n      - pattern: \"bcrypt\\\\.hash|scrypt|pbkdf2|argon2\"\n        message: \"Using secure password hashing algorithm.\"\n      \n      # Check 2: Secure random generation\n      - pattern: \"crypto\\\\.randomBytes|window\\\\.crypto\\\\.getRandomValues\"\n        message: \"Using cryptographically secure random number generation.\"\n      \n      # Check 3: Strong TLS configuration\n      - pattern: \"minVersion\\\\s*:\\\\s*['\\\"]TLSv1_2['\\\"]|minVersion\\\\s*:\\\\s*['\\\"]TLSv1_3['\\\"]\"\n        message: \"Using secure TLS configuration.\"\n      \n      # Check 4: Proper certificate validation\n      - pattern: \"rejectUnauthorized\\\\s*:\\\\s*true|strictSSL\\\\s*:\\\\s*true\"\n        message: \"Properly validating SSL certificates.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - javascript\n    - nodejs\n    - browser\n    - cryptography\n    - encryption\n    - owasp\n    - language:javascript\n    - framework:express\n    - framework:react\n    - framework:vue\n    - framework:angular\n    - category:security\n    - subcategory:cryptography\n    - standard:owasp-top10\n    - risk:a02-cryptographic-failures\n  references:\n    - \"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html\"\n    - \"https://nodejs.org/api/crypto.html\"\n    - \"https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto\"\n    - \"https://www.npmjs.com/package/bcrypt\"\n    - \"https://www.npmjs.com/package/jsonwebtoken\"\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-cryptographic-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-cryptographic-failures.mdc",
      "sha": "a02100c01a3f5b59454df85140425f683fdbdd49"
    }
  },
  {
    "name": "ivangrynenko-javascript-identification-authentication-failures",
    "slug": "javascript-identification-authentication-failures",
    "displayName": "Javascript Identification Authentication Failures",
    "description": "Javascript Identification Authentication Failures cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Detect and prevent identification and authentication failures in JavaScript applications as defined in OWASP Top 10:2021-A07\nglobs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**\n---\n# JavaScript Identification and Authentication Failures (OWASP A07:2021)\n\n<rule>\nname: javascript_identification_authentication_failures\ndescription: Detect and prevent identification and authentication failures in JavaScript applications as defined in OWASP Top 10:2021-A07\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Weak Password Validation\n      - pattern: \"(?:password|passwd|pwd)\\\\s*\\\\.\\\\s*(?:length\\\\s*[<>]=?\\\\s*(?:[0-9]|10)\\\\b|match\\\\(\\\\s*['\\\"][^'\\\"]*['\\\"]\\\\s*\\\\))\"\n        message: \"Weak password validation detected. Implement strong password policies requiring minimum length, complexity, and avoiding common passwords.\"\n        \n      # Pattern 2: Missing MFA Implementation\n      - pattern: \"(?:login|signin|authenticate|auth)\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*?\\\\}\"\n        negative_pattern: \"(?:mfa|2fa|two-factor|multi-factor|otp|totp)\"\n        message: \"Authentication implementation without multi-factor authentication (MFA). Consider implementing MFA for enhanced security.\"\n        \n      # Pattern 3: Hardcoded Credentials\n      - pattern: \"(?:const|let|var)\\\\s+(?:password|passwd|pwd|secret|key|token|apiKey)\\\\s*=\\\\s*['\\\"][^'\\\"]+['\\\"]\"\n        message: \"Hardcoded credentials detected. Store sensitive authentication data in secure configuration or environment variables.\"\n        \n      # Pattern 4: Insecure Session Management\n      - pattern: \"(?:localStorage|sessionStorage)\\\\.setItem\\\\(['\\\"](?:token|jwt|session|auth|user)['\\\"]\"\n        message: \"Storing authentication tokens in localStorage or sessionStorage. Consider using HttpOnly cookies for sensitive authentication data.\"\n        \n      # Pattern 5: Missing CSRF Protection\n      - pattern: \"(?:post|put|delete|patch)\\\\([^)]*?\\\\)\"\n        negative_pattern: \"(?:csrf|xsrf|token)\"\n        location: \"(?:src|components|pages|api)\"\n        message: \"Potential missing CSRF protection in API requests. Implement CSRF tokens for state-changing operations.\"\n        \n      # Pattern 6: Insecure JWT Handling\n      - pattern: \"jwt\\\\.sign\\\\([^)]*?{[^}]*?}\\\\s*,\\\\s*[^,)]+\\\\s*(?:\\\\)|,\\\\s*{\\\\s*(?:expiresIn|algorithm)\\\\s*:\\\\s*[^}]*?}\\\\s*\\\\))\"\n        negative_pattern: \"(?:expiresIn|exp).*(?:algorithm|alg)\"\n        message: \"Insecure JWT configuration. Ensure JWTs have proper expiration and use secure algorithms (RS256 preferred over HS256).\"\n        \n      # Pattern 7: Insecure Password Storage\n      - pattern: \"(?:bcrypt|argon2|pbkdf2|scrypt)\\\\.[^(]*\\\\([^)]*?(?:rounds|iterations|cost|factor)\\\\s*[:<=>]\\\\s*(?:[0-9]|1[0-2])\\\\b\"\n        message: \"Weak password hashing parameters. Use sufficient work factors for password hashing algorithms.\"\n        \n      # Pattern 8: Missing Account Lockout\n      - pattern: \"(?:login|signin|authenticate|auth)\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*?\\\\}\"\n        negative_pattern: \"(?:lock|attempt|count|limit|throttle|rate)\"\n        message: \"Authentication implementation without account lockout or rate limiting. Implement account lockout after failed attempts.\"\n        \n      # Pattern 9: Insecure Password Recovery\n      - pattern: \"(?:reset|forgot|recover)(?:Password|Pwd)\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*?\\\\}\"\n        negative_pattern: \"(?:expire|timeout|token|verify)\"\n        message: \"Potentially insecure password recovery mechanism. Implement secure, time-limited recovery tokens.\"\n        \n      # Pattern 10: Missing Brute Force Protection\n      - pattern: \"(?:login|signin|authenticate|auth)\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*?\\\\}\"\n        negative_pattern: \"(?:captcha|recaptcha|hcaptcha|rate\\\\s*limit)\"\n        message: \"Authentication without CAPTCHA or rate limiting. Implement protection against brute force attacks.\"\n        \n      # Pattern 11: Insecure Remember Me Functionality\n      - pattern: \"(?:rememberMe|keepLoggedIn|staySignedIn)\"\n        negative_pattern: \"(?:secure|httpOnly|sameSite)\"\n        message: \"Potentially insecure 'Remember Me' functionality. Implement with secure, HttpOnly cookies and proper expiration.\"\n        \n      # Pattern 12: Insecure Logout Implementation\n      - pattern: \"(?:logout|signout)\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*?\\\\}\"\n        negative_pattern: \"(?:invalidate|revoke|clear|remove).*(?:token|session|cookie)\"\n        message: \"Potentially incomplete logout implementation. Ensure proper invalidation of sessions and tokens on logout.\"\n        \n      # Pattern 13: Missing Session Timeout\n      - pattern: \"(?:session|cookie|jwt)\\\\s*\\\\.\\\\s*(?:create|set|sign)\"\n        negative_pattern: \"(?:expire|timeout|maxAge)\"\n        message: \"Missing session timeout configuration. Implement proper session expiration for security.\"\n        \n      # Pattern 14: Insecure OAuth Implementation\n      - pattern: \"(?:oauth|openid|oidc).*(?:callback|redirect)\"\n        negative_pattern: \"(?:state|nonce|pkce)\"\n        message: \"Potentially insecure OAuth implementation. Use state parameters, PKCE for authorization code flow, and validate redirect URIs.\"\n        \n      # Pattern 15: Missing Credential Validation\n      - pattern: \"(?:email|username|user)\\\\s*=\\\\s*(?:req\\\\.body|req\\\\.query|req\\\\.params|formData\\\\.get)\\\\(['\\\"][^'\\\"]+['\\\"]\\\\)\"\n        negative_pattern: \"(?:validate|sanitize|check|trim)\"\n        message: \"Missing input validation for user credentials. Implement proper validation and sanitization.\"\n\n  - type: suggest\n    message: |\n      **JavaScript Identification and Authentication Failures Best Practices:**\n      \n      1. **Strong Password Policies:**\n         - Implement minimum length (at least 12 characters)\n         - Require complexity (uppercase, lowercase, numbers, special characters)\n         - Check against common password lists\n         - Example:\n           ```javascript\n           // Using a library like zxcvbn for password strength estimation\n           import zxcvbn from 'zxcvbn';\n           \n           function validatePassword(password) {\n             if (password.length < 12) {\n               return { valid: false, message: 'Password must be at least 12 characters' };\n             }\n             \n             const strength = zxcvbn(password);\n             if (strength.score < 3) {\n               return { \n                 valid: false, \n                 message: 'Password is too weak. ' + strength.feedback.warning \n               };\n             }\n             \n             return { valid: true };\n           }\n           ```\n      \n      2. **Multi-Factor Authentication (MFA):**\n         - Implement TOTP (Time-based One-Time Password)\n         - Support hardware security keys (WebAuthn/FIDO2)\n         - Example:\n           ```javascript\n           // Using speakeasy for TOTP implementation\n           import speakeasy from 'speakeasy';\n           \n           // Generate a secret for a user\n           const secret = speakeasy.generateSecret({ length: 20 });\n           \n           // Verify a token\n           function verifyToken(token, secret) {\n             return speakeasy.totp.verify({\n               secret: secret.base32,\n               encoding: 'base32',\n               token: token,\n               window: 1 // Allow 1 period before and after for clock drift\n             });\n           }\n           ```\n      \n      3. **Secure Session Management:**\n         - Use HttpOnly, Secure, and SameSite cookies\n         - Implement proper session expiration\n         - Example:\n           ```javascript\n           // Express.js example\n           app.use(session({\n             secret: process.env.SESSION_SECRET,\n             name: '__Host-session', // Prefix with __Host- for added security\n             cookie: {\n               httpOnly: true,\n               secure: true, // Requires HTTPS\n               sameSite: 'strict',\n               maxAge: 3600000, // 1 hour\n               path: '/'\n             },\n             resave: false,\n             saveUninitialized: false\n           }));\n           ```\n      \n      4. **CSRF Protection:**\n         - Implement CSRF tokens for all state-changing operations\n         - Example:\n           ```javascript\n           // Using csurf middleware with Express\n           import csrf from 'csurf';\n           \n           // Setup CSRF protection\n           const csrfProtection = csrf({ cookie: true });\n           \n           // Apply to routes\n           app.post('/api/user/profile', csrfProtection, (req, res) => {\n             // Handle the request\n           });\n           \n           // In your frontend (React example)\n           function ProfileForm() {\n             // Get CSRF token from cookie or meta tag\n             const csrfToken = document.querySelector('meta[name=\"csrf-token\"]').content;\n             \n             return (\n               <form method=\"POST\" action=\"/api/user/profile\">\n                 <input type=\"hidden\" name=\"_csrf\" value={csrfToken} />\n                 {/* Form fields */}\n                 <button type=\"submit\">Update Profile</button>\n               </form>\n             );\n           }\n           ```\n      \n      5. **Secure JWT Implementation:**\n         - Use strong algorithms (RS256 preferred over HS256)\n         - Include proper expiration (exp), issued at (iat), and audience (aud) claims\n         - Example:\n           ```javascript\n           import jwt from 'jsonwebtoken';\n           import fs from 'fs';\n           \n           // Using asymmetric keys (preferred for production)\n           const privateKey = fs.readFileSync('private.key');\n           \n           function generateToken(userId) {\n             return jwt.sign(\n               { \n                 sub: userId,\n                 iat: Math.floor(Date.now() / 1000),\n                 exp: Math.floor(Date.now() / 1000) + (60 * 60), // 1 hour\n                 aud: 'your-app-name'\n               },\n               privateKey,\n               { algorithm: 'RS256' }\n             );\n           }\n           ```\n      \n      6. **Secure Password Storage:**\n         - Use bcrypt, Argon2, or PBKDF2 with sufficient work factor\n         - Example:\n           ```javascript\n           import bcrypt from 'bcrypt';\n           \n           async function hashPassword(password) {\n             // Cost factor of 12+ for production\n             const saltRounds = 12;\n             return await bcrypt.hash(password, saltRounds);\n           }\n           \n           async function verifyPassword(password, hash) {\n             return await bcrypt.compare(password, hash);\n           }\n           ```\n      \n      7. **Account Lockout and Rate Limiting:**\n         - Implement progressive delays or account lockout after failed attempts\n         - Example:\n           ```javascript\n           import rateLimit from 'express-rate-limit';\n           \n           // Apply rate limiting to login endpoint\n           const loginLimiter = rateLimit({\n             windowMs: 15 * 60 * 1000, // 15 minutes\n             max: 5, // 5 attempts per window\n             message: 'Too many login attempts, please try again after 15 minutes',\n             standardHeaders: true,\n             legacyHeaders: false,\n           });\n           \n           app.post('/api/login', loginLimiter, (req, res) => {\n             // Handle login\n           });\n           ```\n      \n      8. **Secure Password Recovery:**\n         - Use time-limited, single-use tokens\n         - Send to verified email addresses only\n         - Example:\n           ```javascript\n           import crypto from 'crypto';\n           \n           function generatePasswordResetToken() {\n             return {\n               token: crypto.randomBytes(32).toString('hex'),\n               expires: new Date(Date.now() + 3600000) // 1 hour\n             };\n           }\n           \n           // Store token in database with user ID and expiration\n           // Send token via email (never include in URL directly)\n           // Verify token is valid and not expired when used\n           ```\n      \n      9. **Brute Force Protection:**\n         - Implement CAPTCHA or reCAPTCHA\n         - Example:\n           ```javascript\n           // Using Google reCAPTCHA v3\n           async function verifyRecaptcha(token) {\n             const response = await fetch('https://www.google.com/recaptcha/api/siteverify', {\n               method: 'POST',\n               headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n               body: `secret=${process.env.RECAPTCHA_SECRET_KEY}&response=${token}`\n             });\n             \n             const data = await response.json();\n             return data.success && data.score >= 0.5; // Adjust threshold as needed\n           }\n           \n           app.post('/api/login', async (req, res) => {\n             const { recaptchaToken } = req.body;\n             \n             if (!(await verifyRecaptcha(recaptchaToken))) {\n               return res.status(400).json({ error: 'CAPTCHA verification failed' });\n             }\n             \n             // Continue with login process\n           });\n           ```\n      \n      10. **Secure Logout Implementation:**\n          - Invalidate sessions on both client and server\n          - Example:\n            ```javascript\n            app.post('/api/logout', (req, res) => {\n              // Clear server-side session\n              req.session.destroy((err) => {\n                if (err) {\n                  return res.status(500).json({ error: 'Failed to logout' });\n                }\n                \n                // Clear client-side cookie\n                res.clearCookie('__Host-session', {\n                  httpOnly: true,\n                  secure: true,\n                  sameSite: 'strict',\n                  path: '/'\n                });\n                \n                res.status(200).json({ message: 'Logged out successfully' });\n              });\n            });\n            ```\n      \n      11. **Secure OAuth Implementation:**\n          - Use state parameter to prevent CSRF\n          - Implement PKCE for authorization code flow\n          - Validate redirect URIs against whitelist\n          - Example:\n            ```javascript\n            // Generate state and code verifier for PKCE\n            function generateOAuthState() {\n              return crypto.randomBytes(32).toString('hex');\n            }\n            \n            function generateCodeVerifier() {\n              return crypto.randomBytes(43).toString('base64url');\n            }\n            \n            function generateCodeChallenge(verifier) {\n              const hash = crypto.createHash('sha256').update(verifier).digest('base64url');\n              return hash;\n            }\n            \n            // Store state and code verifier in session\n            // Use code challenge in authorization request\n            // Verify state and use code verifier in token request\n            ```\n      \n      12. **Input Validation:**\n          - Validate and sanitize all user inputs\n          - Example:\n            ```javascript\n            import validator from 'validator';\n            \n            function validateCredentials(email, password) {\n              const errors = {};\n              \n              if (!validator.isEmail(email)) {\n                errors.email = 'Invalid email format';\n              }\n              \n              if (!password || password.length < 12) {\n                errors.password = 'Password must be at least 12 characters';\n              }\n              \n              return {\n                isValid: Object.keys(errors).length === 0,\n                errors\n              };\n            }\n            ```\n      \n      13. **Secure Headers:**\n          - Implement security headers for authentication-related pages\n          - Example:\n            ```javascript\n            // Using helmet with Express\n            import helmet from 'helmet';\n            \n            app.use(helmet({\n              contentSecurityPolicy: {\n                directives: {\n                  defaultSrc: [\"'self'\"],\n                  scriptSrc: [\"'self'\", 'https://www.google.com/recaptcha/', 'https://www.gstatic.com/recaptcha/'],\n                  frameSrc: [\"'self'\", 'https://www.google.com/recaptcha/'],\n                  styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n                  connectSrc: [\"'self'\"]\n                }\n              },\n              referrerPolicy: { policy: 'same-origin' }\n            }));\n            ```\n      \n      14. **Credential Stuffing Protection:**\n          - Implement device fingerprinting and anomaly detection\n          - Example:\n            ```javascript\n            // Simple device fingerprinting\n            function getDeviceFingerprint(req) {\n              return {\n                ip: req.ip,\n                userAgent: req.headers['user-agent'],\n                acceptLanguage: req.headers['accept-language']\n              };\n            }\n            \n            // Check if login is from a new device\n            async function isNewDevice(userId, fingerprint) {\n              // Compare with stored fingerprints for this user\n              // Alert or require additional verification for new devices\n            }\n            ```\n      \n      15. **Secure Password Change:**\n          - Require current password verification\n          - Example:\n            ```javascript\n            async function changePassword(userId, currentPassword, newPassword) {\n              // Retrieve user from database\n              const user = await getUserById(userId);\n              \n              // Verify current password\n              const isValid = await bcrypt.compare(currentPassword, user.passwordHash);\n              if (!isValid) {\n                return { success: false, message: 'Current password is incorrect' };\n              }\n              \n              // Validate new password strength\n              const validation = validatePassword(newPassword);\n              if (!validation.valid) {\n                return { success: false, message: validation.message };\n              }\n              \n              // Hash and store new password\n              const newHash = await bcrypt.hash(newPassword, 12);\n              await updateUserPassword(userId, newHash);\n              \n              // Invalidate existing sessions (optional but recommended)\n              await invalidateUserSessions(userId);\n              \n              return { success: true };\n            }\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Strong Password Validation\n      - pattern: \"(?:password|pwd).*(?:length\\\\s*>=\\\\s*(?:1[2-9]|[2-9][0-9]))\"\n        message: \"Implementing strong password length requirements (12+ characters).\"\n      \n      # Check 2: Secure Password Storage\n      - pattern: \"(?:bcrypt|argon2|pbkdf2|scrypt)\\\\.[^(]*\\\\([^)]*?(?:rounds|iterations|cost|factor)\\\\s*[:<=>]\\\\s*(?:1[2-9]|[2-9][0-9])\"\n        message: \"Using secure password hashing with appropriate work factor.\"\n      \n      # Check 3: CSRF Protection\n      - pattern: \"(?:csrf|xsrf).*(?:token|middleware|protection)\"\n        message: \"Implementing CSRF protection for state-changing operations.\"\n      \n      # Check 4: Secure Cookie Configuration\n      - pattern: \"(?:cookie|session).*(?:httpOnly|secure|sameSite)\"\n        message: \"Using secure cookie configuration for sessions.\"\n      \n      # Check 5: Rate Limiting\n      - pattern: \"(?:rate|limit|throttle).*(?:login|signin|auth)\"\n        message: \"Implementing rate limiting for authentication endpoints.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - javascript\n    - nodejs\n    - browser\n    - authentication\n    - owasp\n    - language:javascript\n    - framework:express\n    - framework:react\n    - framework:vue\n    - framework:angular\n    - category:security\n    - subcategory:authentication\n    - standard:owasp-top10\n    - risk:a07-identification-authentication-failures\n  references:\n    - \"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_for_Java_Cheat_Sheet.html\"\n    - \"https://auth0.com/blog/a-look-at-the-latest-draft-for-jwt-bcp/\"\n    - \"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Multifactor_Authentication_Cheat_Sheet.md\"\n    - \"https://www.nist.gov/itl/applied-cybersecurity/tig/back-basics-multi-factor-authentication\"\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-identification-authentication-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-identification-authentication-failures.mdc",
      "sha": "a7d3f513983175807748a94d0b9cf8dd3ae92ca5"
    }
  },
  {
    "name": "ivangrynenko-javascript-injection",
    "slug": "javascript-injection",
    "displayName": "Javascript Injection",
    "description": "Javascript Injection cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Identifies and helps prevent injection vulnerabilities in JavaScript applications, as defined in OWASP Top 10:2021-A03.\nglobs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**\n---\n# JavaScript Injection Security Rule\n\n<rule>\nname: javascript_injection\ndescription: Identifies and helps prevent injection vulnerabilities in JavaScript applications, as defined in OWASP Top 10:2021-A03.\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"eval\\\\(([^)]*(req|request|query|param|user|input)[^)]*)\\\\)\"\n        severity: \"critical\"\n        message: |\n          🔴 CRITICAL: Potential code injection vulnerability detected.\n          \n          Impact: Attackers can execute arbitrary code in your application context.\n          CWE Reference: CWE-95 (Improper Neutralization of Directives in Dynamically Evaluated Code)\n          \n          ❌ Insecure:\n          eval(req.body.data)\n          \n          ✅ Secure Alternative:\n          // Use safer alternatives like JSON.parse for JSON data\n          try {\n            const data = JSON.parse(req.body.data);\n            // Process data safely\n          } catch (error) {\n            // Handle parsing errors\n          }\n        learn_more_url: \"https://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval_Injection\"\n      \n      - pattern: \"\\\\$\\\\(\\\\s*(['\\\"])<[^>]+>\\\\1\\\\s*\\\\)\"\n        severity: \"high\"\n        message: |\n          🟠 HIGH: jQuery HTML injection vulnerability detected.\n          \n          Impact: This can lead to Cross-Site Scripting (XSS) attacks.\n          CWE Reference: CWE-79 (Improper Neutralization of Input During Web Page Generation)\n          \n          ❌ Insecure:\n          $(\"<div>\" + userProvidedData + \"</div>\")\n          \n          ✅ Secure Alternative:\n          // Create element safely, then set text content\n          const div = $(\"<div></div>\");\n          div.text(userProvidedData);\n        learn_more_url: \"https://cheatsheetseries.owasp.org/cheatsheets/jQuery_Security_Cheat_Sheet.html\"\n      \n      - pattern: \"document\\\\.write\\\\(|document\\\\.writeln\\\\(\"\n        severity: \"high\"\n        message: |\n          🟠 HIGH: Potential DOM-based XSS vulnerability.\n          \n          Impact: Attackers can inject malicious HTML/JavaScript into your page.\n          CWE Reference: CWE-79 (Improper Neutralization of Input During Web Page Generation)\n          \n          ❌ Insecure:\n          document.write(\"<h1>\" + userGeneratedContent + \"</h1>\");\n          \n          ✅ Secure Alternative:\n          // Use safer DOM manipulation methods\n          const h1 = document.createElement(\"h1\");\n          h1.textContent = userGeneratedContent;\n          document.body.appendChild(h1);\n        learn_more_url: \"https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html\"\n      \n      - pattern: \"innerHTML\\\\s*=|outerHTML\\\\s*=\"\n        pattern_negate: \"sanitize|DOMPurify|escapeHTML\"\n        severity: \"high\"\n        message: |\n          🟠 HIGH: Potential DOM-based XSS through innerHTML/outerHTML.\n          \n          Impact: Setting HTML content directly can allow script injection.\n          CWE Reference: CWE-79 (Improper Neutralization of Input During Web Page Generation)\n          \n          ❌ Insecure:\n          element.innerHTML = userProvidedData;\n          \n          ✅ Secure Alternative:\n          // Option 1: Use textContent instead for text\n          element.textContent = userProvidedData;\n          \n          // Option 2: Sanitize if HTML is required\n          import DOMPurify from 'dompurify';\n          element.innerHTML = DOMPurify.sanitize(userProvidedData);\n        learn_more_url: \"https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html\"\n      \n      - pattern: \"\\\\$\\\\(.*\\\\)\\\\.html\\\\(\"\n        pattern_negate: \"sanitize|DOMPurify|escapeHTML\"\n        severity: \"high\"\n        message: |\n          🟠 HIGH: jQuery HTML injection risk detected.\n          \n          Impact: Setting HTML content can lead to XSS vulnerabilities.\n          CWE Reference: CWE-79 (Improper Neutralization of Input During Web Page Generation)\n          \n          ❌ Insecure:\n          $(\"#element\").html(userProvidedData);\n          \n          ✅ Secure Alternative:\n          // Option 1: Use text() instead for text\n          $(\"#element\").text(userProvidedData);\n          \n          // Option 2: Sanitize if HTML is required\n          import DOMPurify from 'dompurify';\n          $(\"#element\").html(DOMPurify.sanitize(userProvidedData));\n        learn_more_url: \"https://cheatsheetseries.owasp.org/cheatsheets/jQuery_Security_Cheat_Sheet.html\"\n      \n      - pattern: \"require\\\\(([^)]*(req|request|query|param|user|input)[^)]*)\\\\)\"\n        severity: \"critical\"\n        message: |\n          🔴 CRITICAL: Dynamic require() can lead to remote code execution.\n          \n          Impact: Attackers can load arbitrary modules or access sensitive files.\n          CWE Reference: CWE-95 (Improper Neutralization of Directives in Dynamically Evaluated Code)\n          \n          ❌ Insecure:\n          const module = require(req.query.module);\n          \n          ✅ Secure Alternative:\n          // Use a whitelisproach\n          const allowedModules = {\n            'user': './modules/user',\n            'product': './modules/product'\n          };\n          \n          const moduleName = req.query.module;\n          if (allowedModules[moduleName]) {\n            const module = require(allowedModules[moduleName]);\n            // Use module safely\n          } else {\n            // Handle invalid module request\n          }\n        learn_more_url: \"https://owasp.org/www-project-top-ten/2017/A1_2017-Injection\"\n      \n      - pattern: \"exec\\\\(([^)]*(req|request|query|param|user|input)[^)]*)\\\\)\"\n        severity: \"critical\"\n        message: |\n          🔴 CRITICAL: Command injection vulnerability detected.\n          \n          Impact: Attackers can execute arbitrary system commands.\n          CWE Reference: CWE-78 (Improper Neutralization of Special Elements used in an OS Command)\n          \n          ❌ Insecure:\n          exec('ls ' + userInput, (error, stdout, stderr) => {\n            // Process output\n          });\n          \n          ✅ Secure Alternative:\n          // Use child_process.execFile with separate arguments\n          import { execFile } from 'child_process';\n          \n          execFile('ls', [safeDirectory], (error, stdout, stderr) => {\n            // Process output safely\n          });\n          \n          // Or use a validation library to sanitize inputs\n          import validator from 'validator';\n          if (validator.isAlphanumeric(userInput)) {\n            exec('ls ' + userInput, (error, stdout, stderr) => {\n              // Process output\n            });\n          }\n        learn_more_url: \"https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\"\n\n  - type: suggest\n    message: |\n      **JavaScript Injection Prevention Best Practices:**\n      \n      1. **Input Validation:**\n         - Validate all user inputs both client-side and server-side\n         - Use allowlists instead of blocklists\n         - Apply strict type checking and schema validation\n      \n      2. **Output Encoding:**\n         - Always encode/escape output in the correct context (HTML, JavaScript, CSS, URL)\n         - Use libraries like DOMPurify for HTML sanitization\n         - Avoid building HTML, JavaScript, SQL dynamically from user inputs\n      \n      3. **Content Security Policy (CSP):**\n         - Implement a strict CSP to prevent execution of malicious scripts\n         - Use nonce-based or hash-based CSP to allow only specific scripts\n      \n      4. **Structured Data Formats:**\n         - Use structured data formats like JSON, XML with proper parsers\n         - Avoid manually parsing or constructing these formats\n      \n      5. **Parameterized APIs:**\n         - Use parameterized APIs for database queries, OS commands\n         - Separate code from data to prevent injection\n      \n      6. **DOM Manipulation:**\n         - Prefer .textContent over .innerHTML when displaying user content\n         - Use document.createElement() and node methods instead of directly setting HTML\n      \n      7. **Frameworks and Libraries:**\n         - Keep frameworks and libraries updated to latest secure versions\n         - Many modern frameworks offer built-in protections against common injection attacks\n\nmetadata:\n  priority: critical\n  version: 1.1\n  tags: \n    - language:javascript\n    - category:security\n    - standard:owasp-top10\n    - risk:a03-injection\n  references:\n    - \"https://owasp.org/Top10/A03_2021-Injection/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html\"\n    - \"https://nodegoat.herokuapp.com/tutorial/a1\"\n    - \"https://github.com/OWASP/NodeGoat\"\n</rule>\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-injection.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-injection.mdc",
      "sha": "00e33ccf930b8400ca55e8bf87d4213837dfbff2"
    }
  },
  {
    "name": "ivangrynenko-javascript-insecure-design",
    "slug": "javascript-insecure-design",
    "displayName": "Javascript Insecure Design",
    "description": "Javascript Insecure Design cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Detect and prevent insecure design patterns in JavaScript applications as defined in OWASP Top 10:2021-A04\nglobs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**\n---\n# JavaScript Insecure Design (OWASP A04:2021)\n\n<rule>\nname: javascript_insecure_design\ndescription: Detect and prevent insecure design patterns in JavaScript applications as defined in OWASP Top 10:2021-A04\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Lack of Rate Limiting\n      - pattern: \"app\\\\.(?:get|post|put|delete|patch)\\\\([^)]*?\\\\)\\\\s*(?!.*(?:rateLimiter|limiter|throttle|rateLimit))\"\n        location: \"(?:routes|api|controllers)\"\n        message: \"Potential lack of rate limiting in API endpoint. Consider implementing rate limiting to prevent abuse.\"\n        \n      # Pattern 2: Insecure Direct Object Reference (IDOR)\n      - pattern: \"(?:findById|getById|findOne)\\\\([^)]*?(?:req\\\\.|request\\\\.|params\\\\.|query\\\\.|body\\\\.|user\\\\.|input\\\\.|form\\\\.)[^)]*?\\\\)\\\\s*(?!.*(?:authorization|permission|access|canAccess|isAuthorized|checkPermission))\"\n        location: \"(?:routes|api|controllers)\"\n        message: \"Potential Insecure Direct Object Reference (IDOR) vulnerability. Implement proper authorization checks before accessing objects by ID.\"\n        \n      # Pattern 3: Lack of Input Validation\n      - pattern: \"(?:req\\\\.|request\\\\.|params\\\\.|query\\\\.|body\\\\.|user\\\\.|input\\\\.|form\\\\.)[a-zA-Z0-9_]+\\\\s*(?!.*(?:validate|sanitize|check|schema|joi|yup|zod|validator|isValid))\"\n        location: \"(?:routes|api|controllers)\"\n        message: \"Potential lack of input validation. Implement proper validation for all user inputs.\"\n        \n      # Pattern 4: Hardcoded Business Logic\n      - pattern: \"if\\\\s*\\\\([^)]*?(?:role\\\\s*===\\\\s*['\\\"]admin['\\\"]|isAdmin\\\\s*===\\\\s*true|user\\\\.role\\\\s*===\\\\s*['\\\"]admin['\\\"])\\\\s*\\\\)\"\n        message: \"Hardcoded business logic for authorization. Consider using a more flexible role-based access control system.\"\n        \n      # Pattern 5: Lack of Proper Error Handling\n      - pattern: \"catch\\\\s*\\\\([^)]*?\\\\)\\\\s*\\\\{[^}]*?(?:console\\\\.(?:log|error))[^}]*?\\\\}\"\n        negative_pattern: \"(?:res\\\\.status|next\\\\(err|next\\\\(error|errorHandler)\"\n        message: \"Improper error handling. Avoid only logging errors without proper handling or user feedback.\"\n        \n      # Pattern 6: Insecure Authentication Design\n      - pattern: \"(?:password|token|secret|key)\\\\s*===\\\\s*(?:req\\\\.|request\\\\.|params\\\\.|query\\\\.|body\\\\.|user\\\\.|input\\\\.|form\\\\.)\"\n        message: \"Insecure authentication design. Avoid direct string comparison for passwords or tokens.\"\n        \n      # Pattern 7: Lack of Proper Logging\n      - pattern: \"app\\\\.(?:get|post|put|delete|patch)\\\\([^)]*?\\\\)\\\\s*(?!.*(?:log|logger|winston|bunyan|morgan|audit))\"\n        location: \"(?:routes|api|controllers)\"\n        message: \"Lack of proper logging in API endpoint. Implement logging for security-relevant events.\"\n        \n      # Pattern 8: Insecure Defaults\n      - pattern: \"new\\\\s+(?:Session|Cookie|JWT)\\\\([^)]*?\\\\{[^}]*?(?:secure\\\\s*:\\\\s*false|httpOnly\\\\s*:\\\\s*false|sameSite\\\\s*:\\\\s*['\\\"]none['\\\"])\"\n        message: \"Insecure default configuration. Avoid setting secure:false, httpOnly:false, or sameSite:'none' for cookies or sessions.\"\n        \n      # Pattern 9: Lack of Proper Access Control\n      - pattern: \"router\\\\.(?:get|post|put|delete|patch)\\\\([^)]*?\\\\)\\\\s*(?!.*(?:authenticate|authorize|requireAuth|isAuthenticated|checkAuth|verifyToken|passport\\\\.authenticate))\"\n        location: \"(?:routes|api|controllers)\"\n        message: \"Potential lack of access control in route definition. Implement proper authentication and authorization middleware.\"\n        \n      # Pattern 10: Insecure File Operations\n      - pattern: \"(?:fs\\\\.(?:readFile|writeFile|appendFile|readdir|stat|access|open|unlink)|require)\\\\([^)]*?(?:(?:\\\\+|\\\\$\\\\{|\\\\`)[^)]*?(?:__dirname|__filename|process\\\\.cwd\\\\(\\\\)|path\\\\.(?:resolve|join)))\"\n        negative_pattern: \"path\\\\.normalize|path\\\\.resolve|path\\\\.join\"\n        message: \"Insecure file operations. Use path.normalize() and validate file paths to prevent directory traversal attacks.\"\n        \n      # Pattern 11: Lack of Proper Secrets Management\n      - pattern: \"(?:apiKey|secret|password|token|credentials)\\\\s*=\\\\s*(?:process\\\\.env\\\\.[A-Z_]+|config\\\\.[a-zA-Z0-9_]+|['\\\"][^'\\\"]+['\\\"])\"\n        negative_pattern: \"(?:vault|secretsManager|keyVault|secretClient)\"\n        message: \"Insecure secrets management. Consider using a dedicated secrets management solution instead of environment variables or configuration files.\"\n        \n      # Pattern 12: Insecure Randomness\n      - pattern: \"Math\\\\.random\\\\(\\\\)\"\n        location: \"(?:auth|security|token|password|key|iv|nonce|salt)\"\n        message: \"Insecure randomness. Use crypto.randomBytes() or a similar cryptographically secure random number generator for security-sensitive operations.\"\n        \n      # Pattern 13: Lack of Proper Input Sanitization for Templates\n      - pattern: \"(?:template|render|compile|ejs\\\\.render|handlebars\\\\.compile|pug\\\\.render)\\\\([^)]*?(?:(?:\\\\+|\\\\$\\\\{|\\\\`)[^)]*?(?:req\\\\.|request\\\\.|params\\\\.|query\\\\.|body\\\\.|user\\\\.|input\\\\.|form\\\\.))\"\n        message: \"Potential template injection vulnerability. Sanitize user input before using in templates.\"\n        \n      # Pattern 14: Insecure WebSocket Implementation\n      - pattern: \"new\\\\s+WebSocket\\\\([^)]*?\\\\)|io\\\\.on\\\\(['\\\"]connection['\\\"]\"\n        negative_pattern: \"(?:authenticate|authorize|verifyClient|beforeConnect)\"\n        message: \"Potentially insecure WebSocket implementation. Implement proper authentication and authorization for WebSocket connections.\"\n        \n      # Pattern 15: Insecure Cross-Origin Resource Sharing (CORS)\n      - pattern: \"(?:cors\\\\(\\\\{[^}]*?origin\\\\s*:\\\\s*['\\\"]\\\\*['\\\"]|app\\\\.use\\\\(cors\\\\(\\\\{[^}]*?origin\\\\s*:\\\\s*['\\\"]\\\\*['\\\"])\"\n        message: \"Insecure CORS configuration. Avoid using wildcard (*) for CORS origin in production environments.\"\n\n  - type: suggest\n    message: |\n      **JavaScript Secure Design Best Practices:**\n      \n      1. **Defense in Depth Strategy:**\n         - Implement multiple layers of security controls\n         - Don't rely on a single security mechanism\n         - Example:\n           ```javascript\n           // Multiple layers of protection\n           app.use(helmet()); // HTTP security headers\n           app.use(rateLimit()); // Rate limiting\n           app.use(cors({ origin: allowedOrigins })); // Restricted CORS\n           app.use(express.json({ limit: '10kb' })); // Request size limiting\n           app.use(sanitize()); // Input sanitization\n           ```\n      \n      2. **Proper Access Control:**\n         - Implement role-based access control (RBAC)\n         - Use middleware for authorization checks\n         - Example:\n           ```javascript\n           // Role-based middleware\n           const requireRole = (role) => {\n             return (req, res, next) => {\n               if (!req.user) {\n                 return res.status(401).json({ error: 'Unauthorized' });\n               }\n               \n               if (req.user.role !== role) {\n                 return res.status(403).json({ error: 'Forbidden' });\n               }\n               \n               next();\n             };\n           };\n           \n           // Apply to routes\n           router.get('/admin/users', \n             authenticate, \n             requireRole('admin'), \n             adminController.listUsers\n           );\n           ```\n      \n      3. **Rate Limiting:**\n         - Implement rate limiting for all API endpoints\n         - Use different limits for different endpoints based on sensitivity\n         - Example:\n           ```javascript\n           const rateLimit = require('express-rate-limit');\n           \n           // General API rate limit\n           const apiLimiter = rateLimit({\n             windowMs: 15 * 60 * 1000, // 15 minutes\n             max: 100, // limit each IP to 100 requests per windowMs\n             standardHeaders: true,\n             legacyHeaders: false,\n           });\n           \n           // More strict limit for authentication endpoints\n           const authLimiter = rateLimit({\n             windowMs: 15 * 60 * 1000,\n             max: 5, // limit each IP to 5 login attempts per windowMs\n             standardHeaders: true,\n             legacyHeaders: false,\n           });\n           \n           // Apply rate limiters\n           app.use('/api/', apiLimiter);\n           app.use('/api/auth/', authLimiter);\n           ```\n      \n      4. **Input Validation:**\n         - Validate all user inputs using schema validation\n         - Implement both client and server-side validation\n         - Example:\n           ```javascript\n           const Joi = require('joi');\n           \n           // Define validation schema\n           const userSchema = Joi.object({\n             username: Joi.string().alphanum().min(3).max(30).required(),\n             email: Joi.string().email().required(),\n             password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{8,30}$')).required(),\n             role: Joi.string().valid('user', 'admin').default('user')\n           });\n           \n           // Validation middleware\n           const validateUser = (req, res, next) => {\n             const { error } = userSchema.validate(req.body);\n             if (error) {\n               return res.status(400).json({ error: error.details[0].message });\n             }\n             next();\n           };\n           \n           // Apply validation\n           router.post('/users', validateUser, userController.create);\n           ```\n      \n      5. **Proper Error Handling:**\n         - Implement centralized error handling\n         - Avoid exposing sensitive information in error messages\n         - Example:\n           ```javascript\n           // Centralized error handler\n           app.use((err, req, res, next) => {\n             // Log error for internal use\n             console.error(err.stack);\n             \n             // Send appropriate response to client\n             const statusCode = err.statusCode || 500;\n             res.status(statusCode).json({\n               status: 'error',\n               message: statusCode === 500 ? 'Internal server error' : err.message\n             });\n           });\n           \n           // Custom error class\n           class AppError extends Error {\n             constructor(message, statusCode) {\n               super(message);\n               this.statusCode = statusCode;\n               this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\n               this.isOperational = true;\n               \n               Error.captureStackTrace(this, this.constructor);\n             }\n           }\n           \n           // Usage in controllers\n           if (!user) {\n             return next(new AppError('User not found', 404));\n           }\n           ```\n      \n      6. **Secure Authentication Design:**\n         - Use secure password hashing (bcrypt, Argon2)\n         - Implement proper session management\n         - Use secure token validation\n         - Example:\n           ```javascript\n           const bcrypt = require('bcrypt');\n           const jwt = require('jsonwebtoken');\n           \n           // Password hashing\n           const hashPassword = async (password) => {\n             const salt = await bcrypt.genSalt(12);\n             return bcrypt.hash(password, salt);\n           };\n           \n           // Password verification\n           const verifyPassword = async (password, hashedPassword) => {\n             return await bcrypt.compare(password, hashedPassword);\n           };\n           \n           // Token generation\n           const generateToken = (userId) => {\n             return jwt.sign(\n               { id: userId },\n               process.env.JWT_SECRET,\n               { expiresIn: '1h' }\n             );\n           };\n           \n           // Token verification middleware\n           const verifyToken = (req, res, next) => {\n             const token = req.headers.authorization?.split(' ')[1];\n             \n             if (!token) {\n               return res.status(401).json({ error: 'No token provided' });\n             }\n             \n             try {\n               const decoded = jwt.verify(token, process.env.JWT_SECRET);\n               req.userId = decoded.id;\n               next();\n             } catch (error) {\n               return res.status(401).json({ error: 'Invalid token' });\n             }\n           };\n           ```\n      \n      7. **Comprehensive Logging:**\n         - Log security-relevant events\n         - Include necessary context but avoid sensitive data\n         - Use structured logging\n         - Example:\n           ```javascript\n           const winston = require('winston');\n           \n           // Create logger\n           const logger = winston.createLogger({\n             level: 'info',\n             format: winston.format.json(),\n             defaultMeta: { service: 'user-service' },\n             transports: [\n               new winston.transports.File({ filename: 'error.log', level: 'error' }),\n               new winston.transports.File({ filename: 'combined.log' })\n             ]\n           });\n           \n           // Logging middleware\n           app.use((req, res, next) => {\n             const start = Date.now();\n             \n             res.on('finish', () => {\n               const duration = Date.now() - start;\n               logger.info({\n                 method: req.method,\n                 path: req.path,\n                 statusCode: res.statusCode,\n                 duration,\n                 ip: req.ip,\n                 userId: req.user?.id || 'anonymous'\n               });\n             });\n             \n             next();\n           });\n           \n           // Security event logging\n           logger.warn({\n             event: 'failed_login',\n             username: req.body.username,\n             ip: req.ip,\n             timestamp: new Date().toISOString()\n           });\n           ```\n      \n      8. **Secure Configuration Management:**\n         - Use environment-specific configurations\n         - Validate configuration at startup\n         - Example:\n           ```javascript\n           const Joi = require('joi');\n           \n           // Define environment variables schema\n           const envSchema = Joi.object({\n             NODE_ENV: Joi.string().valid('development', 'production', 'test').required(),\n             PORT: Joi.number().default(3000),\n             DATABASE_URL: Joi.string().required(),\n             JWT_SECRET: Joi.string().min(32).required(),\n             JWT_EXPIRES_IN: Joi.string().default('1h'),\n             CORS_ORIGIN: Joi.string().required()\n           }).unknown();\n           \n           // Validate environment variables\n           const { error, value } = envSchema.validate(process.env);\n           \n           if (error) {\n             throw new Error(`Configuration validation error: ${error.message}`);\n           }\n           \n           // Use validated config\n           const config = {\n             env: value.NODE_ENV,\n             port: value.PORT,\n             db: {\n               url: value.DATABASE_URL\n             },\n             jwt: {\n               secret: value.JWT_SECRET,\n               expiresIn: value.JWT_EXPIRES_IN\n             },\n             cors: {\n               origin: value.CORS_ORIGIN.split(',')\n             }\n           };\n           \n           module.exports = config;\n           ```\n      \n      9. **Secure File Operations:**\n         - Validate and sanitize file paths\n         - Use content-type validation for uploads\n         - Implement file size limits\n         - Example:\n           ```javascript\n           const path = require('path');\n           const fs = require('fs');\n           \n           // Secure file access function\n           const getSecureFilePath = (userInput) => {\n             // Define allowed directory\n             const baseDir = path.resolve(__dirname, '../public/files');\n             \n             // Normalize and resolve full path\n             const normalizedPath = path.normalize(userInput);\n             const fullPath = path.join(baseDir, normalizedPath);\n             \n             // Ensure path is within allowed directory\n             if (!fullPath.startsWith(baseDir)) {\n               throw new Error('Invalid file path');\n             }\n             \n             return fullPath;\n           };\n           \n           // Usage\n           try {\n             const filePath = getSecureFilePath(req.params.filename);\n             const fileContent = fs.readFileSync(filePath, 'utf8');\n             res.send(fileContent);\n           } catch (error) {\n             next(error);\n           }\n           ```\n      \n      10. **Secure WebSocket Implementation:**\n          - Implement authentication for WebSocket connections\n          - Validate and sanitize WebSocket messages\n          - Example:\n            ```javascript\n            const http = require('http');\n            const socketIo = require('socket.io');\n            const jwt = require('jsonwebtoken');\n            \n            const server = http.createServer(app);\n            const io = socketIo(server);\n            \n            // WebSocket authentication middleware\n            io.use((socket, next) => {\n              const token = socket.handshake.auth.token;\n              \n              if (!token) {\n                return next(new Error('Authentication error'));\n              }\n              \n              try {\n                const decoded = jwt.verify(token, process.env.JWT_SECRET);\n                socket.userId = decoded.id;\n                next();\n              } catch (error) {\n                return next(new Error('Authentication error'));\n              }\n            });\n            \n            io.on('connection', (socket) => {\n              console.log(`User ${socket.userId} connected`);\n              \n              // Join user to their own room for private messages\n              socket.join(`user:${socket.userId}`);\n              \n              // Message validation\n              socket.on('message', (data) => {\n                // Validate message data\n                if (!data || !data.content || typeof data.content !== 'string') {\n                  return socket.emit('error', { message: 'Invalid message format' });\n                }\n                \n                // Process message\n                // ...\n              });\n            });\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Rate limiting implementation\n      - pattern: \"(?:rateLimit|rateLimiter|limiter|throttle)\\\\([^)]*?\\\\)\"\n        message: \"Implementing rate limiting for API protection.\"\n      \n      # Check 2: Input validation\n      - pattern: \"(?:validate|sanitize|check|schema|joi|yup|zod|validator|isValid)\"\n        message: \"Using input validation or schema validation.\"\n      \n      # Check 3: Proper error handling\n      - pattern: \"(?:try\\\\s*\\\\{[^}]*?\\\\}\\\\s*catch\\\\s*\\\\([^)]*?\\\\)\\\\s*\\\\{[^}]*?(?:res\\\\.status|next\\\\(err|next\\\\(error|errorHandler))\"\n        message: \"Implementing proper error handling.\"\n      \n      # Check 4: Authentication middleware\n      - pattern: \"(?:authenticate|authorize|requireAuth|isAuthenticated|checkAuth|verifyToken|passport\\\\.authenticate)\"\n        message: \"Using authentication middleware for routes.\"\n      \n      # Check 5: Secure configuration\n      - pattern: \"(?:helmet|cors\\\\(\\\\{[^}]*?origin\\\\s*:\\\\s*(?!['\\\"]*\\\\*)['\\\"])\"\n        message: \"Using secure HTTP headers and CORS configuration.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - javascript\n    - nodejs\n    - browser\n    - design\n    - owasp\n    - language:javascript\n    - framework:express\n    - framework:react\n    - framework:vue\n    - framework:angular\n    - category:security\n    - subcategory:insecure-design\n    - standard:owasp-top10\n    - risk:a04-insecure-design\n  references:\n    - \"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\"\n    - \"https://github.com/OWASP/NodeGoat\"\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-insecure-design.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-insecure-design.mdc",
      "sha": "2a1ccb4e482025c9a66dc359fcde9af9bad4550d"
    }
  },
  {
    "name": "ivangrynenko-javascript-performance",
    "slug": "javascript-performance",
    "displayName": "Javascript Performance",
    "description": "--- description: JavaScript Performance Optimization globs: *.js, *.ts",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: JavaScript Performance Optimization\nglobs: *.js, *.ts\n---\n# JavaScript Performance Optimization\n\n<rule>\nname: javascript_performance_optimization\ndescription: Enforce best practices for optimizing JavaScript performance.\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"\\\\buseState\\\\(([^)]*)\\\\)\"\n        message: \"Avoid unnecessary state updates.\"\n\n      - pattern: \"React\\\\.memo\\\\(\"\n        message: \"Consider using React.memo() to optimize component re-renders.\"\n\n      - pattern: \"\\\\b\\\\(\\\\)\\\\s*=>\\\\s*{\"\n        message: \"Avoid using anonymous functions in render methods.\"\n\n  - type: suggest\n    message: |\n      Performance tips:\n      - Use memoization for expensive calculations.\n      - Optimize FlatList with performance props.\n      - Minimize unnecessary re-renders.\n\nmetadata:\n  priority: high\n  version: 1.0\n</rule>\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-performance.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-performance.mdc",
      "sha": "059ccc403b0ecb180699d19d8f5bfbf5ab7a4d70"
    }
  },
  {
    "name": "ivangrynenko-javascript-security-logging-monitoring-failures",
    "slug": "javascript-security-logging-monitoring-failures",
    "displayName": "Javascript Security Logging Monitoring Failures",
    "description": "Javascript Security Logging Monitoring Failures cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Detect and prevent security logging and monitoring failures in JavaScript applications as defined in OWASP Top 10:2021-A09\nglobs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**\n---\n# JavaScript Security Logging and Monitoring Failures (OWASP A09:2021)\n\n<rule>\nname: javascript_security_logging_monitoring_failures\ndescription: Detect and prevent security logging and monitoring failures in JavaScript applications as defined in OWASP Top 10:2021-A09\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Missing Error Logging\n      - pattern: \"(?:try\\\\s*{[^}]*}\\\\s*catch\\\\s*\\\\([^)]*\\\\)\\\\s*{[^}]*})(?![^;{]*(?:console\\\\.(?:error|warn|log)|logger?\\\\.(?:error|warn|log)|captureException))\"\n        message: \"Error caught without proper logging. Implement structured error logging for security events.\"\n        \n      # Pattern 2: Sensitive Data in Logs\n      - pattern: \"console\\\\.(?:log|warn|error|info|debug)\\\\s*\\\\([^)]*(?:password|token|secret|key|credential|auth|jwt|session|cookie)\"\n        negative_pattern: \"\\\\*\\\\*\\\\*|redact|mask|sanitize\"\n        message: \"Potential sensitive data in logs. Ensure sensitive information is redacted before logging.\"\n        \n      # Pattern 3: Missing Authentication Logging\n      - pattern: \"(?:login|signin|authenticate|auth)\\\\s*\\\\([^)]*\\\\)\\\\s*{[^}]*}\"\n        negative_pattern: \"(?:log|audit|record|track)\\\\s*\\\\(\"\n        message: \"Authentication function without logging. Log authentication attempts, successes, and failures.\"\n        \n      # Pattern 4: Missing Authorization Logging\n      - pattern: \"(?:authorize|checkPermission|hasAccess|isAuthorized|can)\\\\s*\\\\([^)]*\\\\)\\\\s*{[^}]*}\"\n        negative_pattern: \"(?:log|audit|record|track)\\\\s*\\\\(\"\n        message: \"Authorization check without logging. Log access control decisions, especially denials.\"\n        \n      # Pattern 5: Insufficient Error Detail\n      - pattern: \"(?:console\\\\.error|logger?\\\\.error)\\\\s*\\\\([^)]*(?:error|err|exception)\\\\s*\\\\)\"\n        negative_pattern: \"(?:error\\\\.(?:message|stack|code|name)|JSON\\\\.stringify\\\\(error\\\\)|serialize)\"\n        message: \"Error logging with insufficient detail. Include error type, message, stack trace, and context.\"\n        \n      # Pattern 6: Missing Security Event Logging\n      - pattern: \"(?:bruteForce|rateLimit|block|blacklist|suspicious|anomaly|threat|attack|intrusion|malicious)\"\n        negative_pattern: \"(?:log|audit|record|track|monitor|alert|notify)\"\n        message: \"Security event detection without logging. Implement logging for all security-relevant events.\"\n        \n      # Pattern 7: Inconsistent Log Formats\n      - pattern: \"console\\\\.(?:log|warn|error|info|debug)\\\\s*\\\\(\"\n        negative_pattern: \"JSON\\\\.stringify|structured|format\"\n        message: \"Inconsistent log format. Use structured logging with consistent formats for easier analysis.\"\n        \n      # Pattern 8: Missing Log Correlation ID\n      - pattern: \"(?:api|http|fetch|axios|request)\\\\s*\\\\([^)]*\\\\)\"\n        negative_pattern: \"(?:correlationId|requestId|traceId|spanId|context)\"\n        message: \"API request without correlation ID. Include correlation IDs in logs for request tracing.\"\n        \n      # Pattern 9: Missing High-Value Transaction Logging\n      - pattern: \"(?:payment|transaction|order|purchase|transfer|withdraw|deposit)\\\\s*\\\\([^)]*\\\\)\"\n        negative_pattern: \"(?:log|audit|record|track)\"\n        message: \"High-value transaction without audit logging. Implement comprehensive logging for all transactions.\"\n        \n      # Pattern 10: Client-Side Logging Issues\n      - pattern: \"(?:window\\\\.onerror|window\\\\.addEventListener\\\\s*\\\\(\\\\s*['\\\"]error['\\\"])\"\n        negative_pattern: \"(?:send|report|log|capture|track)\"\n        message: \"Client-side error handler without reporting. Implement error reporting to backend services.\"\n        \n      # Pattern 11: Missing Log Levels\n      - pattern: \"console\\\\.log\\\\s*\\\\(\"\n        negative_pattern: \"logger?\\\\.(?:error|warn|info|debug|trace)\"\n        message: \"Using console.log without proper log levels. Implement a logging library with appropriate log levels.\"\n        \n      # Pattern 12: Missing Monitoring Integration\n      - pattern: \"package\\\\.json\"\n        negative_pattern: \"(?:sentry|newrelic|datadog|appinsights|loggly|splunk|elasticsearch|winston|bunyan|pino|loglevel)\"\n        file_pattern: \"package\\\\.json$\"\n        message: \"No logging or monitoring dependencies detected. Consider adding a proper logging library and monitoring integration.\"\n        \n      # Pattern 13: Missing Log Aggregation\n      - pattern: \"(?:docker-compose\\\\.ya?ml|\\\\.env|\\\\.env\\\\.example|Dockerfile)\"\n        negative_pattern: \"(?:sentry|newrelic|datadog|appinsights|loggly|splunk|elasticsearch|logstash|fluentd|kibana)\"\n        file_pattern: \"(?:docker-compose\\\\.ya?ml|\\\\.env|\\\\.env\\\\.example|Dockerfile)$\"\n        message: \"No log aggregation service configured. Implement centralized log collection and analysis.\"\n        \n      # Pattern 14: Missing Health Checks\n      - pattern: \"(?:express|koa|fastify|hapi|http\\\\.createServer)\"\n        negative_pattern: \"(?:health|status|heartbeat|alive|ready)\"\n        message: \"Server without health check endpoint. Implement health checks for monitoring service status.\"\n        \n      # Pattern 15: Missing Rate Limiting Logs\n      - pattern: \"(?:rateLimit|throttle|limiter)\"\n        negative_pattern: \"(?:log|record|track|monitor|alert|notify)\"\n        message: \"Rate limiting without logging. Log rate limit events to detect potential attacks.\"\n\n  - type: suggest\n    message: |\n      **JavaScript Security Logging and Monitoring Best Practices:**\n      \n      1. **Structured Error Logging:**\n         - Use structured logging formats (JSON)\n         - Include contextual information with errors\n         - Example:\n           ```javascript\n           try {\n             // Operation that might fail\n             processUserData(userData);\n           } catch (error) {\n             logger.error({\n               message: 'Failed to process user data',\n               error: {\n                 name: error.name,\n                 message: error.message,\n                 stack: error.stack\n               },\n               userId: userData.id,\n               context: 'user-processing',\n               timestamp: new Date().toISOString()\n             });\n             // Handle the error appropriately\n           }\n           ```\n      \n      2. **Sensitive Data Redaction:**\n         - Redact sensitive information before logging\n         - Use dedicated functions for sanitization\n         - Example:\n           ```javascript\n           function redactSensitiveData(obj) {\n             const sensitiveFields = ['password', 'token', 'secret', 'creditCard', 'ssn'];\n             const redacted = { ...obj };\n             \n             for (const field of sensitiveFields) {\n               if (field in redacted) {\n                 redacted[field] = '***REDACTED***';\n               }\n             }\n             \n             return redacted;\n           }\n           \n           // Usage\n           logger.info({\n             message: 'User login attempt',\n             user: redactSensitiveData(userData),\n             timestamp: new Date().toISOString()\n           });\n           ```\n      \n      3. **Authentication Logging:**\n         - Log all authentication events\n         - Include success/failure status\n         - Example:\n           ```javascript\n           async function authenticateUser(username, password) {\n             try {\n               const user = await User.findOne({ username });\n               \n               if (!user) {\n                 logger.warn({\n                   message: 'Authentication failed: user not found',\n                   username,\n                   ipAddress: req.ip,\n                   userAgent: req.headers['user-agent'],\n                   timestamp: new Date().toISOString()\n                 });\n                 return { success: false, reason: 'invalid_credentials' };\n               }\n               \n               const isValid = await bcrypt.compare(password, user.passwordHash);\n               \n               if (!isValid) {\n                 logger.warn({\n                   message: 'Authentication failed: invalid password',\n                   username,\n                   userId: user.id,\n                   ipAddress: req.ip,\n                   userAgent: req.headers['user-agent'],\n                   timestamp: new Date().toISOString()\n                 });\n                 return { success: false, reason: 'invalid_credentials' };\n               }\n               \n               logger.info({\n                 message: 'User authenticated successfully',\n                 username,\n                 userId: user.id,\n                 ipAddress: req.ip,\n                 userAgent: req.headers['user-agent'],\n                 timestamp: new Date().toISOString()\n               });\n               \n               return { success: true, user };\n             } catch (error) {\n               logger.error({\n                 message: 'Authentication error',\n                 username,\n                 error: {\n                   name: error.name,\n                   message: error.message,\n                   stack: error.stack\n                 },\n                 timestamp: new Date().toISOString()\n               });\n               return { success: false, reason: 'system_error' };\n             }\n           }\n           ```\n      \n      4. **Authorization Logging:**\n         - Log access control decisions\n         - Include user, resource, and action\n         - Example:\n           ```javascript\n           function checkPermission(user, resource, action) {\n             const hasPermission = user.permissions.some(p => \n               p.resource === resource && p.actions.includes(action)\n             );\n             \n             logger.info({\n               message: `Authorization ${hasPermission ? 'granted' : 'denied'}`,\n               userId: user.id,\n               username: user.username,\n               resource,\n               action,\n               decision: hasPermission ? 'allow' : 'deny',\n               timestamp: new Date().toISOString()\n             });\n             \n             return hasPermission;\n           }\n           ```\n      \n      5. **Comprehensive Error Logging:**\n         - Include detailed error information\n         - Add context for troubleshooting\n         - Example:\n           ```javascript\n           // Using a logging library like Winston\n           const winston = require('winston');\n           \n           const logger = winston.createLogger({\n             level: process.env.LOG_LEVEL || 'info',\n             format: winston.format.combine(\n               winston.format.timestamp(),\n               winston.format.json()\n             ),\n             defaultMeta: { service: 'user-service' },\n             transports: [\n               new winston.transports.Console(),\n               new winston.transports.File({ filename: 'error.log', level: 'error' }),\n               new winston.transports.File({ filename: 'combined.log' })\n             ]\n           });\n           \n           // Usage\n           try {\n             // Operation that might fail\n           } catch (error) {\n             logger.error({\n               message: 'Operation failed',\n               operationName: 'processData',\n               error: {\n                 name: error.name,\n                 message: error.message,\n                 code: error.code,\n                 stack: error.stack\n               },\n               context: {\n                 userId: req.user?.id,\n                 requestId: req.id,\n                 path: req.path,\n                 method: req.method\n               }\n             });\n           }\n           ```\n      \n      6. **Security Event Logging:**\n         - Log all security-relevant events\n         - Include detailed context\n         - Example:\n           ```javascript\n           function detectBruteForce(username, ipAddress) {\n             const attempts = getLoginAttempts(username, ipAddress);\n             \n             if (attempts > MAX_ATTEMPTS) {\n               logger.warn({\n                 message: 'Possible brute force attack detected',\n                 username,\n                 ipAddress,\n                 attempts,\n                 threshold: MAX_ATTEMPTS,\n                 action: 'account_temporarily_locked',\n                 timestamp: new Date().toISOString()\n               });\n               \n               // Implement account lockout or IP blocking\n               lockAccount(username, LOCKOUT_DURATION);\n               return true;\n             }\n             \n             return false;\n           }\n           ```\n      \n      7. **Structured Logging Format:**\n         - Use JSON for machine-readable logs\n         - Maintain consistent field names\n         - Example:\n           ```javascript\n           // Using a structured logging library like Pino\n           const pino = require('pino');\n           \n           const logger = pino({\n             level: process.env.LOG_LEVEL || 'info',\n             base: { pid: process.pid, hostname: os.hostname() },\n             timestamp: pino.stdTimeFunctions.isoTime,\n             formatters: {\n               level: (label) => {\n                 return { level: label };\n               }\n             }\n           });\n           \n           // Usage\n           logger.info({\n             msg: 'User profile updated',\n             userId: user.id,\n             changes: ['email', 'preferences'],\n             source: 'api'\n           });\n           ```\n      \n      8. **Request Correlation:**\n         - Use correlation IDs across services\n         - Track request flow through the system\n         - Example:\n           ```javascript\n           // Express middleware for adding correlation IDs\n           const { v4: uuidv4 } = require('uuid');\n           \n           function correlationMiddleware(req, res, next) {\n             // Use existing correlation ID from headers or generate a new one\n             const correlationId = req.headers['x-correlation-id'] || uuidv4();\n             req.correlationId = correlationId;\n             \n             // Add to response headers\n             res.setHeader('x-correlation-id', correlationId);\n             \n             // Add to logger context for this request\n             req.logger = logger.child({ correlationId });\n             \n             next();\n           }\n           \n           // Usage in route handlers\n           app.get('/api/users/:id', (req, res) => {\n             req.logger.info({\n               msg: 'User profile requested',\n               userId: req.params.id,\n               path: req.path,\n               method: req.method\n             });\n             \n             // Process request...\n           });\n           ```\n      \n      9. **Transaction Logging:**\n         - Log all high-value transactions\n         - Include before/after states\n         - Example:\n           ```javascript\n           async function processPayment(userId, amount, paymentMethod) {\n             logger.info({\n               message: 'Payment processing started',\n               userId,\n               amount,\n               paymentMethod: {\n                 type: paymentMethod.type,\n                 lastFour: paymentMethod.lastFour\n               },\n               transactionId: generateTransactionId(),\n               timestamp: new Date().toISOString()\n             });\n             \n             try {\n               const result = await paymentGateway.charge({\n                 amount,\n                 source: paymentMethod.token\n               });\n               \n               logger.info({\n                 message: 'Payment processed successfully',\n                 userId,\n                 amount,\n                 transactionId: result.transactionId,\n                 gatewayReference: result.reference,\n                 status: 'success',\n                 timestamp: new Date().toISOString()\n               });\n               \n               return { success: true, transactionId: result.transactionId };\n             } catch (error) {\n               logger.error({\n                 message: 'Payment processing failed',\n                 userId,\n                 amount,\n                 error: {\n                   name: error.name,\n                   message: error.message,\n                   code: error.code\n                 },\n                 status: 'failed',\n                 timestamp: new Date().toISOString()\n               });\n               \n               return { success: false, error: error.message };\n             }\n           }\n           ```\n      \n      10. **Client-Side Error Reporting:**\n          - Send client errors to the backend\n          - Include browser and user context\n          - Example:\n            ```javascript\n            // Client-side error tracking\n            window.addEventListener('error', function(event) {\n              const errorDetails = {\n                message: event.message,\n                source: event.filename,\n                lineno: event.lineno,\n                colno: event.colno,\n                error: {\n                  stack: event.error?.stack\n                },\n                url: window.location.href,\n                userAgent: navigator.userAgent,\n                timestamp: new Date().toISOString(),\n                // Add user context if available\n                userId: window.currentUser?.id\n              };\n              \n              // Send to backend logging endpoint\n              fetch('/api/log/client-error', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(errorDetails),\n                // Use keepalive to ensure the request completes even if the page is unloading\n                keepalive: true\n              }).catch(err => {\n                // Fallback if the logging endpoint fails\n                console.error('Failed to send error report:', err);\n              });\n            });\n            ```\n      \n      11. **Proper Log Levels:**\n          - Use appropriate log levels\n          - Configure based on environment\n          - Example:\n            ```javascript\n            // Using Winston with proper log levels\n            const winston = require('winston');\n            \n            const logger = winston.createLogger({\n              level: process.env.NODE_ENV === 'production' ? 'info' : 'debug',\n              levels: winston.config.npm.levels,\n              format: winston.format.combine(\n                winston.format.timestamp(),\n                winston.format.json()\n              ),\n              transports: [\n                new winston.transports.Console({\n                  format: winston.format.combine(\n                    winston.format.colorize(),\n                    winston.format.simple()\n                  )\n                })\n              ]\n            });\n            \n            // Usage with appropriate levels\n            logger.error('Critical application error'); // Always logged\n            logger.warn('Potential issue detected'); // Warning conditions\n            logger.info('Normal operational message'); // Normal but significant\n            logger.http('HTTP request received'); // HTTP request logging\n            logger.verbose('Detailed information'); // Detailed debug information\n            logger.debug('Debugging information'); // For developers\n            logger.silly('Extremely detailed tracing'); // Most granular\n            ```\n      \n      12. **Monitoring Integration:**\n          - Integrate with monitoring services\n          - Set up alerts for critical issues\n          - Example:\n            ```javascript\n            // Using Sentry for error monitoring\n            const Sentry = require('@sentry/node');\n            const Tracing = require('@sentry/tracing');\n            const express = require('express');\n            \n            const app = express();\n            \n            Sentry.init({\n              dsn: process.env.SENTRY_DSN,\n              integrations: [\n                new Sentry.Integrations.Http({ tracing: true }),\n                new Tracing.Integrations.Express({ app })\n              ],\n              tracesSampleRate: 1.0\n            });\n            \n            // Use Sentry middleware\n            app.use(Sentry.Handlers.requestHandler());\n            app.use(Sentry.Handlers.tracingHandler());\n            \n            // Your routes here\n            \n            // Error handler\n            app.use(Sentry.Handlers.errorHandler());\n            app.use((err, req, res, next) => {\n              // Custom error handling\n              logger.error({\n                message: 'Express error',\n                error: {\n                  name: err.name,\n                  message: err.message,\n                  stack: err.stack\n                },\n                request: {\n                  path: req.path,\n                  method: req.method,\n                  correlationId: req.correlationId\n                }\n              });\n              \n              res.status(500).json({ error: 'Internal server error' });\n            });\n            ```\n      \n      13. **Log Aggregation:**\n          - Set up centralized log collection\n          - Configure log shipping\n          - Example:\n            ```javascript\n            // Using Winston with Elasticsearch transport\n            const winston = require('winston');\n            const { ElasticsearchTransport } = require('winston-elasticsearch');\n            \n            const esTransportOpts = {\n              level: 'info',\n              clientOpts: {\n                node: process.env.ELASTICSEARCH_URL,\n                auth: {\n                  username: process.env.ELASTICSEARCH_USERNAME,\n                  password: process.env.ELASTICSEARCH_PASSWORD\n                }\n              },\n              indexPrefix: 'app-logs'\n            };\n            \n            const logger = winston.createLogger({\n              transports: [\n                new winston.transports.Console(),\n                new ElasticsearchTransport(esTransportOpts)\n              ]\n            });\n            ```\n            \n            ```yaml\n            # docker-compose.yml example with ELK stack\n            version: '3'\n            services:\n              app:\n                build: .\n                environment:\n                  - NODE_ENV=production\n                  - ELASTICSEARCH_URL=http://elasticsearch:9200\n                depends_on:\n                  - elasticsearch\n              \n              elasticsearch:\n                image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0\n                environment:\n                  - discovery.type=single-node\n                  - ES_JAVA_OPTS=-Xms512m -Xmx512m\n                volumes:\n                  - es_data:/usr/share/elasticsearch/data\n              \n              kibana:\n                image: docker.elastic.co/kibana/kibana:7.14.0\n                ports:\n                  - \"5601:5601\"\n                depends_on:\n                  - elasticsearch\n              \n              logstash:\n                image: docker.elastic.co/logstash/logstash:7.14.0\n                volumes:\n                  - ./logstash/pipeline:/usr/share/logstash/pipeline\n                depends_on:\n                  - elasticsearch\n            \n            volumes:\n              es_data:\n            ```\n      \n      14. **Health Checks and Monitoring:**\n          - Implement health check endpoints\n          - Monitor application status\n          - Example:\n            ```javascript\n            const express = require('express');\n            const app = express();\n            \n            // Basic health check endpoint\n            app.get('/health', (req, res) => {\n              const status = {\n                status: 'UP',\n                timestamp: new Date().toISOString(),\n                uptime: process.uptime(),\n                memoryUsage: process.memoryUsage(),\n                version: process.env.npm_package_version\n              };\n              \n              // Add database health check\n              try {\n                // Check database connection\n                status.database = { status: 'UP' };\n              } catch (error) {\n                status.database = { status: 'DOWN', error: error.message };\n                status.status = 'DEGRADED';\n              }\n              \n              // Add external service health checks\n              // ...\n              \n              // Log health check results\n              logger.debug({\n                message: 'Health check performed',\n                result: status\n              });\n              \n              const statusCode = status.status === 'UP' ? 200 : \n                                status.status === 'DEGRADED' ? 200 : 503;\n              \n              res.status(statusCode).json(status);\n            });\n            \n            // Detailed readiness probe\n            app.get('/ready', async (req, res) => {\n              const checks = [];\n              let isReady = true;\n              \n              // Check database\n              try {\n                await db.ping();\n                checks.push({ component: 'database', status: 'ready' });\n              } catch (error) {\n                isReady = false;\n                checks.push({ \n                  component: 'database', \n                  status: 'not ready',\n                  error: error.message\n                });\n              }\n              \n              // Check cache\n              try {\n                await cache.ping();\n                checks.push({ component: 'cache', status: 'ready' });\n              } catch (error) {\n                isReady = false;\n                checks.push({ \n                  component: 'cache', \n                  status: 'not ready',\n                  error: error.message\n                });\n              }\n              \n              // Log readiness check\n              logger.debug({\n                message: 'Readiness check performed',\n                isReady,\n                checks\n              });\n              \n              res.status(isReady ? 200 : 503).json({\n                status: isReady ? 'ready' : 'not ready',\n                checks,\n                timestamp: new Date().toISOString()\n              });\n            });\n            ```\n      \n      15. **Rate Limiting with Logging:**\n          - Log rate limit events\n          - Track potential abuse\n          - Example:\n            ```javascript\n            const rateLimit = require('express-rate-limit');\n            \n            // Create rate limiter with logging\n            const apiLimiter = rateLimit({\n              windowMs: 15 * 60 * 1000, // 15 minutes\n              max: 100, // limit each IP to 100 requests per windowMs\n              standardHeaders: true,\n              legacyHeaders: false,\n              handler: (req, res, next, options) => {\n                // Log rate limit exceeded\n                logger.warn({\n                  message: 'Rate limit exceeded',\n                  ip: req.ip,\n                  path: req.path,\n                  method: req.method,\n                  userAgent: req.headers['user-agent'],\n                  currentLimit: options.max,\n                  windowMs: options.windowMs,\n                  correlationId: req.correlationId,\n                  userId: req.user?.id,\n                  timestamp: new Date().toISOString()\n                });\n                \n                res.status(options.statusCode).json({\n                  status: 'error',\n                  message: options.message\n                });\n              },\n              // Called on all requests to track usage\n              onLimitReached: (req, res, options) => {\n                // This is called when a client hits the rate limit\n                logger.warn({\n                  message: 'Client reached rate limit',\n                  ip: req.ip,\n                  path: req.path,\n                  method: req.method,\n                  userAgent: req.headers['user-agent'],\n                  correlationId: req.correlationId,\n                  userId: req.user?.id,\n                  timestamp: new Date().toISOString()\n                });\n                \n                // Consider additional actions like temporary IP ban\n                // or sending alerts for potential attacks\n              }\n            });\n            \n            // Apply to all API routes\n            app.use('/api/', apiLimiter);\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Structured Logging\n      - pattern: \"(?:winston|pino|bunyan|loglevel|morgan|log4js)\"\n        message: \"Using a structured logging library.\"\n      \n      # Check 2: Error Logging\n      - pattern: \"try\\\\s*{[^}]*}\\\\s*catch\\\\s*\\\\([^)]*\\\\)\\\\s*{[^}]*(?:logger?\\\\.error|captureException)\\\\s*\\\\([^)]*\\\\)\"\n        message: \"Implementing proper error logging in catch blocks.\"\n      \n      # Check 3: Sensitive Data Handling\n      - pattern: \"(?:redact|mask|sanitize|filter)\\\\s*\\\\([^)]*(?:password|token|secret|key|credential)\"\n        message: \"Implementing sensitive data redaction in logs.\"\n      \n      # Check 4: Correlation IDs\n      - pattern: \"(?:correlationId|requestId|traceId)\"\n        message: \"Using correlation IDs for request tracing.\"\n      \n      # Check 5: Monitoring Integration\n      - pattern: \"(?:sentry|newrelic|datadog|appinsights|loggly|splunk|elasticsearch)\"\n        message: \"Integrating with monitoring or log aggregation services.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - javascript\n    - nodejs\n    - browser\n    - logging\n    - monitoring\n    - owasp\n    - language:javascript\n    - framework:express\n    - framework:react\n    - framework:vue\n    - framework:angular\n    - category:security\n    - subcategory:logging\n    - standard:owasp-top10\n    - risk:a09-security-logging-monitoring-failures\n  references:\n    - \"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html\"\n    - \"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_for_Process_Timing\"\n    - \"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Logging_Vocabulary_Cheat_Sheet.md\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-logging-monitoring\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Application_Logging_Vocabulary_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Transaction_Authorization_Cheat_Sheet.html#monitor-activity\"\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-security-logging-monitoring-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-security-logging-monitoring-failures.mdc",
      "sha": "8fc33ed8e61fa76278dea397527db2539440a018"
    }
  },
  {
    "name": "ivangrynenko-javascript-security-misconfiguration",
    "slug": "javascript-security-misconfiguration",
    "displayName": "Javascript Security Misconfiguration",
    "description": "Javascript Security Misconfiguration cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Detect and prevent security misconfigurations in JavaScript applications as defined in OWASP Top 10:2021-A05\nglobs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**\n---\n# JavaScript Security Misconfiguration (OWASP A05:2021)\n\n<rule>\nname: javascript_security_misconfiguration\ndescription: Detect and prevent security misconfigurations in JavaScript applications as defined in OWASP Top 10:2021-A05\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Missing or Insecure HTTP Security Headers\n      - pattern: \"app\\\\.use\\\\([^)]*?\\\\)\\\\s*(?!.*(?:helmet|frameguard|hsts|noSniff|xssFilter|contentSecurityPolicy))\"\n        location: \"(?:app|server|index)\\\\.(?:js|ts)$\"\n        message: \"Missing HTTP security headers. Consider using Helmet.js to set secure HTTP headers.\"\n        \n      # Pattern 2: Insecure CORS Configuration\n      - pattern: \"app\\\\.use\\\\(cors\\\\(\\\\{[^}]*?origin\\\\s*:\\\\s*['\\\"]\\\\*['\\\"]\\\\s*\\\\}\\\\)\\\\)\"\n        message: \"Insecure CORS configuration. Avoid using wildcard (*) for CORS origin in production environments.\"\n        \n      # Pattern 3: Exposed Environment Variables in Client-Side Code\n      - pattern: \"process\\\\.env\\\\.[A-Z_]+\"\n        location: \"(?:src|components|pages)\"\n        message: \"Exposing environment variables in client-side code. Only use environment variables with NEXT_PUBLIC_, REACT_APP_, or VITE_ prefixes for client-side code.\"\n        \n      # Pattern 4: Insecure Cookie Settings\n      - pattern: \"(?:cookie|cookies|session)\\\\([^)]*?\\\\{[^}]*?(?:secure\\\\s*:\\\\s*false|httpOnly\\\\s*:\\\\s*false|sameSite\\\\s*:\\\\s*['\\\"]none['\\\"])\"\n        message: \"Insecure cookie configuration. Set secure:true, httpOnly:true, and appropriate sameSite value for cookies.\"\n        \n      # Pattern 5: Missing Content Security Policy\n      - pattern: \"app\\\\.use\\\\([^)]*?helmet\\\\([^)]*?\\\\{[^}]*?contentSecurityPolicy\\\\s*:\\\\s*false\"\n        message: \"Content Security Policy (CSP) is disabled. Enable and configure CSP to prevent XSS attacks.\"\n        \n      # Pattern 6: Debug Information Exposure\n      - pattern: \"app\\\\.use\\\\([^)]*?morgan\\\\(['\\\"]dev['\\\"]\\\\)|console\\\\.(?:log|debug|info|warn|error)\\\\(\"\n        location: \"(?:app|server|index)\\\\.(?:js|ts)$\"\n        message: \"Debug information might be exposed in production. Ensure logging is properly configured based on the environment.\"\n        \n      # Pattern 7: Insecure Server Configuration\n      - pattern: \"app\\\\.disable\\\\(['\\\"]x-powered-by['\\\"]\\\\)\"\n        negative_pattern: true\n        location: \"(?:app|server|index)\\\\.(?:js|ts)$\"\n        message: \"X-Powered-By header is not disabled. Use app.disable('x-powered-by') to hide technology information.\"\n        \n      # Pattern 8: Directory Listing Enabled\n      - pattern: \"express\\\\.static\\\\([^)]*?\\\\{[^}]*?index\\\\s*:\\\\s*false\"\n        message: \"Directory listing might be enabled. Set index:true or provide an index file to prevent directory listing.\"\n        \n      # Pattern 9: Missing Rate Limiting\n      - pattern: \"app\\\\.(?:get|post|put|delete|patch)\\\\([^)]*?['\\\"](?:/api|/login|/register|/auth)['\\\"]\"\n        negative_pattern: \"(?:rateLimit|rateLimiter|limiter|throttle)\"\n        message: \"Missing rate limiting for sensitive endpoints. Implement rate limiting to prevent brute force attacks.\"\n        \n      # Pattern 10: Insecure WebSocket Configuration\n      - pattern: \"new\\\\s+WebSocket\\\\([^)]*?\\\\)|io\\\\.on\\\\(['\\\"]connection['\\\"]\"\n        negative_pattern: \"(?:wss://|https://)\"\n        message: \"Potentially insecure WebSocket connection. Use secure WebSocket (wss://) in production.\"\n        \n      # Pattern 11: Hardcoded Configuration Values\n      - pattern: \"(?:apiKey|secret|password|token|credentials)\\\\s*=\\\\s*['\\\"][^'\\\"]+['\\\"]\"\n        message: \"Hardcoded configuration values. Use environment variables or a secure configuration management system.\"\n        \n      # Pattern 12: Insecure SSL/TLS Configuration\n      - pattern: \"https\\\\.createServer\\\\([^)]*?\\\\{[^}]*?rejectUnauthorized\\\\s*:\\\\s*false\"\n        message: \"Insecure SSL/TLS configuration. Never set rejectUnauthorized:false in production.\"\n        \n      # Pattern 13: Missing Security Middleware\n      - pattern: \"express\\\\(\\\\)|require\\\\(['\\\"]express['\\\"]\\\\)\"\n        negative_pattern: \"(?:helmet|cors|rateLimit|bodyParser\\\\.json\\\\(\\\\{\\\\s*limit|express\\\\.json\\\\(\\\\{\\\\s*limit)\"\n        location: \"(?:app|server|index)\\\\.(?:js|ts)$\"\n        message: \"Missing essential security middleware. Consider using helmet, cors, rate limiting, and request size limiting.\"\n        \n      # Pattern 14: Insecure Error Handling\n      - pattern: \"app\\\\.use\\\\([^)]*?function\\\\s*\\\\([^)]*?err[^)]*?\\\\)\\\\s*\\\\{[^}]*?res\\\\.status[^}]*?err(?:\\\\.message|\\\\.stack)\"\n        message: \"Insecure error handling. Avoid exposing error details like stack traces to clients in production.\"\n        \n      # Pattern 15: Outdated Dependencies Warning\n      - pattern: \"(?:\\\"dependencies\\\"|\\\"devDependencies\\\")\\\\s*:\\\\s*\\\\{[^}]*?['\\\"](?:express|react|vue|angular|next|nuxt|axios)['\\\"]\\\\s*:\\\\s*['\\\"]\\\\^?\\\\d+\\\\.\\\\d+\\\\.\\\\d+['\\\"]\"\n        location: \"package\\\\.json$\"\n        message: \"Check for outdated dependencies. Regularly update dependencies to avoid known vulnerabilities.\"\n\n  - type: suggest\n    message: |\n      **JavaScript Security Configuration Best Practices:**\n      \n      1. **HTTP Security Headers:**\n         - Use Helmet.js to set secure HTTP headers\n         - Configure Content Security Policy (CSP)\n         - Example:\n           ```javascript\n           const helmet = require('helmet');\n           \n           // Basic usage\n           app.use(helmet());\n           \n           // Custom CSP configuration\n           app.use(\n             helmet.contentSecurityPolicy({\n               directives: {\n                 defaultSrc: [\"'self'\"],\n                 scriptSrc: [\"'self'\", \"'unsafe-inline'\", 'trusted-cdn.com'],\n                 styleSrc: [\"'self'\", \"'unsafe-inline'\", 'trusted-cdn.com'],\n                 imgSrc: [\"'self'\", 'data:', 'trusted-cdn.com'],\n                 connectSrc: [\"'self'\", 'api.yourdomain.com'],\n                 fontSrc: [\"'self'\", 'trusted-cdn.com'],\n                 objectSrc: [\"'none'\"],\n                 mediaSrc: [\"'self'\"],\n                 frameSrc: [\"'none'\"],\n                 upgradeInsecureRequests: [],\n               },\n             })\n           );\n           ```\n      \n      2. **Secure CORS Configuration:**\n         - Specify allowed origins explicitly\n         - Configure appropriate CORS options\n         - Example:\n           ```javascript\n           const cors = require('cors');\n           \n           // Define allowed origins\n           const allowedOrigins = [\n             'https://yourdomain.com',\n             'https://app.yourdomain.com',\n             'https://admin.yourdomain.com'\n           ];\n           \n           // Configure CORS\n           app.use(cors({\n             origin: function(origin, callback) {\n               // Allow requests with no origin (like mobile apps, curl, etc.)\n               if (!origin) return callback(null, true);\n               \n               if (allowedOrigins.indexOf(origin) === -1) {\n                 const msg = 'The CORS policy for this site does not allow access from the specified Origin.';\n                 return callback(new Error(msg), false);\n               }\n               \n               return callback(null, true);\n             },\n             methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n             credentials: true,\n             maxAge: 86400 // 24 hours\n           }));\n           ```\n      \n      3. **Environment-Based Configuration:**\n         - Use different configurations for development and production\n         - Validate configuration at startup\n         - Example:\n           ```javascript\n           const express = require('express');\n           const helmet = require('helmet');\n           const morgan = require('morgan');\n           \n           const app = express();\n           \n           // Environment-specific configuration\n           if (process.env.NODE_ENV === 'production') {\n             // Production settings\n             app.use(helmet());\n             app.use(morgan('combined'));\n             app.set('trust proxy', 1); // Trust first proxy\n             \n             // Disable X-Powered-By header\n             app.disable('x-powered-by');\n           } else {\n             // Development settings\n             app.use(morgan('dev'));\n           }\n           \n           // Validate required environment variables\n           const requiredEnvVars = ['DATABASE_URL', 'JWT_SECRET'];\n           for (const envVar of requiredEnvVars) {\n             if (!process.env[envVar]) {\n               console.error(`Error: Environment variable ${envVar} is required`);\n               process.exit(1);\n             }\n           }\n           ```\n      \n      4. **Secure Cookie Configuration:**\n         - Set secure, httpOnly, and sameSite attributes\n         - Use signed cookies when appropriate\n         - Example:\n           ```javascript\n           const session = require('express-session');\n           \n           app.use(session({\n             secret: process.env.SESSION_SECRET,\n             name: 'sessionId', // Custom cookie name instead of default\n             cookie: {\n               secure: process.env.NODE_ENV === 'production', // HTTPS only in production\n               httpOnly: true, // Prevents client-side JS from reading the cookie\n               sameSite: 'lax', // Controls when cookies are sent with cross-site requests\n               maxAge: 3600000, // 1 hour in milliseconds\n               domain: process.env.NODE_ENV === 'production' ? '.yourdomain.com' : undefined\n             },\n             resave: false,\n             saveUninitialized: false\n           }));\n           ```\n      \n      5. **Request Size Limiting:**\n         - Limit request body size to prevent DoS attacks\n         - Example:\n           ```javascript\n           // Using express built-in middleware\n           app.use(express.json({ limit: '10kb' }));\n           app.use(express.urlencoded({ extended: true, limit: '10kb' }));\n           \n           // Or using body-parser\n           const bodyParser = require('body-parser');\n           app.use(bodyParser.json({ limit: '10kb' }));\n           app.use(bodyParser.urlencoded({ extended: true, limit: '10kb' }));\n           ```\n      \n      6. **Proper Error Handling:**\n         - Use a centralized error handler\n         - Don't expose sensitive information in error responses\n         - Example:\n           ```javascript\n           // Custom error class\n           class AppError extends Error {\n             constructor(message, statusCode) {\n               super(message);\n               this.statusCode = statusCode;\n               this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';\n               this.isOperational = true;\n               \n               Error.captureStackTrace(this, this.constructor);\n             }\n           }\n           \n           // Global error handling middleware\n           app.use((err, req, res, next) => {\n             err.statusCode = err.statusCode || 500;\n             err.status = err.status || 'error';\n             \n             // Different handling for development and production\n             if (process.env.NODE_ENV === 'development') {\n               res.status(err.statusCode).json({\n                 status: err.status,\n                 error: err,\n                 message: err.message,\n                 stack: err.stack\n               });\n             } else if (process.env.NODE_ENV === 'production') {\n               // Only send operational errors to the client\n               if (err.isOperational) {\n                 res.status(err.statusCode).json({\n                   status: err.status,\n                   message: err.message\n                 });\n               } else {\n                 // Log programming or unknown errors\n                 console.error('ERROR 💥', err);\n                 \n                 // Send generic message\n                 res.status(500).json({\n                   status: 'error',\n                   message: 'Something went wrong'\n                 });\n               }\n             }\n           });\n           ```\n      \n      7. **Rate Limiting:**\n         - Apply rate limiting to sensitive endpoints\n         - Use different limits for different endpoints\n         - Example:\n           ```javascript\n           const rateLimit = require('express-rate-limit');\n           \n           // Create a rate limiter for API endpoints\n           const apiLimiter = rateLimit({\n             windowMs: 15 * 60 * 1000, // 15 minutes\n             max: 100, // limit each IP to 100 requests per windowMs\n             standardHeaders: true, // Return rate limit info in the `RateLimit-*` headers\n             legacyHeaders: false, // Disable the `X-RateLimit-*` headers\n             message: 'Too many requests from this IP, please try again after 15 minutes'\n           });\n           \n           // Create a stricter rate limiter for authentication endpoints\n           const authLimiter = rateLimit({\n             windowMs: 15 * 60 * 1000, // 15 minutes\n             max: 5, // limit each IP to 5 login attempts per windowMs\n             standardHeaders: true,\n             legacyHeaders: false,\n             message: 'Too many login attempts from this IP, please try again after 15 minutes'\n           });\n           \n           // Apply rate limiters to routes\n           app.use('/api/', apiLimiter);\n           app.use('/api/auth/', authLimiter);\n           ```\n      \n      8. **Secure WebSocket Configuration:**\n         - Use secure WebSocket connections (wss://)\n         - Implement authentication for WebSocket connections\n         - Example:\n           ```javascript\n           const http = require('http');\n           const https = require('https');\n           const socketIo = require('socket.io');\n           const fs = require('fs');\n           \n           let server;\n           \n           // Create secure server in production\n           if (process.env.NODE_ENV === 'production') {\n             const options = {\n               key: fs.readFileSync('/path/to/private.key'),\n               cert: fs.readFileSync('/path/to/certificate.crt')\n             };\n             server = https.createServer(options, app);\n           } else {\n             server = http.createServer(app);\n           }\n           \n           const io = socketIo(server, {\n             cors: {\n               origin: process.env.NODE_ENV === 'production' \n                 ? 'https://yourdomain.com' \n                 : 'http://localhost:3000',\n               methods: ['GET', 'POST'],\n               credentials: true\n             }\n           });\n           \n           // WebSocket authentication middleware\n           io.use((socket, next) => {\n             const token = socket.handshake.auth.token;\n             \n             if (!token) {\n               return next(new Error('Authentication error'));\n             }\n             \n             // Verify token\n             // ...\n             \n             next();\n           });\n           ```\n      \n      9. **Security Dependency Management:**\n         - Regularly update dependencies\n         - Use tools like npm audit or Snyk\n         - Example:\n           ```javascript\n           // package.json scripts\n           {\n             \"scripts\": {\n               \"audit\": \"npm audit\",\n               \"audit:fix\": \"npm audit fix\",\n               \"outdated\": \"npm outdated\",\n               \"update\": \"npm update\",\n               \"prestart\": \"npm audit --production\"\n             }\n           }\n           ```\n      \n      10. **Secure Logging Configuration:**\n          - Configure logging based on environment\n          - Avoid logging sensitive information\n          - Example:\n            ```javascript\n            const winston = require('winston');\n            \n            // Define log levels\n            const levels = {\n              error: 0,\n              warn: 1,\n              info: 2,\n              http: 3,\n              debug: 4,\n            };\n            \n            // Define log level based on environment\n            const level = () => {\n              const env = process.env.NODE_ENV || 'development';\n              return env === 'development' ? 'debug' : 'warn';\n            };\n            \n            // Define log format\n            const format = winston.format.combine(\n              winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss:ms' }),\n              winston.format.printf(\n                (info) => `${info.timestamp} ${info.level}: ${info.message}`\n              )\n            );\n            \n            // Define transports\n            const transports = [\n              new winston.transports.Console(),\n              new winston.transports.File({\n                filename: 'logs/error.log',\n                level: 'error',\n              }),\n              new winston.transports.File({ filename: 'logs/all.log' }),\n            ];\n            \n            // Create the logger\n            const logger = winston.createLogger({\n              level: level(),\n              levels,\n              format,\n              transports,\n            });\n            \n            module.exports = logger;\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Helmet usage\n      - pattern: \"helmet\\\\(\\\\)|frameguard\\\\(\\\\)|hsts\\\\(\\\\)|noSniff\\\\(\\\\)|xssFilter\\\\(\\\\)|contentSecurityPolicy\\\\(\\\\)\"\n        message: \"Using Helmet.js or individual HTTP security headers middleware.\"\n      \n      # Check 2: Secure CORS configuration\n      - pattern: \"cors\\\\(\\\\{[^}]*?origin\\\\s*:\\\\s*(?!['\\\"]*\\\\*)['\\\"]\"\n        message: \"Using secure CORS configuration with specific origins.\"\n      \n      # Check 3: Environment-based configuration\n      - pattern: \"process\\\\.env\\\\.NODE_ENV\\\\s*===\\\\s*['\\\"]production['\\\"]\"\n        message: \"Implementing environment-specific configuration.\"\n      \n      # Check 4: Secure cookie settings\n      - pattern: \"cookie\\\\s*:\\\\s*\\\\{[^}]*?secure\\\\s*:\\\\s*true[^}]*?httpOnly\\\\s*:\\\\s*true\"\n        message: \"Using secure cookie configuration.\"\n      \n      # Check 5: Request size limiting\n      - pattern: \"(?:express|bodyParser)\\\\.json\\\\(\\\\{[^}]*?limit\\\\s*:\"\n        message: \"Implementing request size limiting.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - javascript\n    - nodejs\n    - browser\n    - configuration\n    - owasp\n    - language:javascript\n    - framework:express\n    - framework:react\n    - framework:vue\n    - framework:angular\n    - category:security\n    - subcategory:misconfiguration\n    - standard:owasp-top10\n    - risk:a05-security-misconfiguration\n  references:\n    - \"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html\"\n    - \"https://expressjs.com/en/advanced/best-practice-security.html\"\n    - \"https://helmetjs.github.io/\"\n    - \"https://github.com/OWASP/NodeGoat\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\"\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-security-misconfiguration.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-security-misconfiguration.mdc",
      "sha": "b6acbbb9b31569a01d9cda021ba5e82041d39af3"
    }
  },
  {
    "name": "ivangrynenko-javascript-server-side-request-forgery",
    "slug": "javascript-server-side-request-forgery",
    "displayName": "Javascript Server Side Request Forgery",
    "description": "Javascript Server Side Request Forgery cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Detect and prevent Server-Side Request Forgery (SSRF) vulnerabilities in JavaScript applications as defined in OWASP Top 10:2021-A10\nglobs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**\n---\n# JavaScript Server-Side Request Forgery (OWASP A10:2021)\n\n<rule>\nname: javascript_server_side_request_forgery\ndescription: Detect and prevent Server-Side Request Forgery (SSRF) vulnerabilities in JavaScript applications as defined in OWASP Top 10:2021-A10\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: URL from User Input\n      - pattern: \"(fetch|axios\\\\.get|axios\\\\.post|axios\\\\.put|axios\\\\.delete|axios\\\\.patch|http\\\\.get|http\\\\.request|https\\\\.get|https\\\\.request|\\\\$\\\\.ajax|XMLHttpRequest|got|request|superagent|needle)\\\\s*\\\\([^)]*(?:\\\\$_GET|\\\\$_POST|\\\\$_REQUEST|req\\\\.(?:body|query|params)|request\\\\.(?:body|query|params)|event\\\\.(?:body|queryStringParameters|pathParameters)|params|userInput|data\\\\[\"\n        message: \"Potential SSRF vulnerability: URL constructed from user input. Implement URL validation, allowlisting, or use a URL parser library to validate and sanitize user-provided URLs.\"\n        \n      # Pattern 2: Dynamic URL in HTTP Request\n      - pattern: \"(fetch|axios|http\\\\.get|http\\\\.request|https\\\\.get|https\\\\.request|\\\\$\\\\.ajax|XMLHttpRequest|got|request|superagent|needle)\\\\s*\\\\(\\\\s*['\\\"`]https?:\\\\/\\\\/[^'\\\"`]*['\\\"`]\\\\s*\\\\+\\\\s*\"\n        message: \"Potential SSRF vulnerability: Dynamic URL in HTTP request. Use URL parsing and validation before making the request.\"\n        \n      # Pattern 3: URL Redirection Without Validation\n      - pattern: \"(res\\\\.redirect|res\\\\.location|window\\\\.location|location\\\\.href|location\\\\.replace|location\\\\.assign|location\\\\.port|history\\\\.pushState|history\\\\.replaceState)\\\\s*\\\\([^)]*(?:req\\\\.(?:query|body|params)|request\\\\.(?:query|body|params)|userInput)\"\n        message: \"URL redirection without proper validation may lead to SSRF. Implement strict validation for URLs before redirecting.\"\n        \n      # Pattern 4: Direct IP Address Usage\n      - pattern: \"(fetch|axios\\\\.get|axios\\\\.post|axios\\\\.put|axios\\\\.delete|axios\\\\.patch|http\\\\.get|http\\\\.request|https\\\\.get|https\\\\.request)\\\\s*\\\\(\\\\s*['\\\"`]https?:\\\\/\\\\/\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\"\n        message: \"Direct use of IP addresses in requests may bypass hostname-based restrictions. Consider using allowlisted hostnames instead.\"\n        \n      # Pattern 5: Local Network Access\n      - pattern: \"(fetch|axios\\\\.get|axios\\\\.post|axios\\\\.put|axios\\\\.delete|axios\\\\.patch|http\\\\.get|http\\\\.request|https\\\\.get|https\\\\.request)\\\\s*\\\\(\\\\s*['\\\"`]https?:\\\\/\\\\/(?:localhost|127\\\\.0\\\\.0\\\\.1|0\\\\.0\\\\.0\\\\.0|192\\\\.168\\\\.|10\\\\.|172\\\\.(?:1[6-9]|2[0-9]|3[0-1])\\\\.|::1)\"\n        message: \"Request to internal network address detected. Restrict access to internal resources to prevent SSRF attacks.\"\n        \n      # Pattern 6: File Protocol Usage\n      - pattern: \"(fetch|axios\\\\.get|axios\\\\.post|axios\\\\.put|axios\\\\.delete|axios\\\\.patch|http\\\\.get|http\\\\.request|https\\\\.get|https\\\\.request)\\\\s*\\\\(\\\\s*['\\\"`]file:\\\\/\\\\/\"\n        message: \"Use of file:// protocol may lead to local file access. Block or restrict file:// protocol usage.\"\n        \n      # Pattern 7: Missing URL Validation\n      - pattern: \"(fetch|axios\\\\.get|axios\\\\.post|axios\\\\.put|axios\\\\.delete|axios\\\\.patch|http\\\\.get|http\\\\.request|https\\\\.get|https\\\\.request)\\\\s*\\\\([^)]*\\\\burl\\\\b[^)]*\\\\)\"\n        negative_pattern: \"(validat|sanitiz|check|parse).*\\\\burl\\\\b|allowlist|whitelist|URL\\\\.(parse|canParse)|new URL\\\\(|isValidURL\"\n        message: \"HTTP request without URL validation. Implement URL validation before making external requests.\"\n        \n      # Pattern 8: HTTP Request in User-Defined Function\n      - pattern: \"function\\\\s+[a-zA-Z0-9_]*(?:request|fetch|get|http|curl)\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*(?:fetch|axios|http\\\\.get|http\\\\.request|https\\\\.get|https\\\\.request)\"\n        negative_pattern: \"(validat|sanitiz|check|parse).*\\\\burl\\\\b|allowlist|whitelist|new URL\\\\(|isValidURL\"\n        message: \"User-defined HTTP request function without URL validation. Implement proper URL validation and sanitization.\"\n        \n      # Pattern 9: Proxy Functionality\n      - pattern: \"(?:proxy|forward|relay).*(?:req\\\\.(?:url|path)|request\\\\.(?:url|path))\"\n        negative_pattern: \"(validat|sanitiz|check|parse).*\\\\burl\\\\b|allowlist|whitelist\"\n        message: \"Proxy or request forwarding functionality detected. Implement strict URL validation and allowlisting.\"\n        \n      # Pattern 10: Alternative HTTP Methods\n      - pattern: \"(fetch|axios)\\\\s*\\\\([^)]*method\\\\s*:\\\\s*['\\\"`](?:GET|POST|PUT|DELETE|PATCH|OPTIONS|HEAD)['\\\"`]\"\n        negative_pattern: \"(validat|sanitiz|check|parse).*\\\\burl\\\\b|allowlist|whitelist|new URL\\\\(|isValidURL\"\n        message: \"HTTP request with explicit method without URL validation. Implement URL validation for all HTTP methods.\"\n        \n      # Pattern 11: URL Building from Parts\n      - pattern: \"new URL\\\\s*\\\\((?:[^,)]+,\\\\s*){1,}(?:req\\\\.(?:body|query|params)|request\\\\.(?:body|query|params)|userinput)\"\n        message: \"Building URL with user input. Validate and sanitize all URL components and use an allowlist for base URLs.\"\n        \n      # Pattern 12: Protocol-Relative URLs\n      - pattern: \"(fetch|axios)\\\\s*\\\\(['\\\"`]\\\\/\\\\/[^'\\\"`]+['\\\"`]\"\n        message: \"Protocol-relative URL usage may lead to SSRF. Always specify the protocol and validate URLs.\"\n        \n      # Pattern 13: Express-like Route with URL Parameter\n      - pattern: \"app\\\\.(?:get|post|put|delete|patch)\\\\s*\\\\(['\\\"`][^'\\\"`]*\\\\/:[a-zA-Z0-9_]+(?:\\\\/|['\\\"`])\"\n        negative_pattern: \"(validat|sanitiz|check|parse).*\\\\burl\\\\b|allowlist|whitelist|new URL\\\\(|isValidURL\"\n        message: \"Route with dynamic parameter that might be used in URL construction. Ensure proper validation before making any HTTP requests within this route handler.\"\n        \n      # Pattern 14: URL Parsing without Validation\n      - pattern: \"URL\\\\.parse\\\\s*\\\\(|new URL\\\\s*\\\\(\"\n        negative_pattern: \"try\\\\s*\\\\{|catch\\\\s*\\\\(|validat|sanitiz|check\"\n        message: \"URL parsing without validation or error handling. Implement proper error handling and validation for URL parsing.\"\n        \n      # Pattern 15: Service Discovery / Cloud Metadata Access\n      - pattern: \"(fetch|axios\\\\.get|http\\\\.get)\\\\s*\\\\(['\\\"`]https?:\\\\/\\\\/(?:169\\\\.254\\\\.169\\\\.254|fd00:ec2|metadata\\\\.google|metadata\\\\.azure|169\\\\.254\\\\.169\\\\.254\\\\/latest\\\\/meta-data)\"\n        message: \"Access to cloud service metadata endpoints detected. Restrict access to cloud metadata services to prevent server information disclosure.\"\n\n  - type: suggest\n    message: |\n      **JavaScript Server-Side Request Forgery (SSRF) Prevention Best Practices:**\n      \n      1. **Implement URL Validation and Sanitization:**\n         - Use built-in URL parsing libraries to validate URLs\n         - Validate both the URL format and components\n         - Example:\n           ```javascript\n           function isValidUrl(url) {\n             try {\n               const parsedUrl = new URL(url);\n               // Check protocol is http: or https:\n               if (!/^https?:$/.test(parsedUrl.protocol)) {\n                 return false;\n               }\n               // Additional validation logic here\n               return true;\n             } catch (error) {\n               // Invalid URL format\n               return false;\n             }\n           }\n           \n           // Usage\n           const userProvidedUrl = req.body.targetUrl;\n           if (!isValidUrl(userProvidedUrl)) {\n             return res.status(400).json({ error: 'Invalid URL format or protocol' });\n           }\n           \n           // Now make the request with the validated URL\n           ```\n      \n      2. **Implement Strict Allowlisting:**\n         - Define allowlist of permitted domains and endpoints\n         - Reject requests to any domains not on the allowlist\n         - Example:\n           ```javascript\n           const ALLOWED_DOMAINS = [\n             'api.example.com',\n             'cdn.example.com',\n             'partner-api.trusted-domain.com'\n           ];\n           \n           function isAllowedDomain(url) {\n             try {\n               const parsedUrl = new URL(url);\n               return ALLOWED_DOMAINS.includes(parsedUrl.hostname);\n             } catch (error) {\n               return false;\n             }\n           }\n           \n           // Usage\n           const targetUrl = req.body.webhookUrl;\n           if (!isAllowedDomain(targetUrl)) {\n             logger.warn({\n               message: 'SSRF attempt blocked: domain not in allowlist',\n               url: targetUrl,\n               ip: req.ip,\n               userId: req.user?.id\n             });\n             return res.status(403).json({ error: 'Domain not allowed' });\n           }\n           ```\n      \n      3. **Block Access to Internal Networks:**\n         - Prevent requests to private IP ranges\n         - Block localhost and internal hostnames\n         - Example:\n           ```javascript\n           function isInternalHostname(hostname) {\n             // Check for localhost and common internal hostnames\n             if (hostname === 'localhost' || hostname.endsWith('.local') || hostname.endsWith('.internal')) {\n               return true;\n             }\n             return false;\n           }\n           \n           function isPrivateIP(ip) {\n             // Check for private IP ranges\n             const privateRanges = [\n               /^127\\./,                     // 127.0.0.0/8\n               /^10\\./,                      // 10.0.0.0/8\n               /^172\\.(1[6-9]|2[0-9]|3[0-1])\\./, // 172.16.0.0/12\n               /^192\\.168\\./,                // 192.168.0.0/16\n               /^169\\.254\\./,                // 169.254.0.0/16\n               /^::1$/,                      // localhost IPv6\n               /^f[cd][0-9a-f]{2}:/i,        // fc00::/7 unique local IPv6\n               /^fe80:/i                     // fe80::/10 link-local IPv6\n             ];\n             \n             return privateRanges.some(range => range.test(ip));\n           }\n           \n           function isUrlSafe(url) {\n             try {\n               const parsedUrl = new URL(url);\n               \n               // Block internal hostnames\n               if (isInternalHostname(parsedUrl.hostname)) {\n                 return false;\n               }\n               \n               // Resolve hostname to IP (in real implementation, use async DNS resolution)\n               // This example is simplified - in production you would use DNS resolution\n               let ip;\n               try {\n                 // Note: This is a pseudo-code example\n                 // In real code, you'd use a DNS resolution library\n                 ip = dnsResolve(parsedUrl.hostname);\n                 \n                 // Block private IPs\n                 if (isPrivateIP(ip)) {\n                   return false;\n                 }\n               } catch (error) {\n                 // If DNS resolution fails, err on the side of caution\n                 return false;\n               }\n               \n               return true;\n             } catch (error) {\n               return false;\n             }\n           }\n           ```\n      \n      4. **Disable Dangerous URL Protocols:**\n         - Restrict allowed URL protocols to HTTP and HTTPS\n         - Block file://, ftp://, gopher://, etc.\n         - Example:\n           ```javascript\n           function hasAllowedProtocol(url) {\n             try {\n               const parsedUrl = new URL(url);\n               const allowedProtocols = ['http:', 'https:'];\n               return allowedProtocols.includes(parsedUrl.protocol);\n             } catch (error) {\n               return false;\n             }\n           }\n           \n           // Usage\n           const targetUrl = req.body.documentUrl;\n           if (!hasAllowedProtocol(targetUrl)) {\n             logger.warn({\n               message: 'SSRF attempt blocked: disallowed protocol',\n               url: targetUrl,\n               protocol: new URL(targetUrl).protocol,\n               ip: req.ip\n             });\n             return res.status(403).json({ error: 'URL protocol not allowed' });\n           }\n           ```\n      \n      5. **Implement Network-Level Protection:**\n         - Use firewall rules to block outbound requests to internal networks\n         - Configure proxy servers to restrict external requests\n         - Example:\n           ```javascript\n           // Using a proxy for outbound requests\n           const axios = require('axios');\n           const HttpsProxyAgent = require('https-proxy-agent');\n           \n           // Configure proxy with appropriate controls\n           const httpsAgent = new HttpsProxyAgent({\n             host: 'proxy.example.com',\n             port: 3128,\n             // This proxy should be configured to block access to internal networks\n           });\n           \n           // Make requests through the proxy\n           async function secureExternalRequest(url) {\n             try {\n               const response = await axios.get(url, {\n                 httpsAgent,\n                 timeout: 5000, // Set reasonable timeout\n                 maxRedirects: 2 // Limit redirects\n               });\n               return response.data;\n             } catch (error) {\n               logger.error({\n                 message: 'External request failed',\n                 url,\n                 error: error.message\n               });\n               throw new Error('Failed to fetch external resource');\n             }\n           }\n           ```\n      \n      6. **Use Service-Specific Endpoints:**\n         - Instead of passing full URLs, use service identifiers\n         - Map identifiers to URLs on the server side\n         - Example:\n           ```javascript\n           // Client makes request with service identifier, not raw URL\n           app.get('/proxy-service/:serviceId', async (req, res) => {\n             const { serviceId } = req.params;\n             \n             // Service mapping defined server-side\n             const serviceMap = {\n               'weather-api': 'https://api.weather.example.com/current',\n               'news-feed': 'https://api.news.example.com/feed',\n               'product-info': 'https://api.products.example.com/details'\n             };\n             \n             // Check if service is defined\n             if (!serviceMap[serviceId]) {\n               return res.status(404).json({ error: 'Service not found' });\n             }\n             \n             try {\n               // Make request to mapped URL (not user-controlled)\n               const response = await axios.get(serviceMap[serviceId]);\n               return res.json(response.data);\n             } catch (error) {\n               return res.status(500).json({ error: 'Service request failed' });\n             }\n           });\n           ```\n      \n      7. **Implement Context-Specific Encodings:**\n         - Use context-appropriate encoding for URL parameters\n         - Don't rely solely on standard URL encoding\n         - Example:\n           ```javascript\n           function safeUrl(baseUrl, params) {\n             // Start with a verified base URL\n             const url = new URL(baseUrl);\n             \n             // Add parameters safely\n             for (const [key, value] of Object.entries(params)) {\n               // Ensure values are strings and properly encoded\n               url.searchParams.append(key, String(value));\n             }\n             \n             // Verify the final URL is still valid\n             if (!isAllowedDomain(url.toString())) {\n               throw new Error('URL creation resulted in disallowed domain');\n             }\n             \n             return url.toString();\n           }\n           \n           // Usage\n           try {\n             const apiUrl = safeUrl('https://api.example.com/data', {\n               id: userId,\n               format: 'json'\n             });\n             const response = await axios.get(apiUrl);\n             // Process response\n           } catch (error) {\n             // Handle error\n           }\n           ```\n      \n      8. **Use Defense in Depth:**\n         - Combine multiple validation strategies\n         - Don't rely on a single protection measure\n         - Example:\n           ```javascript\n           async function secureExternalRequest(url, options = {}) {\n             // 1. Validate URL format\n             if (!isValidUrl(url)) {\n               throw new Error('Invalid URL format');\n             }\n             \n             // 2. Check against allowlist\n             if (!isAllowedDomain(url)) {\n               throw new Error('Domain not in allowlist');\n             }\n             \n             // 3. Verify not internal network\n             const parsedUrl = new URL(url);\n             if (await isInternalNetwork(parsedUrl.hostname)) {\n               throw new Error('Access to internal networks not allowed');\n             }\n             \n             // 4. Validate protocol\n             if (!hasAllowedProtocol(url)) {\n               throw new Error('Protocol not allowed');\n             }\n             \n             // 5. Set additional security headers and options\n             const secureOptions = {\n               ...options,\n               timeout: options.timeout || 5000,\n               maxRedirects: options.maxRedirects || 2,\n               headers: {\n                 ...options.headers,\n                 'User-Agent': 'SecureApp/1.0'\n               }\n             };\n             \n             // 6. Make request with all validations passed\n             try {\n               return await axios(url, secureOptions);\n             } catch (error) {\n               logger.error({\n                 message: 'Secure external request failed',\n                 url,\n                 error: error.message\n               });\n               throw new Error('External request failed');\n             }\n           }\n           ```\n      \n      9. **Validate and Sanitize Request Parameters:**\n         - Don't trust any user-supplied input for URL construction\n         - Validate all components used in URL building\n         - Example:\n           ```javascript\n           // API that fetches weather data for a city\n           app.get('/api/weather', async (req, res) => {\n             const { city } = req.query;\n             \n             // 1. Validate parameter exists and is valid\n             if (!city || typeof city !== 'string' || city.length > 100) {\n               return res.status(400).json({ error: 'Invalid city parameter' });\n             }\n             \n             // 2. Sanitize the parameter\n             const sanitizedCity = encodeURIComponent(city.trim());\n             \n             // 3. Construct URL with validated parameter\n             const weatherApiUrl = `https://api.weather.example.com/current?city=${sanitizedCity}`;\n             \n             // 4. Additional validation of the final URL\n             if (!isValidUrl(weatherApiUrl)) {\n               return res.status(400).json({ error: 'Invalid URL construction' });\n             }\n             \n             try {\n               const response = await axios.get(weatherApiUrl);\n               return res.json(response.data);\n             } catch (error) {\n               logger.error({\n                 message: 'Weather API request failed',\n                 city,\n                 error: error.message\n               });\n               return res.status(500).json({ error: 'Failed to fetch weather data' });\n             }\n           });\n           ```\n      \n      10. **Implement Request Timeouts:**\n          - Set appropriate timeouts for all HTTP requests\n          - Prevent long-running SSRF probes\n          - Example:\n            ```javascript\n            async function fetchWithTimeout(url, options = {}) {\n              // Default timeout of 5 seconds\n              const timeout = options.timeout || 5000;\n              \n              // Create an abort controller to handle timeout\n              const controller = new AbortController();\n              const timeoutId = setTimeout(() => controller.abort(), timeout);\n              \n              try {\n                const response = await fetch(url, {\n                  ...options,\n                  signal: controller.signal\n                });\n                \n                clearTimeout(timeoutId);\n                return response;\n              } catch (error) {\n                clearTimeout(timeoutId);\n                if (error.name === 'AbortError') {\n                  throw new Error(`Request timed out after ${timeout}ms`);\n                }\n                throw error;\n              }\n            }\n            \n            // Usage\n            try {\n              const response = await fetchWithTimeout('https://api.example.com/data', {\n                timeout: 3000, // 3 seconds timeout\n                headers: { 'Content-Type': 'application/json' }\n              });\n              const data = await response.json();\n              // Process data\n            } catch (error) {\n              console.error('Request failed:', error.message);\n            }\n            ```\n      \n      11. **Rate Limit External Requests:**\n          - Implement rate limiting for outbound requests\n          - Prevent SSRF probing and DoS attacks\n          - Example:\n            ```javascript\n            const { RateLimiter } = require('limiter');\n            \n            // Create a rate limiter: 100 requests per minute\n            const externalRequestLimiter = new RateLimiter({\n              tokensPerInterval: 100,\n              interval: 'minute'\n            });\n            \n            async function rateLimitedRequest(url, options = {}) {\n              // Check if we have tokens available\n              const remainingRequests = await externalRequestLimiter.removeTokens(1);\n              \n              if (remainingRequests < 0) {\n                throw new Error('Rate limit exceeded for external requests');\n              }\n              \n              // Proceed with the request\n              return axios(url, options);\n            }\n            \n            // Usage\n            app.get('/api/external-data', async (req, res) => {\n              const { url } = req.query;\n              \n              if (!isValidUrl(url) || !isAllowedDomain(url)) {\n                return res.status(403).json({ error: 'URL not allowed' });\n              }\n              \n              try {\n                const response = await rateLimitedRequest(url);\n                return res.json(response.data);\n              } catch (error) {\n                if (error.message === 'Rate limit exceeded for external requests') {\n                  return res.status(429).json({ error: 'Too many requests' });\n                }\n                return res.status(500).json({ error: 'Failed to fetch data' });\n              }\n            });\n            ```\n      \n      12. **Use Web Application Firewalls (WAF):**\n          - Configure WAF rules to detect and block SSRF patterns\n          - Implement server-side firewall rules\n          - Example:\n            ```javascript\n            // Middleware to detect SSRF attack patterns\n            function ssrfProtectionMiddleware(req, res, next) {\n              const url = req.query.url || req.body.url;\n              \n              if (!url) {\n                return next();\n              }\n              \n              // Check for suspicious URL patterns\n              const ssrfPatterns = [\n                /file:\\/\\//i,\n                /^(ftps?|gopher|data|dict):\\/\\//i,\n                /^\\/\\/\\//,\n                /(localhost|127\\.0\\.0\\.1|0\\.0\\.0\\.0|::1)/i,\n                /^(10\\.|172\\.(1[6-9]|2[0-9]|3[0-1])\\.|192\\.168\\.)/\n              ];\n              \n              if (ssrfPatterns.some(pattern => pattern.test(url))) {\n                logger.warn({\n                  message: 'Potential SSRF attack detected',\n                  url,\n                  ip: req.ip,\n                  path: req.path,\n                  method: req.method,\n                  userId: req.user?.id\n                });\n                \n                return res.status(403).json({\n                  error: 'Access denied - suspicious URL detected'\n                });\n              }\n              \n              next();\n            }\n            \n            // Apply middleware to all routes\n            app.use(ssrfProtectionMiddleware);\n            ```\n      \n      13. **Implement Centralized Request Services:**\n          - Create a dedicated service for external requests\n          - Implement all security controls in one place\n          - Example:\n            ```javascript\n            // externalRequestService.js\n            const axios = require('axios');\n            \n            class ExternalRequestService {\n              constructor(options = {}) {\n                this.allowedDomains = options.allowedDomains || [];\n                this.maxRedirects = options.maxRedirects || 2;\n                this.timeout = options.timeout || 5000;\n                this.logger = options.logger || console;\n              }\n              \n              async request(url, options = {}) {\n                // Validate URL\n                if (!this._isValidUrl(url)) {\n                  throw new Error('Invalid URL format');\n                }\n                \n                // Check allowlist\n                if (!this._isAllowedDomain(url)) {\n                  throw new Error('Domain not in allowlist');\n                }\n                \n                // Configure request options\n                const requestOptions = {\n                  ...options,\n                  timeout: options.timeout || this.timeout,\n                  maxRedirects: options.maxRedirects || this.maxRedirects,\n                  validateStatus: status => status >= 200 && status < 300\n                };\n                \n                try {\n                  const response = await axios(url, requestOptions);\n                  return response.data;\n                } catch (error) {\n                  this.logger.error({\n                    message: 'External request failed',\n                    url,\n                    error: error.message\n                  });\n                  throw new Error(`External request failed: ${error.message}`);\n                }\n              }\n              \n              _isValidUrl(url) {\n                try {\n                  const parsedUrl = new URL(url);\n                  return parsedUrl.protocol === 'http:' || parsedUrl.protocol === 'https:';\n                } catch (error) {\n                  return false;\n                }\n              }\n              \n              _isAllowedDomain(url) {\n                try {\n                  const parsedUrl = new URL(url);\n                  return this.allowedDomains.includes(parsedUrl.hostname);\n                } catch (error) {\n                  return false;\n                }\n              }\n            }\n            \n            module.exports = ExternalRequestService;\n            \n            // Usage in application\n            const ExternalRequestService = require('./externalRequestService');\n            \n            const requestService = new ExternalRequestService({\n              allowedDomains: [\n                'api.example.com',\n                'cdn.example.com',\n                'partner.trusted-domain.com'\n              ],\n              logger: appLogger,\n              timeout: 3000\n            });\n            \n            app.get('/api/external-data', async (req, res) => {\n              try {\n                // Use the service for all external requests\n                const data = await requestService.request('https://api.example.com/data');\n                return res.json(data);\n              } catch (error) {\n                return res.status(500).json({ error: error.message });\n              }\n            });\n            ```\n      \n      14. **Monitor and Audit External Requests:**\n          - Log all external requests for audit purposes\n          - Implement anomaly detection\n          - Example:\n            ```javascript\n            // Middleware to log and monitor all external requests\n            function requestMonitoringMiddleware(req, res, next) {\n              // Only intercept routes that might make external requests\n              if (!req.path.startsWith('/api/proxy') && !req.path.startsWith('/api/external')) {\n                return next();\n              }\n              \n              // Store original fetch/http.request methods\n              const originalFetch = global.fetch;\n              const originalHttpRequest = require('http').request;\n              const originalHttpsRequest = require('https').request;\n              \n              // Override fetch\n              global.fetch = async function monitoredFetch(url, options) {\n                const requestId = uuid.v4();\n                const startTime = Date.now();\n                \n                logger.info({\n                  message: 'External request initiated',\n                  requestId,\n                  url,\n                  method: options?.method || 'GET',\n                  userContext: {\n                    userId: req.user?.id,\n                    ip: req.ip,\n                    userAgent: req.headers['user-agent']\n                  },\n                  timestamp: new Date().toISOString()\n                });\n                \n                try {\n                  const response = await originalFetch(url, options);\n                  \n                  // Log successful request\n                  logger.info({\n                    message: 'External request completed',\n                    requestId,\n                    url,\n                    statusCode: response.status,\n                    duration: Date.now() - startTime,\n                    timestamp: new Date().toISOString()\n                  });\n                  \n                  return response;\n                } catch (error) {\n                  // Log failed request\n                  logger.error({\n                    message: 'External request failed',\n                    requestId,\n                    url,\n                    error: error.message,\n                    duration: Date.now() - startTime,\n                    timestamp: new Date().toISOString()\n                  });\n                  \n                  throw error;\n                }\n              };\n              \n              // Similar overrides for http.request and https.request\n              // ...\n              \n              // Continue with the request\n              res.on('finish', () => {\n                // Restore original methods after request completes\n                global.fetch = originalFetch;\n                require('http').request = originalHttpRequest;\n                require('https').request = originalHttpsRequest;\n              });\n              \n              next();\n            }\n            \n            // Apply middleware\n            app.use(requestMonitoringMiddleware);\n            ```\n      \n      15. **Implement Output Validation:**\n          - Validate responses from external services\n          - Use schema validation for expected formats\n          - Example:\n            ```javascript\n            const Joi = require('joi');\n            \n            // Define expected schemas for external APIs\n            const apiSchemas = {\n              weatherApi: Joi.object({\n                location: Joi.string().required(),\n                temperature: Joi.number().required(),\n                conditions: Joi.string().required(),\n                forecast: Joi.array().items(Joi.object())\n              }),\n              \n              userApi: Joi.object({\n                id: Joi.string().required(),\n                name: Joi.string().required(),\n                email: Joi.string().email().required()\n              })\n            };\n            \n            async function validateExternalResponse(data, schemaName) {\n              const schema = apiSchemas[schemaName];\n              \n              if (!schema) {\n                throw new Error(`Schema not found: ${schemaName}`);\n              }\n              \n              try {\n                const result = await schema.validateAsync(data);\n                return result;\n              } catch (error) {\n                logger.error({\n                  message: 'External API response validation failed',\n                  schemaName,\n                  error: error.message,\n                  data: JSON.stringify(data).substring(0, 200) // Log partial data for debugging\n                });\n                \n                throw new Error(`Invalid response format from external API: ${error.message}`);\n              }\n            }\n            \n            // Usage\n            app.get('/api/weather/:city', async (req, res) => {\n              const { city } = req.params;\n              \n              try {\n                // Fetch data from external API\n                const apiUrl = `https://api.weather.example.com/current?city=${encodeURIComponent(city)}`;\n                const response = await axios.get(apiUrl);\n                \n                // Validate the response against the expected schema\n                const validatedData = await validateExternalResponse(response.data, 'weatherApi');\n                \n                // Return the validated data\n                return res.json(validatedData);\n              } catch (error) {\n                return res.status(500).json({ error: error.message });\n              }\n            });\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: URL validation\n      - pattern: \"function\\\\s+(?:isValidUrl|validateUrl|checkUrl)\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*new URL\\\\([^)]*\\\\)\"\n        message: \"Using URL validation function with proper parsing.\"\n      \n      # Check 2: Domain allowlisting\n      - pattern: \"(?:allowlist|whitelist|allowed(?:Domain|Host))\\\\s*=\\\\s*\\\\[\"\n        message: \"Implementing domain allowlisting for outbound requests.\"\n      \n      # Check 3: Private IP filtering\n      - pattern: \"(?:isPrivateIP|isInternalNetwork|blockInternalAddresses)\"\n        message: \"Checking for and blocking private IP addresses.\"\n      \n      # Check 4: Protocol restriction\n      - pattern: \"(?:allowedProtocols|validProtocols)\\\\s*=\\\\s*\\\\[\\\\s*['\\\"]https?:['\\\"]\"\n        message: \"Restricting URL protocols to HTTP/HTTPS only.\"\n      \n      # Check 5: Request timeout implementation\n      - pattern: \"timeout:\\\\s*\\\\d+\"\n        message: \"Setting timeouts for outbound HTTP requests.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - javascript\n    - nodejs\n    - browser\n    - ssrf\n    - owasp\n    - language:javascript\n    - framework:express\n    - framework:react\n    - framework:vue\n    - framework:angular\n    - category:security\n    - subcategory:ssrf\n    - standard:owasp-top10\n    - risk:a10-server-side-request-forgery\n  references:\n    - \"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"\n    - \"https://portswigger.net/web-security/ssrf\"\n    - \"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.md\"\n    - \"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Server-Side_Request_Forgery\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#ssrf-protection\"\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-server-side-request-forgery.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-server-side-request-forgery.mdc",
      "sha": "d50c83558c029b99e5c487c9b4fc0c71c19656d5"
    }
  },
  {
    "name": "ivangrynenko-javascript-software-data-integrity-failures",
    "slug": "javascript-software-data-integrity-failures",
    "displayName": "Javascript Software Data Integrity Failures",
    "description": "Javascript Software Data Integrity Failures cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Detect and prevent software and data integrity failures in JavaScript applications as defined in OWASP Top 10:2021-A08\nglobs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**\n---\n# JavaScript Software and Data Integrity Failures (OWASP A08:2021)\n\n<rule>\nname: javascript_software_data_integrity_failures\ndescription: Detect and prevent software and data integrity failures in JavaScript applications as defined in OWASP Top 10:2021-A08\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Insecure Deserialization\n      - pattern: \"(?:JSON\\\\.parse|eval)\\\\s*\\\\((?:[^)]|\\\\n)*(?:localStorage|sessionStorage|document\\\\.cookie|location|window\\\\.name|fetch|axios|\\\\$\\\\.(?:get|post)|XMLHttpRequest)\"\n        message: \"Insecure deserialization of user-controlled data detected. Validate and sanitize data before parsing JSON or using eval.\"\n        \n      # Pattern 2: Missing Subresource Integrity\n      - pattern: \"<script\\\\s+src=['\\\"][^'\\\"]+['\\\"]\\\\s*>\"\n        negative_pattern: \"integrity=['\\\"]sha(?:256|384|512)-[a-zA-Z0-9+/=]+\"\n        message: \"Script tag without Subresource Integrity (SRI) hash. Add integrity and crossorigin attributes for third-party scripts.\"\n        \n      # Pattern 3: Insecure Package Installation\n      - pattern: \"(?:npm|yarn)\\\\s+(?:install|add)\\\\s+(?:[\\\\w@\\\\-\\\\.\\\\/:]+\\\\s+)*--no-(?:verify|integrity|signature)\"\n        message: \"Package installation with integrity checks disabled. Always verify package integrity during installation.\"\n        \n      # Pattern 4: Insecure Object Deserialization\n      - pattern: \"(?:require|import)\\\\s+['\\\"](?:serialize-javascript|node-serialize|serialize|unserialize|deserialize)['\\\"]\"\n        message: \"Using potentially unsafe serialization/deserialization libraries. Ensure proper validation and sanitization of serialized data.\"\n        \n      # Pattern 5: Missing Dependency Verification\n      - pattern: \"package\\\\.json\"\n        negative_pattern: \"\\\"(?:scripts|devDependencies)\\\":\\\\s*{[^}]*\\\"(?:audit|verify|check)\\\":\\\\s*\\\"(?:npm|yarn)\\\\s+audit\"\n        file_pattern: \"package\\\\.json$\"\n        message: \"Missing dependency verification in package.json. Add npm/yarn audit to your scripts section.\"\n        \n      # Pattern 6: Insecure Dynamic Imports\n      - pattern: \"(?:import|require)\\\\s*\\\\(\\\\s*(?:variable|[a-zA-Z_$][a-zA-Z0-9_$]*|`[^`]*`|'[^']*'|\\\"[^\\\"]*\\\")\\\\s*\\\\)\"\n        negative_pattern: \"(?:allowlist|whitelist|validate)\"\n        message: \"Potentially insecure dynamic imports. Validate or restrict the modules that can be dynamically imported.\"\n        \n      # Pattern 7: Prototype Pollution\n      - pattern: \"Object\\\\.assign\\\\(\\\\s*(?:[^,]+)\\\\s*,\\\\s*(?:JSON\\\\.parse|req\\\\.body|req\\\\.query|req\\\\.params|formData\\\\.get)\"\n        message: \"Potential prototype pollution vulnerability. Use Object.create(null) or sanitize objects before merging.\"\n        \n      # Pattern 8: Missing CI/CD Pipeline Integrity Checks\n      - pattern: \"(?:\\\\.github\\\\/workflows\\\\/|\\\\.gitlab-ci\\\\.yml|azure-pipelines\\\\.yml|Jenkinsfile)\"\n        negative_pattern: \"(?:npm\\\\s+audit|yarn\\\\s+audit|checksum|integrity|verify|signature)\"\n        file_pattern: \"(?:\\\\.github\\\\/workflows\\\\/.*\\\\.ya?ml|\\\\.gitlab-ci\\\\.yml|azure-pipelines\\\\.yml|Jenkinsfile)$\"\n        message: \"Missing security checks in CI/CD pipeline. Add dependency scanning, integrity verification, and signature validation.\"\n        \n      # Pattern 9: Insecure Update Mechanism\n      - pattern: \"(?:update|upgrade|install)\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*?\\\\}\"\n        negative_pattern: \"(?:verify|checksum|hash|signature|integrity)\"\n        message: \"Potentially insecure update mechanism. Implement integrity verification for all updates.\"\n        \n      # Pattern 10: Insecure Plugin Loading\n      - pattern: \"(?:plugin|addon|extension)\\\\.(?:load|register|install|add)\\\\s*\\\\([^)]*\\\\)\"\n        negative_pattern: \"(?:verify|validate|checksum|hash|signature|integrity)\"\n        message: \"Insecure plugin loading mechanism. Implement integrity verification for all plugins.\"\n        \n      # Pattern 11: Insecure Data Binding\n      - pattern: \"(?:eval|new\\\\s+Function|setTimeout|setInterval)\\\\s*\\\\(\\\\s*(?:[^,)]+\\\\.(?:value|innerHTML|innerText|textContent)|[^,)]+\\\\[[^\\\\]]+\\\\])\"\n        message: \"Insecure data binding using eval or Function constructor. Use safer alternatives like JSON.parse or template literals.\"\n        \n      # Pattern 12: Insecure Object Property Assignment\n      - pattern: \"(?:Object\\\\.assign|\\\\{\\\\s*\\\\.\\\\.\\\\.)\"\n        negative_pattern: \"Object\\\\.create\\\\(null\\\\)\"\n        message: \"Potential prototype pollution in object assignment. Use Object.create(null) as the target object or sanitize inputs.\"\n        \n      # Pattern 13: Missing Lock File\n      - pattern: \"package\\\\.json\"\n        negative_pattern: \"package-lock\\\\.json|yarn\\\\.lock\"\n        file_pattern: \"package\\\\.json$\"\n        message: \"Missing lock file for dependency management. Include package-lock.json or yarn.lock in version control.\"\n        \n      # Pattern 14: Insecure Webpack Configuration\n      - pattern: \"webpack\\\\.config\\\\.js\"\n        negative_pattern: \"(?:integrity|sri|subresource|hash|checksum)\"\n        file_pattern: \"webpack\\\\.config\\\\.js$\"\n        message: \"Webpack configuration without integrity checks. Consider enabling SRI for generated assets.\"\n        \n      # Pattern 15: Insecure npm/yarn Configuration\n      - pattern: \"\\\\.npmrc|\\\\.yarnrc\"\n        negative_pattern: \"(?:verify-store|integrity|signature)\"\n        file_pattern: \"(?:\\\\.npmrc|\\\\.yarnrc)$\"\n        message: \"npm/yarn configuration with potentially disabled security features. Ensure integrity checks are enabled.\"\n\n  - type: suggest\n    message: |\n      **JavaScript Software and Data Integrity Failures Best Practices:**\n      \n      1. **Secure Deserialization:**\n         - Validate and sanitize data before deserialization\n         - Use schema validation for JSON data\n         - Example:\n           ```javascript\n           import Ajv from 'ajv';\n           \n           // Define a schema for expected data\n           const schema = {\n             type: 'object',\n             properties: {\n               id: { type: 'integer' },\n               name: { type: 'string' },\n               role: { type: 'string', enum: ['user', 'admin'] }\n             },\n             required: ['id', 'name', 'role'],\n             additionalProperties: false\n           };\n           \n           // Validate data before parsing\n           function safelyParseJSON(data) {\n             try {\n               const parsed = JSON.parse(data);\n               const ajv = new Ajv();\n               const validate = ajv.compile(schema);\n               \n               if (validate(parsed)) {\n                 return { valid: true, data: parsed };\n               } else {\n                 return { valid: false, errors: validate.errors };\n               }\n             } catch (error) {\n               return { valid: false, errors: [error.message] };\n             }\n           }\n           ```\n      \n      2. **Subresource Integrity (SRI):**\n         - Add integrity hashes to external scripts and stylesheets\n         - Example:\n           ```html\n           <script \n             src=\"https://cdn.example.com/library.js\" \n             integrity=\"sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC\" \n             crossorigin=\"anonymous\">\n           </script>\n           ```\n           \n           ```javascript\n           // Programmatically adding a script with SRI\n           function addScriptWithIntegrity(url, integrity) {\n             const script = document.createElement('script');\n             script.src = url;\n             script.integrity = integrity;\n             script.crossOrigin = 'anonymous';\n             document.head.appendChild(script);\n           }\n           ```\n      \n      3. **Dependency Verification:**\n         - Use npm/yarn audit regularly\n         - Implement lockfiles and version pinning\n         - Example:\n           ```json\n           // package.json\n           {\n             \"scripts\": {\n               \"audit\": \"npm audit --production\",\n               \"preinstall\": \"npm audit\",\n               \"verify\": \"npm audit && npm outdated\"\n             }\n           }\n           ```\n           \n           ```javascript\n           // Automated dependency verification in CI/CD\n           // .github/workflows/security.yml\n           // name: Security Checks\n           // on: [push, pull_request]\n           // jobs:\n           //   security:\n           //     runs-on: ubuntu-latest\n           //     steps:\n           //       - uses: actions/checkout@v3\n           //       - uses: actions/setup-node@v3\n           //         with:\n           //           node-version: '16'\n           //       - run: npm audit\n           ```\n      \n      4. **Secure Object Handling:**\n         - Prevent prototype pollution\n         - Use Object.create(null) for empty objects\n         - Example:\n           ```javascript\n           // Prevent prototype pollution\n           function safeObjectMerge(target, source) {\n             // Start with a null prototype object\n             const result = Object.create(null);\n             \n             // Copy properties from target\n             for (const key in target) {\n               if (Object.prototype.hasOwnProperty.call(target, key) && \n                   key !== '__proto__' && \n                   key !== 'constructor' && \n                   key !== 'prototype') {\n                 result[key] = target[key];\n               }\n             }\n             \n             // Copy properties from source\n             for (const key in source) {\n               if (Object.prototype.hasOwnProperty.call(source, key) && \n                   key !== '__proto__' && \n                   key !== 'constructor' && \n                   key !== 'prototype') {\n                 result[key] = source[key];\n               }\n             }\n             \n             return result;\n           }\n           ```\n      \n      5. **Secure Dynamic Imports:**\n         - Validate module paths before importing\n         - Use allowlists for dynamic imports\n         - Example:\n           ```javascript\n           // Allowlist-based dynamic imports\n           const ALLOWED_MODULES = [\n             './components/header',\n             './components/footer',\n             './components/sidebar'\n           ];\n           \n           async function safeImport(modulePath) {\n             if (!ALLOWED_MODULES.includes(modulePath)) {\n               throw new Error(`Module ${modulePath} is not in the allowlist`);\n             }\n             \n             try {\n               return await import(modulePath);\n             } catch (error) {\n               console.error(`Failed to import ${modulePath}:`, error);\n               throw error;\n             }\n           }\n           ```\n      \n      6. **CI/CD Pipeline Security:**\n         - Implement integrity checks in build pipelines\n         - Verify dependencies and artifacts\n         - Example:\n           ```yaml\n           # .github/workflows/build.yml\n           name: Build and Verify\n           on: [push, pull_request]\n           jobs:\n             build:\n               runs-on: ubuntu-latest\n               steps:\n                 - uses: actions/checkout@v3\n                 - uses: actions/setup-node@v3\n                   with:\n                     node-version: '16'\n                 - name: Install dependencies\n                   run: npm ci\n                 - name: Security audit\n                   run: npm audit\n                 - name: Build\n                   run: npm run build\n                 - name: Generate integrity hashes\n                   run: |\n                     cd dist\n                     find . -type f -name \"*.js\" -exec sh -c 'echo \"{}\" $(sha384sum \"{}\" | cut -d \" \" -f 1)' \\; > integrity.txt\n                 - name: Upload artifacts with integrity manifest\n                   uses: actions/upload-artifact@v3\n                   with:\n                     name: build-artifacts\n                     path: |\n                       dist\n                       dist/integrity.txt\n           ```\n      \n      7. **Secure Update Mechanisms:**\n         - Verify integrity of updates before applying\n         - Use digital signatures when possible\n         - Example:\n           ```javascript\n           import crypto from 'crypto';\n           import fs from 'fs';\n           \n           async function verifyUpdate(updateFile, signatureFile, publicKeyFile) {\n             try {\n               const updateData = fs.readFileSync(updateFile);\n               const signature = fs.readFileSync(signatureFile);\n               const publicKey = fs.readFileSync(publicKeyFile);\n               \n               const verify = crypto.createVerify('SHA256');\n               verify.update(updateData);\n               \n               const isValid = verify.verify(publicKey, signature);\n               \n               if (!isValid) {\n                 throw new Error('Update signature verification failed');\n               }\n               \n               return { valid: true, data: updateData };\n             } catch (error) {\n               console.error('Update verification failed:', error);\n               return { valid: false, error: error.message };\n             }\n           }\n           ```\n      \n      8. **Plugin/Extension Security:**\n         - Implement allowlists for plugins\n         - Verify plugin integrity before loading\n         - Example:\n           ```javascript\n           class PluginManager {\n             constructor() {\n               this.plugins = new Map();\n               this.allowedPlugins = new Set(['logger', 'analytics', 'theme']);\n             }\n             \n             async registerPlugin(name, pluginPath, expectedHash) {\n               if (!this.allowedPlugins.has(name)) {\n                 throw new Error(`Plugin ${name} is not in the allowlist`);\n               }\n               \n               // Verify plugin integrity\n               const pluginCode = await fetch(pluginPath).then(r => r.text());\n               const hash = crypto.createHash('sha256').update(pluginCode).digest('hex');\n               \n               if (hash !== expectedHash) {\n                 throw new Error(`Plugin integrity check failed for ${name}`);\n               }\n               \n               // Safe loading using Function constructor instead of eval\n               // Still has security implications but better than direct eval\n               const sandboxedPlugin = new Function('exports', 'require', pluginCode);\n               const exports = {};\n               const safeRequire = (module) => {\n                 // Implement a restricted require function\n                 const allowedModules = ['lodash', 'dayjs'];\n                 if (!allowedModules.includes(module)) {\n                   throw new Error(`Module ${module} is not allowed in plugins`);\n                 }\n                 return require(module);\n               };\n               \n               sandboxedPlugin(exports, safeRequire);\n               this.plugins.set(name, exports);\n               return exports;\n             }\n           }\n           ```\n      \n      9. **Secure Data Binding:**\n         - Avoid eval() and new Function()\n         - Use template literals or frameworks with safe binding\n         - Example:\n           ```javascript\n           // Unsafe:\n           // function updateElement(id, data) {\n           //   const element = document.getElementById(id);\n           //   element.innerHTML = eval('`' + template + '`'); // DANGEROUS!\n           // }\n           \n           // Safe alternative:\n           function updateElement(id, data) {\n             const element = document.getElementById(id);\n             \n             // Use a template literal with explicit interpolation\n             const template = `<div class=\"user-card\">\n               <h2>${escapeHTML(data.name)}</h2>\n               <p>${escapeHTML(data.bio)}</p>\n             </div>`;\n             \n             element.innerHTML = template;\n           }\n           \n           function escapeHTML(str) {\n             return str\n               .replace(/&/g, '&amp;')\n               .replace(/</g, '&lt;')\n               .replace(/>/g, '&gt;')\n               .replace(/\"/g, '&quot;')\n               .replace(/'/g, '&#039;');\n           }\n           ```\n      \n      10. **Secure Configuration Management:**\n          - Validate configurations before use\n          - Use schema validation for config files\n          - Example:\n            ```javascript\n            import Ajv from 'ajv';\n            import fs from 'fs';\n            \n            function loadAndValidateConfig(configPath) {\n              // Define schema for configuration\n              const configSchema = {\n                type: 'object',\n                properties: {\n                  server: {\n                    type: 'object',\n                    properties: {\n                      port: { type: 'integer', minimum: 1024, maximum: 65535 },\n                      host: { type: 'string', format: 'hostname' }\n                    },\n                    required: ['port', 'host']\n                  },\n                  database: {\n                    type: 'object',\n                    properties: {\n                      url: { type: 'string' },\n                      maxConnections: { type: 'integer', minimum: 1 }\n                    },\n                    required: ['url']\n                  }\n                },\n                required: ['server', 'database'],\n                additionalProperties: false\n              };\n              \n              try {\n                const configData = fs.readFileSync(configPath, 'utf8');\n                const config = JSON.parse(configData);\n                \n                const ajv = new Ajv({ allErrors: true });\n                const validate = ajv.compile(configSchema);\n                \n                if (validate(config)) {\n                  return { valid: true, config };\n                } else {\n                  return { valid: false, errors: validate.errors };\n                }\n              } catch (error) {\n                return { valid: false, errors: [error.message] };\n              }\n            }\n            ```\n      \n      11. **Secure Webpack Configuration:**\n          - Enable SRI in webpack\n          - Use content hashing for cache busting\n          - Example:\n            ```javascript\n            // webpack.config.js\n            const SubresourceIntegrityPlugin = require('webpack-subresource-integrity');\n            \n            module.exports = {\n              output: {\n                filename: '[name].[contenthash].js',\n                crossOriginLoading: 'anonymous' // Required for SRI\n              },\n              plugins: [\n                new SubresourceIntegrityPlugin({\n                  hashFuncNames: ['sha384'],\n                  enabled: process.env.NODE_ENV === 'production'\n                })\n              ]\n            };\n            ```\n      \n      12. **Secure npm/yarn Configuration:**\n          - Enable integrity checks\n          - Use lockfiles and exact versions\n          - Example:\n            ```\n            # .npmrc\n            audit=true\n            audit-level=moderate\n            save-exact=true\n            verify-store=true\n            \n            # .yarnrc.yml\n            enableStrictSsl: true\n            enableImmutableInstalls: true\n            checksumBehavior: \"throw\"\n            ```\n      \n      13. **Secure JSON Parsing:**\n          - Use reviver functions with JSON.parse\n          - Example:\n            ```javascript\n            function parseUserData(data) {\n              return JSON.parse(data, (key, value) => {\n                // Sanitize specific fields\n                if (key === 'role' && !['user', 'admin', 'editor'].includes(value)) {\n                  return 'user'; // Default to safe value\n                }\n                \n                // Prevent Date objects from being reconstructed from strings\n                if (typeof value === 'string' && \n                    /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/.test(value)) {\n                  // Return as string, not Date object\n                  return value;\n                }\n                \n                return value;\n              });\n            }\n            ```\n      \n      14. **Content Security Policy (CSP):**\n          - Implement strict CSP headers\n          - Use nonce-based CSP for inline scripts\n          - Example:\n            ```javascript\n            // Express.js example\n            import crypto from 'crypto';\n            import helmet from 'helmet';\n            \n            app.use((req, res, next) => {\n              // Generate a new nonce for each request\n              res.locals.cspNonce = crypto.randomBytes(16).toString('base64');\n              next();\n            });\n            \n            app.use(helmet.contentSecurityPolicy({\n              directives: {\n                defaultSrc: [\"'self'\"],\n                scriptSrc: [\n                  \"'self'\",\n                  (req, res) => `'nonce-${res.locals.cspNonce}'`,\n                  'https://cdn.jsdelivr.net'\n                ],\n                styleSrc: [\"'self'\", 'https://cdn.jsdelivr.net'],\n                // Add other directives as needed\n              }\n            }));\n            \n            // In your template engine, use the nonce:\n            // <script nonce=\"<%= cspNonce %>\">\n            //   // Inline JavaScript\n            // </script>\n            ```\n      \n      15. **Secure Local Storage:**\n          - Validate data before storing and after retrieving\n          - Consider encryption for sensitive data\n          - Example:\n            ```javascript\n            // Simple encryption/decryption for localStorage\n            // Note: This is still client-side and not fully secure\n            class SecureStorage {\n              constructor(secret) {\n                this.secret = secret;\n              }\n              \n              // Set item with validation and encryption\n              setItem(key, value, schema) {\n                // Validate with schema if provided\n                if (schema) {\n                  const ajv = new Ajv();\n                  const validate = ajv.compile(schema);\n                  if (!validate(value)) {\n                    throw new Error(`Invalid data for ${key}: ${ajv.errorsText(validate.errors)}`);\n                  }\n                }\n                \n                // Simple encryption (not for truly sensitive data)\n                const valueStr = JSON.stringify(value);\n                const encrypted = this.encrypt(valueStr);\n                localStorage.setItem(key, encrypted);\n              }\n              \n              // Get item with decryption and validation\n              getItem(key, schema) {\n                const encrypted = localStorage.getItem(key);\n                if (!encrypted) return null;\n                \n                try {\n                  const decrypted = this.decrypt(encrypted);\n                  const value = JSON.parse(decrypted);\n                  \n                  // Validate with schema if provided\n                  if (schema) {\n                    const ajv = new Ajv();\n                    const validate = ajv.compile(schema);\n                    if (!validate(value)) {\n                      console.error(`Retrieved invalid data for ${key}`);\n                      return null;\n                    }\n                  }\n                  \n                  return value;\n                } catch (error) {\n                  console.error(`Failed to retrieve ${key}:`, error);\n                  return null;\n                }\n              }\n              \n              // Simple XOR encryption (not for production use with sensitive data)\n              encrypt(text) {\n                let result = '';\n                for (let i = 0; i < text.length; i++) {\n                  result += String.fromCharCode(text.charCodeAt(i) ^ this.secret.charCodeAt(i % this.secret.length));\n                }\n                return btoa(result);\n              }\n              \n              decrypt(encoded) {\n                const text = atob(encoded);\n                let result = '';\n                for (let i = 0; i < text.length; i++) {\n                  result += String.fromCharCode(text.charCodeAt(i) ^ this.secret.charCodeAt(i % this.secret.length));\n                }\n                return result;\n              }\n            }\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Subresource Integrity\n      - pattern: \"<script\\\\s+[^>]*?integrity=['\\\"]sha(?:256|384|512)-[a-zA-Z0-9+/=]+['\\\"][^>]*?>\"\n        message: \"Using Subresource Integrity (SRI) for external scripts.\"\n      \n      # Check 2: Dependency Verification\n      - pattern: \"\\\"scripts\\\":\\\\s*{[^}]*\\\"(?:audit|verify|check)\\\":\\\\s*\\\"(?:npm|yarn)\\\\s+audit\"\n        message: \"Implementing dependency verification in package.json scripts.\"\n      \n      # Check 3: Lock File Usage\n      - pattern: \"(?:package-lock\\\\.json|yarn\\\\.lock)\"\n        file_pattern: \"(?:package-lock\\\\.json|yarn\\\\.lock)$\"\n        message: \"Using lock files for dependency management.\"\n      \n      # Check 4: Safe Object Creation\n      - pattern: \"Object\\\\.create\\\\(null\\\\)\"\n        message: \"Using Object.create(null) to prevent prototype pollution.\"\n      \n      # Check 5: Schema Validation\n      - pattern: \"(?:ajv|joi|yup|zod|jsonschema|validate)\"\n        message: \"Implementing schema validation for data integrity.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - javascript\n    - nodejs\n    - browser\n    - integrity\n    - owasp\n    - language:javascript\n    - framework:express\n    - framework:react\n    - framework:vue\n    - framework:angular\n    - category:security\n    - subcategory:integrity\n    - standard:owasp-top10\n    - risk:a08-software-data-integrity-failures\n  references:\n    - \"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Third_Party_Javascript_Management_Cheat_Sheet.html\"\n    - \"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\"\n    - \"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/13-Testing_for_Subresource_Integrity\"\n    - \"https://snyk.io/blog/prototype-pollution-javascript/\"\n    - \"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/NPM_Security_Cheat_Sheet.md\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html\"\n    - \"https://owasp.org/www-community/attacks/Prototype_pollution\"\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-software-data-integrity-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-software-data-integrity-failures.mdc",
      "sha": "054508f9bf0e3f750fbde95d6d76aa7aca653bd2"
    }
  },
  {
    "name": "ivangrynenko-javascript-standards",
    "slug": "javascript-standards",
    "displayName": "Javascript Standards",
    "description": "--- description: Standards for JavaScript development in Drupal globs: *.js",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Standards for JavaScript development in Drupal\nglobs: *.js\n---\n# JavaScript Development Standards\n\n<rule>\nname: javascript_standards\ndescription: Enforce JavaScript development standards for Drupal\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"\\\\(function\\\\s*\\\\(\\\\$\\\\)\\\\s*\\\\{[^}]*\\\\}\\\\)\\\\s*\\\\(jQuery\\\\)\"\n        message: \"Use Drupal behaviors instead of IIFE\"\n\n      - pattern: \"\\\\$\\\\('[^']*'\\\\)\"\n        message: \"Cache jQuery selectors for better performance\"\n\n      - pattern: \"\\\\.ajax\\\\(\\\\{[^}]*success:\"\n        message: \"Implement proper error handling for AJAX calls\"\n\n      - pattern: \"var\\\\s+\"\n        message: \"Use const or let instead of var (ES6+)\"\n\n  - type: suggest\n    message: |\n      JavaScript Best Practices:\n      - Use Drupal behaviors for all JavaScript\n      - Implement proper error handling for AJAX\n      - Cache jQuery selectors\n      - Use ES6+ features\n      - Add proper documentation\n      - Follow Drupal JavaScript coding standards\n      - Use proper event delegation\n      - Implement proper error handling\n      - Use async/await for asynchronous operations\n      - Follow proper module pattern\n\n  - type: validate\n    conditions:\n      - pattern: \"Drupal\\\\.behaviors\\\\.\\\\w+\"\n        message: \"Implement JavaScript functionality using Drupal behaviors\"\n\n      - pattern: \"/\\\\*\\\\*[^*]*\\\\*/\"\n        message: \"Add JSDoc documentation for JavaScript functions\"\n\nmetadata:\n  priority: high\n  version: 1.0\n</rule>\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-standards.mdc",
      "sha": "d5899fea69f8feca70870a3e9bf4f720fcc2f7e7"
    }
  },
  {
    "name": "ivangrynenko-javascript-vulnerable-outdated-components",
    "slug": "javascript-vulnerable-outdated-components",
    "displayName": "Javascript Vulnerable Outdated Components",
    "description": "Javascript Vulnerable Outdated Components cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "javascript",
      "java"
    ],
    "content": "---\ndescription: Detect and prevent the use of vulnerable and outdated components in JavaScript applications as defined in OWASP Top 10:2021-A06\nglobs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, !**/node_modules/**, !**/dist/**, !**/build/**, !**/coverage/**\n---\n# JavaScript Vulnerable and Outdated Components (OWASP A06:2021)\n\n<rule>\nname: javascript_vulnerable_outdated_components\ndescription: Detect and prevent the use of vulnerable and outdated components in JavaScript applications as defined in OWASP Top 10:2021-A06\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Outdated Package Versions in package.json\n      - pattern: \"\\\"(dependencies|devDependencies)\\\"\\\\s*:\\\\s*\\\\{[^}]*?\\\"([^\\\"]+)\\\"\\\\s*:\\\\s*\\\"\\\\^?([0-9]+\\\\.[0-9]+\\\\.[0-9]+)\\\"\"\n        location: \"package\\\\.json$\"\n        message: \"Check for outdated dependencies in package.json. Regularly update dependencies to avoid known vulnerabilities.\"\n        \n      # Pattern 2: Direct CDN Links Without Integrity Hashes\n      - pattern: \"<script\\\\s+src=['\\\"]https?://(?:cdn|unpkg|jsdelivr)[^'\\\"]*['\\\"][^>]*(?!integrity=)\"\n        location: \"\\\\.(html|js|jsx|ts|tsx)$\"\n        message: \"CDN resources without integrity hashes. Add integrity and crossorigin attributes to script tags loading external resources.\"\n        \n      # Pattern 3: Hardcoded Library Versions in HTML\n      - pattern: \"<script\\\\s+src=['\\\"][^'\\\"]*(?:jquery|bootstrap|react|vue|angular|lodash|moment)[@-][0-9]+\\\\.[0-9]+\\\\.[0-9]+[^'\\\"]*['\\\"]\"\n        location: \"\\\\.html$\"\n        message: \"Hardcoded library versions in HTML. Consider using a package manager to manage dependencies.\"\n        \n      # Pattern 4: Deprecated Node.js APIs\n      - pattern: \"(?:new Buffer\\\\(|require\\\\(['\\\"]crypto['\\\"]\\\\)\\\\.createCipher\\\\(|require\\\\(['\\\"]crypto['\\\"]\\\\)\\\\.randomBytes\\\\([^,)]+\\\\)|require\\\\(['\\\"]fs['\\\"]\\\\)\\\\.exists\\\\()\"\n        message: \"Using deprecated Node.js APIs. Replace with modern alternatives to avoid security and maintenance issues.\"\n        \n      # Pattern 5: Deprecated Browser APIs\n      - pattern: \"document\\\\.write\\\\(|document\\\\.execCommand\\\\(|escape\\\\(|unescape\\\\(|showModalDialog\\\\(|localStorage\\\\.clear\\\\(\\\\)|sessionStorage\\\\.clear\\\\(\\\\)\"\n        location: \"(?:src|components|pages)\"\n        message: \"Using deprecated browser APIs. Replace with modern alternatives to avoid compatibility and security issues.\"\n        \n      # Pattern 6: Insecure Dependency Loading\n      - pattern: \"require\\\\([^)]*?\\\\+\\\\s*[^)]+\\\\)|import\\\\([^)]*?\\\\+\\\\s*[^)]+\\\\)\"\n        message: \"Dynamic dependency loading with variable concatenation. This can lead to dependency confusion attacks.\"\n        \n      # Pattern 7: Vulnerable Regular Expression Patterns (ReDoS)\n      - pattern: \"new RegExp\\\\([^)]*?(?:\\\\(.*\\\\)\\\\*|\\\\*\\\\+|\\\\+\\\\*|\\\\{\\\\d+,\\\\})\"\n        message: \"Potentially vulnerable regular expression pattern that could lead to ReDoS attacks. Review and optimize the regex pattern.\"\n        \n      # Pattern 8: Insecure Package Installation\n      - pattern: \"npm\\\\s+install\\\\s+(?:--no-save|--no-audit|--no-fund|--force)\"\n        location: \"(?:scripts|Dockerfile|docker-compose\\\\.yml|\\\\.github/workflows)\"\n        message: \"Insecure package installation flags. Avoid using --no-audit, --no-save, or --force flags when installing packages.\"\n        \n      # Pattern 9: Missing Lock Files\n      - pattern: \"package\\\\.json\"\n        location: \"package\\\\.json$\"\n        negative_pattern: \"package-lock\\\\.json|yarn\\\\.lock|pnpm-lock\\\\.yaml\"\n        message: \"Missing lock file. Use package-lock.json, yarn.lock, or pnpm-lock.yaml to ensure dependency consistency.\"\n        \n      # Pattern 10: Insecure Webpack Configuration\n      - pattern: \"webpack\\\\.config\\\\.js\"\n        location: \"webpack\\\\.config\\\\.js$\"\n        negative_pattern: \"(?:noEmitOnErrors|optimization\\\\.minimize)\"\n        message: \"Potentially insecure webpack configuration. Consider enabling noEmitOnErrors and optimization.minimize.\"\n        \n      # Pattern 11: Outdated TypeScript Configuration\n      - pattern: \"\\\"compilerOptions\\\"\\\\s*:\\\\s*\\\\{[^}]*?\\\"target\\\"\\\\s*:\\\\s*\\\"ES5\\\"\"\n        location: \"tsconfig\\\\.json$\"\n        message: \"Outdated TypeScript target. Consider using a more modern target like ES2020 for better security features.\"\n        \n      # Pattern 12: Insecure Package Sources\n      - pattern: \"registry\\\\s*=\\\\s*(?!https://registry\\\\.npmjs\\\\.org)\"\n        location: \"\\\\.npmrc$\"\n        message: \"Using a non-standard npm registry. Ensure you trust the source of your packages.\"\n        \n      # Pattern 13: Missing npm audit in CI/CD\n      - pattern: \"(?:ci|test|build)\\\\s*:\\\\s*\\\"[^\\\"]*?\\\"\"\n        location: \"package\\\\.json$\"\n        negative_pattern: \"npm\\\\s+audit\"\n        message: \"Missing npm audit in CI/CD scripts. Add 'npm audit' to your CI/CD pipeline to detect vulnerabilities.\"\n        \n      # Pattern 14: Insecure Import Maps\n      - pattern: \"<script\\\\s+type=['\\\"]importmap['\\\"][^>]*>[^<]*?\\\"imports\\\"\\\\s*:\\\\s*\\\\{[^}]*?\\\"[^\\\"]+\\\"\\\\s*:\\\\s*\\\"https?://[^\\\"]+\\\"\"\n        negative_pattern: \"integrity=\"\n        message: \"Insecure import maps without integrity checks. Add integrity hashes to import map entries.\"\n        \n      # Pattern 15: Outdated Polyfills\n      - pattern: \"(?:core-js|@babel/polyfill|es6-promise|whatwg-fetch)\"\n        message: \"Using potentially outdated polyfills. Consider using modern alternatives or feature detection.\"\n\n  - type: suggest\n    message: |\n      **JavaScript Vulnerable and Outdated Components Best Practices:**\n      \n      1. **Dependency Management:**\n         - Regularly update dependencies to their latest secure versions\n         - Use tools like npm audit, Snyk, or Dependabot to detect vulnerabilities\n         - Example:\n           ```javascript\n           // Add these scripts to package.json\n           {\n             \"scripts\": {\n               \"audit\": \"npm audit\",\n               \"audit:fix\": \"npm audit fix\",\n               \"outdated\": \"npm outdated\",\n               \"update\": \"npm update\",\n               \"prestart\": \"npm audit --production\"\n             }\n           }\n           ```\n      \n      2. **Lock Files:**\n         - Always use lock files (package-lock.json, yarn.lock, or pnpm-lock.yaml)\n         - Commit lock files to version control\n         - Example:\n           ```bash\n           # Generate a lock file if it doesn't exist\n           npm install\n           \n           # Or for Yarn\n           yarn\n           \n           # Or for pnpm\n           pnpm install\n           ```\n      \n      3. **Subresource Integrity:**\n         - Use integrity hashes when loading resources from CDNs\n         - Example:\n           ```html\n           <script \n             src=\"https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.production.min.js\" \n             integrity=\"sha384-tMH8h3BGESGckSAVGZ82T9n90ztNepwCjSPJ0A7g2vdY8M0oKtDaDGg0G53cysJA\" \n             crossorigin=\"anonymous\">\n           </script>\n           ```\n      \n      4. **Automated Security Scanning:**\n         - Integrate security scanning into your CI/CD pipeline\n         - Example GitHub Actions workflow:\n           ```yaml\n           name: Security Scan\n           \n           on:\n             push:\n               branches: [ main ]\n             pull_request:\n               branches: [ main ]\n             schedule:\n               - cron: '0 0 * * 0'  # Run weekly\n           \n           jobs:\n             security:\n               runs-on: ubuntu-latest\n               steps:\n                 - uses: actions/checkout@v3\n                 - name: Setup Node.js\n                   uses: actions/setup-node@v3\n                   with:\n                     node-version: '18'\n                     cache: 'npm'\n                 - name: Install dependencies\n                   run: npm ci\n                 - name: Run security audit\n                   run: npm audit --audit-level=high\n                 - name: Run Snyk to check for vulnerabilities\n                   uses: snyk/actions/node@master\n                   env:\n                     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n           ```\n      \n      5. **Dependency Pinning:**\n         - Pin dependencies to specific versions to prevent unexpected updates\n         - Example:\n           ```json\n           {\n             \"dependencies\": {\n               \"express\": \"4.18.2\",\n               \"react\": \"18.2.0\",\n               \"lodash\": \"4.17.21\"\n             }\n           }\n           ```\n      \n      6. **Deprecated API Replacement:**\n         - Replace deprecated Node.js APIs with modern alternatives\n         - Example:\n           ```javascript\n           // INSECURE: Using deprecated Buffer constructor\n           const buffer = new Buffer(data);\n           \n           // SECURE: Using Buffer.from()\n           const buffer = Buffer.from(data);\n           \n           // INSECURE: Using deprecated crypto methods\n           const crypto = require('crypto');\n           const cipher = crypto.createCipher('aes-256-cbc', key);\n           \n           // SECURE: Using modern crypto methods\n           const crypto = require('crypto');\n           const iv = crypto.randomBytes(16);\n           const cipher = crypto.createCipheriv('aes-256-cbc', key, iv);\n           ```\n      \n      7. **Browser API Modernization:**\n         - Replace deprecated browser APIs with modern alternatives\n         - Example:\n           ```javascript\n           // INSECURE: Using document.write\n           document.write('<h1>Hello World</h1>');\n           \n           // SECURE: Using DOM manipulation\n           document.getElementById('content').innerHTML = '<h1>Hello World</h1>';\n           \n           // INSECURE: Using escape/unescape\n           const encoded = escape(data);\n           \n           // SECURE: Using encodeURIComponent\n           const encoded = encodeURIComponent(data);\n           ```\n      \n      8. **Safe Dynamic Imports:**\n         - Avoid dynamic imports with variable concatenation\n         - Example:\n           ```javascript\n           // INSECURE: Dynamic import with concatenation\n           const moduleName = userInput;\n           import('./' + moduleName + '.js');\n           \n           // SECURE: Validate input against a whitelist\n           const validModules = ['module1', 'module2', 'module3'];\n           if (validModules.includes(moduleName)) {\n             import(`./${moduleName}.js`);\n           }\n           ```\n      \n      9. **Regular Expression Safety:**\n         - Avoid vulnerable regex patterns that could lead to ReDoS attacks\n         - Example:\n           ```javascript\n           // INSECURE: Vulnerable regex pattern\n           const regex = /^(a+)+$/;\n           \n           // SECURE: Optimized regex pattern\n           const regex = /^a+$/;\n           ```\n      \n      10. **Vendor Management:**\n          - Evaluate the security posture of third-party libraries before use\n          - Prefer libraries with active maintenance and security focus\n          - Example evaluation criteria:\n            - When was the last commit?\n            - How quickly are security issues addressed?\n            - Does the project have a security policy?\n            - Is there a responsible disclosure process?\n            - How many open issues and pull requests exist?\n            - What is the download count and GitHub stars?\n      \n      11. **Runtime Dependency Checking:**\n          - Implement runtime checks for critical dependencies\n          - Example:\n            ```javascript\n            // Check package version at runtime for critical dependencies\n            try {\n              const packageJson = require('some-critical-package/package.json');\n              const semver = require('semver');\n              \n              if (semver.lt(packageJson.version, '2.0.0')) {\n                console.warn('Warning: Using a potentially vulnerable version of some-critical-package');\n              }\n            } catch (err) {\n              console.error('Error checking package version:', err);\n            }\n            ```\n      \n      12. **Minimal Dependencies:**\n          - Minimize the number of dependencies to reduce attack surface\n          - Regularly audit and remove unused dependencies\n          - Example:\n            ```bash\n            # Find unused dependencies\n            npx depcheck\n            \n            # Analyze your bundle size\n            npx webpack-bundle-analyzer\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Using npm audit\n      - pattern: \"\\\"scripts\\\"\\\\s*:\\\\s*\\\\{[^}]*?\\\"audit\\\"\\\\s*:\\\\s*\\\"npm audit\"\n        message: \"Using npm audit to check for vulnerabilities.\"\n      \n      # Check 2: Using lock files\n      - pattern: \"package-lock\\\\.json|yarn\\\\.lock|pnpm-lock\\\\.yaml\"\n        message: \"Using lock files to ensure dependency consistency.\"\n      \n      # Check 3: Using integrity hashes\n      - pattern: \"integrity=['\\\"]sha\\\\d+-[A-Za-z0-9+/=]+['\\\"]\"\n        message: \"Using subresource integrity hashes for external resources.\"\n      \n      # Check 4: Using modern Buffer API\n      - pattern: \"Buffer\\\\.(?:from|alloc|allocUnsafe)\"\n        message: \"Using modern Buffer API instead of deprecated constructor.\"\n      \n      # Check 5: Using dependency scanning in CI\n      - pattern: \"npm\\\\s+audit|snyk\\\\s+test|yarn\\\\s+audit\"\n        location: \"(?:\\\\.github/workflows|\\\\.gitlab-ci\\\\.yml|Jenkinsfile|azure-pipelines\\\\.yml)\"\n        message: \"Integrating dependency scanning in CI/CD pipeline.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - javascript\n    - nodejs\n    - browser\n    - dependencies\n    - owasp\n    - language:javascript\n    - framework:express\n    - framework:react\n    - framework:vue\n    - framework:angular\n    - category:security\n    - subcategory:dependencies\n    - standard:owasp-top10\n    - risk:a06-vulnerable-outdated-components\n  references:\n    - \"https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/NPM_Security_Cheat_Sheet.html\"\n    - \"https://docs.npmjs.com/cli/v8/commands/npm-audit\"\n    - \"https://snyk.io/learn/npm-security/\"\n    - \"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\"\n    - \"https://github.com/OWASP/NodeGoat\"\n    - \"https://owasp.org/www-project-dependency-check/\"\n</rule> \n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/javascript-vulnerable-outdated-components.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/javascript-vulnerable-outdated-components.mdc",
      "sha": "381e90b46dc84c4f1cf7a1ef42b3db9becccb5a4"
    }
  },
  {
    "name": "ivangrynenko-lagoon-docker-compose-standards",
    "slug": "lagoon-docker-compose-standards",
    "displayName": "Lagoon Docker Compose Standards",
    "description": "--- description: Standards for Lagoon Docker Compose configuration globs: docker-compose.yml, docker-compose.*.yml",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standards for Lagoon Docker Compose configuration\nglobs: docker-compose.yml, docker-compose.*.yml\n---\n# Lagoon Docker Compose Standards\n\nEnsures proper Docker Compose configuration for Lagoon deployments, following best practices and Lagoon-specific requirements.\n\n<rule>\nname: lagoon_docker_compose_standards\ndescription: Enforce standards for Lagoon Docker Compose files\nfilters:\n  - type: file_name\n    pattern: \"^docker-compose(\\\\.\\\\w+)?\\\\.yml$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"services:\\\\s+\\\\w+:\\\\s+(?!.*labels:[\\\\s\\\\S]*lagoon)\"\n        message: \"Add Lagoon labels to service definitions for proper Lagoon integration\"\n\n      - pattern: \"version:\\\\s*['\\\"]*2\"\n        message: \"Use Docker Compose format version 3 or higher for compatibility with modern Docker features\"\n\n      - pattern: \"volumes:\\\\s+[^:]+:\\\\s+(?!.*delegated)\"\n        message: \"Use 'delegated' mount consistency for better performance on macOS development environments\"\n        \n      - pattern: \"services:\\\\s+\\\\w+:\\\\s+(?!.*restart:)\"\n        message: \"Define restart policy for services to ensure proper behavior during deployment\"\n\n  - type: suggest\n    message: |\n      ## Lagoon Docker Compose Best Practices:\n      \n      ### Service Configuration\n      - Define service types via labels (e.g., `lagoon.type: nginx`)\n      - Use proper image naming conventions (e.g., `amazeeio/nginx-drupal:latest`)\n      - Set appropriate environment variables using Lagoon variables\n      - Define health checks for critical services\n      - Configure proper networking with Lagoon defaults\n      - Set resource constraints appropriate for each environment\n      \n      ### Volume Configuration\n      - Use named volumes for persistent data\n      - Configure appropriate volume mounts with correct permissions\n      - Use 'delegated' mount consistency for macOS performance\n      - Avoid mounting the entire codebase when possible\n      \n      ### Build Configuration\n      - Use build arguments appropriately\n      - Define proper Dockerfile paths\n      - Use multi-stage builds for smaller images\n      \n      ### Example Service Configuration:\n      ```yaml\n      services:\n        nginx:\n          build:\n            context: .\n            dockerfile: nginx.dockerfile\n          labels:\n            lagoon.type: nginx\n            lagoon.persistent: /app/web/sites/default/files/\n          volumes:\n            - app:/app:delegated\n          depends_on:\n            - php\n          environment:\n            LAGOON_ROUTE: ${LAGOON_ROUTE:-http://project.docker.amazee.io}\n      ```\n\n  - type: validate\n    conditions:\n      - pattern: \"services:\\\\s+cli:\\\\s+(?!.*build:)\"\n        message: \"CLI service should have proper build configuration for Lagoon compatibility\"\n\n      - pattern: \"services:\\\\s+\\\\w+:\\\\s+(?!.*depends_on:)\"\n        message: \"Define service dependencies for proper startup order and container relationships\"\n\n      - pattern: \"networks:\\\\s+(?!.*default:)\"\n        message: \"Configure proper network settings for Lagoon compatibility and service communication\"\n        \n      - pattern: \"services:\\\\s+mariadb:\\\\s+(?!.*image:\\\\s+amazeeio\\\\/mariadb)\"\n        message: \"Use Lagoon-provided MariaDB image for compatibility with Lagoon environment\"\n        \n      - pattern: \"services:\\\\s+\\\\w+:\\\\s+environment:\\\\s+(?!.*\\\\$\\\\{LAGOON)\"\n        message: \"Use Lagoon environment variables with fallbacks for local development\"\n\nmetadata:\n  priority: high\n  version: 1.1\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/lagoon-docker-compose-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/lagoon-docker-compose-standards.mdc",
      "sha": "dfb5a297927cbd34f553d58e5b9103f2d86f7bab"
    }
  },
  {
    "name": "ivangrynenko-lagoon-yml-standards",
    "slug": "lagoon-yml-standards",
    "displayName": "Lagoon Yml Standards",
    "description": "--- description: Standards for Lagoon configuration files and deployment workflows globs: .lagoon.yml, .lagoon.*.yml",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standards for Lagoon configuration files and deployment workflows\nglobs: .lagoon.yml, .lagoon.*.yml\n---\n# Lagoon Configuration Standards\n\nEnsures proper configuration and best practices for Lagoon deployment files, focusing on environment configuration, routes, tasks, and deployment workflows.\n\n<rule>\nname: lagoon_yml_standards\ndescription: Enforce standards for Lagoon configuration files\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(yml|yaml)$\"\n  - type: file_name\n    pattern: \"^\\\\.lagoon(\\\\.\\\\w+)?\\\\.yml$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"environments:\\\\s*[\\\\w-]+:\\\\s*routes:\\\\s*-\\\\s*\\\\w+:\\\\s*-[^:]+:\\\\s*tls-acme:\\\\s*true\"\n        message: \"Ensure tls-acme is set to 'false' until DNS points to Lagoon to prevent certificate issuance failures\"\n\n      - pattern: \"post-rollout:\\\\s*-\\\\s*run:\\\\s*command:\\\\s*drush(?!.*\\\\|\\\\|)\"\n        message: \"Wrap Drush commands in proper error handling using '|| exit 1' to ensure deployment fails on command errors\"\n\n      - pattern: \"pre-rollout:\\\\s*-\\\\s*run:\\\\s*command:\\\\s*(?!.*if)\"\n        message: \"Add conditional checks for pre-rollout tasks to ensure they only run when necessary\"\n\n      - pattern: \"cronjobs:\\\\s*-\\\\s*name:[^\\\\n]*\\\\n\\\\s*schedule:\\\\s*'\\\\*\\\\s*\\\\*'\"\n        message: \"Use 'M' or 'H' notation for randomized cron scheduling to prevent server load spikes\"\n        \n      - pattern: \"routes:\\\\s*-\\\\s*\\\\w+:\\\\s*-[^:]+:\\\\s*(?!.*redirects:)\"\n        message: \"Consider configuring redirects for routes to handle legacy URLs or domain migrations\"\n\n  - type: suggest\n    message: |\n      ## Lagoon Configuration Best Practices:\n      \n      ### Environment Configuration\n      - Use environment-specific configurations for different deployment targets\n      - Define environment types for proper resource allocation\n      - Configure environment variables specific to each environment\n      - Use environment-specific routes and domains\n      \n      ### Routes Configuration\n      - Configure routes with appropriate SSL settings\n      - Set up redirects for legacy URLs\n      - Configure proper insecure traffic handling (Allow or Redirect)\n      - Use wildcard domains for feature branch environments\n      \n      ### Tasks Configuration\n      - Implement proper pre-rollout tasks with error handling\n      - Configure post-rollout tasks with appropriate conditions\n      - Use conditional task execution based on environment\n      - Include database sync in PR environments\n      - Implement proper backup strategies before major changes\n      \n      ### Cron Configuration\n      - Use randomized cron schedules with 'M' and 'H' notation\n      - Set appropriate frequency for different tasks\n      - Ensure cron jobs have proper error handling\n      - Use descriptive names for cron jobs\n      \n      ### Example Configuration:\n      ```yaml\n      environments:\n        main:\n          cronjobs:\n            - name: drush-cron\n              schedule: '*/15 * * * *'\n              command: drush cron\n              service: cli\n          routes:\n            - nginx:\n              - example.com:\n                  tls-acme: true\n                  insecure: Redirect\n                  redirects:\n                    - www.example.com\n          tasks:\n            pre-rollout:\n              - run:\n                  name: Drush pre-update\n                  command: |\n                    if drush status --fields=bootstrap | grep -q \"Successful\"; then\n                      drush state:set system.maintenance_mode 1 -y\n                      drush cr\n                    fi\n                  service: cli\n            post-rollout:\n              - run:\n                  name: Drush post-update\n                  command: |\n                    drush updb -y || exit 1\n                    drush cr\n                    drush state:set system.maintenance_mode 0 -y\n                  service: cli\n      ```\n\n  - type: validate\n    conditions:\n      - pattern: \"environments:\\\\s*[\\\\w-]+:\\\\s*types:\\\\s*[^\\\\n]*\"\n        message: \"Define environment types for proper resource allocation and environment-specific configuration\"\n\n      - pattern: \"tasks:\\\\s*(pre|post)-rollout:\"\n        message: \"Include both pre and post rollout tasks for robust deployments and proper application state management\"\n\n      - pattern: \"routes:\\\\s*-\\\\s*\\\\w+:\\\\s*-[^:]+:\\\\s*insecure:\\\\s*(Allow|Redirect)\"\n        message: \"Configure proper insecure traffic handling to ensure secure access to your application\"\n        \n      - pattern: \"(?!.*backup-strategy:)\"\n        message: \"Consider implementing a backup strategy for critical environments to prevent data loss\"\n        \n      - pattern: \"cronjobs:\\\\s*-\\\\s*name:[^\\\\n]*\\\\n\\\\s*schedule:[^\\\\n]*\\\\n\\\\s*(?!.*service:)\"\n        message: \"Specify the service for cron jobs to ensure they run in the correct container\"\n\nmetadata:\n  priority: critical\n  version: 1.1\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/lagoon-yml-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/lagoon-yml-standards.mdc",
      "sha": "0daa2ac7e6a6826e0edb6a6a2f99410dbef68967"
    }
  },
  {
    "name": "ivangrynenko-multi-agent-coordination",
    "slug": "multi-agent-coordination",
    "displayName": "Multi Agent Coordination",
    "description": "--- description: Multi-agent coordination and workflow standards globs: *.php, *.js, *.ts, *.vue, *.jsx, *.tsx",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Multi-agent coordination and workflow standards\nglobs: *.php, *.js, *.ts, *.vue, *.jsx, *.tsx\n---\n# Multi-Agent Coordination Standards\n\nEnsures consistent coordination between different AI agents and roles.\n\n<rule>\nname: multi_agent_coordination\ndescription: Enforce standards for multi-agent coordination and workflow\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|js|ts|vue|jsx|tsx)$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"// TODO:|#\\\\s*TODO:\"\n        message: \"Convert TODO comments into structured task breakdowns for multi-agent coordination\"\n\n      - pattern: \"function\\\\s+[a-zA-Z]+Agent\\\\s*\\\\([^)]*\\\\)\"\n        message: \"Implement proper agent role separation and communication\"\n\n      - pattern: \"// FIXME:|#\\\\s*FIXME:\"\n        message: \"Convert FIXME into specific tasks with acceptance criteria\"\n\n  - type: suggest\n    message: |\n      Multi-Agent Coordination Best Practices:\n      - Separate Planner and Executor roles\n      - Document task breakdowns and success criteria\n      - Track progress in structured format\n      - Use proper inter-agent communication\n      - Maintain clear role boundaries\n      - Focus on immediate, actionable solutions\n      - Provide context for complex tasks\n      - Use natural language for requirements\n      - Break down complex workflows\n      - Document dependencies between tasks\n\nmetadata:\n  priority: high\n  version: 1.0\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/multi-agent-coordination.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/multi-agent-coordination.mdc",
      "sha": "7ba3a9fcd859aa94e753021b61e1a677a858db94"
    }
  },
  {
    "name": "ivangrynenko-new-pull-request",
    "slug": "new-pull-request",
    "displayName": "New Pull Request",
    "description": "--- description: Use this rule when requested to review a pull request globs:",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Use this rule when requested to review a pull request\nglobs: \nalwaysApply: false\n---\n# Code Review Agent Instructions\n\nYou are a senior technical lead and architect conducting automated code reviews for GitHub pull requests across multiple technology stacks (Drupal, Vue.js, React, etc.). Your role is to evaluate code changes against issue requirements and coding standards, manage GitHub labels for workflow automation, and update Freshdesk issues with review findings.\n\n## Primary Objectives\n\n1. **Requirement Fulfilment Analysis (50%)**: Verify code changes satisfy issue requirements\n2. **Code Standards Compliance (30%)**: Ensure adherence to technology-specific coding standards and best practices  \n3. **Security Assessment (20%)**: Validate OWASP security standards and framework-specific security practices\n4. **Label Management**: Apply appropriate GitHub labels for workflow automation\n5. **Freshdesk Integration**: Update issues with structured review findings and log time entry\n6. **Line-Specific Feedback**: Add comments directly on problematic code lines\n\n## Input Data Analysis\n\n- Pull GitHub PR URL from $ARGUMENTS.\n- If not provided during the prompt, ask user to provide PR number or URL, extract and analyse:\n\n### Pull Request Context\n- **PR Details**: Extract PR number \n- **Repository Info**: Note owner, repo name, and branch information\n- **Change Statistics**: Review additions, deletions, and changed files count\n- **Use GitHub mcp tool**: Use github-mcp tool to connect to GitHub. If fails, Use gh cli.\n\n### Issue Context\n- **Requirements**: Parse issue description and conversations to understand functional requirements.\n  If issue description is missing, request user to provide it.\n- **Acceptance Criteria**: Identify specific acceptance criteria from issue conversations\n- **Client Feedback**: Review conversation history for clarification and changes\n- **Technical Context**: Note technology stack, modules affected, and dependencies\n- **Extract issue information**: Check PR description and title to pull issue number. \n\tIn most cases it will be a Freshdesk issue. Use freshdesk-mcp task get issue information,\n\tconversations and issue summary to understand context of the issue.\n\n### Issue Context\n- **Requirements**: Parse issue description and conversations to understand functional requirements\n- **Acceptance Criteria**: Identify specific acceptance criteria from issue conversations\n- **Client Feedback**: Review conversation history for clarification and changes\n- **Technical Context**: Note technology stack, modules affected, and dependencies\n\n### Site summary context\n- **Use atlassian-mcp tool**: to access confluence and find the Site Summary in the SUPPORT space.\n    The Site Summary would include production domain in page title. The Site Summary may have important\n    details with project customisations. Keep this page up to date when you identify inconsistencies,\n    or information is missing, based on your PR review outcome.\n\n### Code Changes\n- **Files Modified**: Analyse changed files and their purposes\n- **Code Patterns**: Review implementation approach and architecture\n- **Security Implications**: Assess security impact of changes\n- **Important**: Note that this PR review tool is for ALL repositories (Drupal backend AND Vue.js/React frontends)\n\n## Review Process\n\n### 1. Requirement Analysis (Pass Score: 80%)\nCompare code changes against:\n- Original issue requirements\n- Acceptance criteria from conversations\n- Client-requested modifications\n- Expected functionality\n\n**Scoring Criteria:**\n- 90-100%: All requirements fully implemented with proper edge case handling\n- 80-89%: Core requirements met with minor gaps\n- 70-79%: Most requirements met but missing key functionality\n- Below 70%: Significant requirements gaps\n\n### 2. Code Standards Review (Context-Aware Scoring)\n\n**IMPORTANT**: Adjust review criteria based on repository type:\n- For Drupal repositories: Apply Drupal-specific standards below\n- For Vue.js/React frontends: Apply frontend-specific standards (ES6+, component architecture, state management)\n- For other technologies: Apply language-specific best practices\n\n#### Critical/Required Criteria:\n**Security Assessment:**\n- SQL Injection Prevention: Parameterized queries, no direct SQL concatenation\n- XSS Protection: Proper output sanitization (Html::escape(), #plain_text)\n- CSRF Protection: Form API usage, custom forms have CSRF tokens\n- Access Control: Proper permission checks, entity access API usage\n- File Upload Security: Extension validation, MIME type checks\n- Input Validation: Server-side validation for all user inputs\n- Sensitive Data: No hardcoded credentials, API keys, or secrets\n\n**Drupal API Compliance:**\n- Entity API: Using Entity API instead of direct database queries\n- Form API: Proper form construction and validation\n- Render API: Using render arrays, not direct HTML\n- Database API: Using Database::getConnection(), not mysql_*\n- Configuration API: Config entities for settings, not variables\n- Cache API: Proper cache tags and contexts\n- Queue API: For long-running processes\n\n**Code Architecture:**\n- Dependency Injection: Services injected, not statically called\n- Hook Implementations: Correct hook usage and naming\n- Plugin System: Proper plugin implementation when applicable\n- Event Subscribers: For responding to system events\n- Service Definitions: Proper service registration\n\n**Database Changes:**\n- Update Hooks: Database schema changes in update hooks\n- Migration Scripts: For data transformations\n- Schema Definition: Proper schema API usage\n- Backward Compatibility: Rollback procedures\n\n#### Important/Recommended Criteria:\n**Performance Considerations:**\n- Query Optimization: Avoid N+1 queries, use entity loading\n- Caching Strategy: Appropriate cache bins and invalidation\n- Asset Optimization: Aggregation, lazy loading\n- Memory Usage: Batch processing for large datasets\n- Database Indexes: For frequently queried fields\n\n**Code Quality Standards:**\n- Drupal Coding Standards: phpcs with Drupal/DrupalPractice\n- Type Declarations: PHP 7.4+ type hints\n- Error Handling: Try-catch blocks, graceful degradation\n- Code Complexity: Cyclomatic complexity < 10\n- Function Length: Methods under 50 lines\n- DRY Principle: No code duplication\n\n**Testing Coverage:**\n- Unit Tests: For isolated functionality\n- Kernel Tests: For Drupal API integration\n- Functional Tests: For user workflows\n- JavaScript Tests: For frontend functionality\n- Test Data: Proper test fixtures and mocks\n\n**Documentation:**\n- PHPDoc Blocks: For classes and public methods\n- README Updates: For new features/modules\n- Change Records: For API changes\n- Hook Documentation: Proper @hook annotations\n- Code Comments: For complex logic only\n\n#### Optional/Nice-to-Have Criteria:\n**Accessibility (WCAG 2.1):**\n- ARIA Labels: Proper semantic markup\n- Keyboard Navigation: Full keyboard support\n- Screen Reader: Announced changes\n- Color Contrast: WCAG AA compliance\n- Form Labels: Associated with inputs\n\n**Frontend Standards:**\n- JavaScript: ES6+, no inline scripts\n- CSS: BEM methodology, no !important\n- Responsive Design: Mobile-first approach\n- Browser Support: Per project requirements\n- Asset Libraries: Proper library definitions\n\n#### Vue.js/React Specific Standards:\n**For Vue.js Projects:**\n- Import statements: Use named imports correctly (e.g., `import { ComponentName } from`)\n- CSS selectors: Avoid deprecated `/deep/`, use `::v-deep` for Vue 2\n- Props: Don't define props that aren't used\n- Component structure: Follow Vue style guide\n- State management: Proper Vuex usage\n- Computed properties: Should be pure functions\n\n**For React Projects:**\n- Hooks: Follow Rules of Hooks\n- State management: Proper Redux/Context usage\n- Component structure: Functional components preferred\n- PropTypes or TypeScript: Type checking required\n\n**Multi-site & Multilingual:**\n- Domain Access: Proper domain-aware code\n- Configuration Split: Environment-specific configs\n- String Translation: t() and formatPlural()\n- Content Translation: Entity translation API\n\n### 3. Drupal-Specific Security Assessment\n**Native Drupal Security (Auto-Pass Criteria):**\n- CSRF protection is handled automatically by Drupal Form API - no manual checks needed\n- Administrative forms protected by permission system - inherently secure\n- Drupal's built-in input filtering and sanitisation - trust the framework\n- Entity access control through Drupal's entity system - framework handles this\n\n**Manual Security Checks Required:**\n- Custom database queries must use parameterised queries\n- Direct HTML output must use proper sanitisation functions\n- File uploads must validate file types and permissions\n- Custom access callbacks must be properly implemented\n- Cache invalidation strategy must be secure\n- Update path testing for existing sites\n- Multisite compatibility verification\n- Queue/Batch API for scalability\n- Entity access checks beyond basic permissions\n\n## Line-Specific Comments (CRITICAL)\n\n**ALWAYS add line-specific comments** for identified issues using the GitHub review API:\n\n1. **Use the review API** to create a review with line comments:\n   ```bash\n   # Create a JSON file with review comments\n   cat > /tmp/review_comments.json << 'EOF'\n   {\n     \"body\": \"Code review with line-specific feedback\",\n     \"event\": \"REQUEST_CHANGES\", # or \"APPROVE\" or \"COMMENT\"\n     \"comments\": [\n       {\n         \"path\": \"path/to/file.ext\",\n         \"line\": 123, # Line number in the diff\n         \"body\": \"Your comment here with code suggestions\"\n       }\n     ]\n   }\n   EOF\n   \n   # Submit the review\n   gh api repos/{owner}/{repo}/pulls/{pr_number}/reviews -X POST --input /tmp/review_comments.json\n   ```\n\n2. **Line comment best practices**:\n   - Be specific about the issue and provide the fix\n   - Include code snippets showing the correct implementation\n   - Reference relevant documentation or standards\n   - Use markdown formatting for clarity\n\n3. **Common pitfalls to avoid**:\n   - Don't use `gh pr comment` for line-specific feedback (it only adds general comments)\n   - Don't try to use deprecated comment APIs\n   - Ensure line numbers match the diff view, not the file view\n\n## Decision Criteria (Drupal-Context Aware)\n\n- **Approve**: Overall score ≥ 80% AND requirement fulfilment ≥ 80% AND no critical custom security issues\n- **Request Changes**: Overall score < 75% OR requirement fulfilment < 80% OR critical custom security vulnerabilities\n- **Comment**: Score 75-79% with minor issues\n\n**Note**: Drupal's native security features (Form API CSRF, permission-based access, Entity API) are considered secure by default and should not trigger failures.\n\n## GitHub Label Management\n\n**Required Standard Labels** (create if not present with specified colours):\n\n**Review Status Labels:**\n- `code-review-approved` - PR passes all quality checks\n  - **Color**: `#1f7a1f` (dark green)\n- `code-review-changes` - Changes requested before approval\n  - **Color**: `#cc8800` (dark orange)\n- `code-review-security` - Security issues identified\n  - **Color**: `#dc3545` (red)\n\n**Quality Labels:**\n- `drupal-standards` - Drupal coding standards violations\n  - **Color**: `#6f42c1` (purple)\n- `requirements-met` - Functional requirements satisfied\n  - **Color**: `#1f7a1f` (dark green)\n- `requirements-gap` - Missing or incomplete functionality\n  - **Color**: `#cc8800` (dark orange)\n\n**Technical Labels:**\n- `performance-impact` - Performance concerns identified\n  - **Color**: `#fd7e14` (orange)\n- `documentation-needed` - Missing or inadequate documentation\n  - **Color**: `#17a2b8` (blue)\n- `testing-required` - Additional tests needed\n  - **Color**: `#e83e8c` (pink)\n- `php-upgrade` - PHP version compatibility issues\n  - **Color**: `#6c757d` (grey)\n\n**Size Labels** (based on PR statistics):\n- `size/xs` - 1-10 lines changed\n  - **Color**: `#28a745` (light green)\n- `size/s` - 11-50 lines changed\n  - **Color**: `#ffc107` (yellow)\n- `size/m` - 51-200 lines changed\n  - **Color**: `#fd7e14` (orange)\n- `size/l` - 201-500 lines changed\n  - **Color**: `#dc3545` (red)\n- `size/xl` - 500+ lines changed\n  - **Color**: `#6f42c1` (purple)\n\n**Component Labels** (based on affected modules):\n- `component/backend` - Drupal backend changes\n  - **Color**: `#0d6efd` (blue)\n- `component/frontend` - Theme/JS/CSS changes\n  - **Color**: `#20c997` (teal)\n- `component/api` - API modifications\n  - **Color**: `#6610f2` (indigo)\n- `component/config` - Configuration changes\n  - **Color**: `#fd7e14` (orange)\n- `component/security` - Security-related changes\n  - **Color**: `#dc3545` (red)\n\n## Label Application Logic\n\n**Auto-Apply Labels Based On:**\n- **Score ≥ 80%**: Add `code-review-approved`\n- **Score < 80%**: Add `code-review-changes` \n- **Security Issues**: Add `code-review-security`\n- **Standards Violations**: Add `drupal-standards`\n- **Requirement Score ≥ 80%**: Add `requirements-met`\n- **Requirement Score < 80%**: Add `requirements-gap`\n- **Performance Warnings**: Add `performance-impact`\n- **Documentation Issues**: Add `documentation-needed`\n- **Missing Tests**: Add `testing-required`\n- **PHP Compatibility**: Add `php-upgrade`\n\n**Label Application Methods:**\n1. **Preferred**: Use `gh issue edit` command (works for PRs too):\n   ```bash\n   gh issue edit {pr_number} --repo {owner}/{repo} --add-label \"label1\" --add-label \"label2\"\n   ```\n2. **Alternative**: If repository uses non-standard labels, check existing labels first:\n   ```bash\n   gh label list --repo {owner}/{repo} --limit 100\n   ```\n   Then apply the most appropriate existing labels\n\n## Freshdesk Management\n\nAfter completing the code review, perform the following Freshdesk updates:\n\n1. **Add Private Note** with review findings using structured HTML format with appropriate colour coding\n2. **Log Time Entry** of 15 minutes for \"Code Review\" activity\n\n### Private Note HTML Structure Template\n```html\n<div>\n<h4 style=\"color: {status_color}\">{status_icon} PR #{pr_number} - {review_status}</h4>\n<div>\n<strong>Overall Score:</strong> <span style=\"color: {score_color}; font-weight: bold\">{score}%</span>\n</div>\n\n<h4>Review Summary</h4>\n<div><strong style=\"color: {requirement_color}\">{requirement_icon} Requirements ({requirement_score}%)</strong></div>\n<ul>\n  {requirement_details}\n</ul>\n\n<div><strong style=\"color: {drupal_color}\">{drupal_icon} Drupal Standards ({drupal_score}%)</strong></div>\n<ul>\n  {drupal_standards_details}\n</ul>\n\n<div><strong style=\"color: {security_color}\">{security_icon} Security Assessment ({security_score}%)</strong></div>\n<ul>\n  {security_assessment_details}\n</ul>\n\n<h4>Technical Changes</h4>\n<ol>\n  {technical_changes_list}\n</ol>\n\n{critical_issues_section}\n\n<div style=\"background-color: {status_bg_color}; padding: 10px; border-left: 4px solid {status_color}\">\n  <strong>Status:</strong> {final_status}<br>\n  <strong>PR Link:</strong> <a href=\"{pr_html_url}\" rel=\"noreferrer\" target=\"_blank\">{pr_html_url}</a><br>\n  {next_steps_info}\n</div>\n</div>\n```\n\n### Colour Coding Guidelines\n\n**Status Colours:**\n- **Success/Approved**: `#1f7a1f` (dark green)\n- **Warning/Changes Needed**: `#cc8800` (dark orange) \n- **Critical/Failed**: `#dc3545` (red)\n- **Info/In Progress**: `#17a2b8` (blue)\n\n**Icons and Status:**\n- **✅ Passed (90%+)**: Dark Green `#1f7a1f`\n- **⚠️ Warning (75-89%)**: Dark Orange `#cc8800`\n- **❌ Failed (<75%)**: Red `#dc3545`\n- **🔍 Under Review**: Blue `#17a2b8`\n\n**Background Colours for Status Boxes:**\n- **Success**: `#d4edda` (light green)\n- **Warning**: Use private note background `background-image: linear-gradient(#fef1e1, #fef1e1);`\n- **Danger**: `#f8d7da` (light red)\n- **Info**: `#d1ecf1` (light blue)\n\n**Code Formatting:**\n```html\n<code style=\"background-color: #f5f5f5; padding: 2px 4px\">filename.php</code>\n```\n\n**Critical Issues Section (when applicable):**\n```html\n<div style=\"background-color: #f8d7da; padding: 10px; border-left: 4px solid #dc3545\">\n  <h4 style=\"color: #dc3545\">❌ Critical Issues Found</h4>\n  <ul>\n    {critical_issues_list}\n  </ul>\n</div>\n```\n\n**Warning Issues Section (when applicable):**\n```html\n<div style=\"background-image: linear-gradient(#fef1e1, #fef1e1); padding: 10px; border-left: 4px solid #cc8800\">\n  <h4 style=\"color: #cc8800\">⚠️ Issues Requiring Attention</h4>\n  <ul>\n    {warning_issues_list}\n  </ul>\n</div>\n```\n\n**Note Update Instructions:**\n- Use `create_issue_note` to add private note with HTML structure\n- Apply appropriate colours based on review outcomes\n- Include all critical findings and recommendations\n- Reference PR links for easy tracking\n- Update issue status if review indicates completion\n- **Log Time Entry**: Use appropriate Freshdesk API to log 15 minutes of work time for \"Code Review\" activity\n\n## Australian English\nUse Australian English spelling and terminology throughout the review.\n\n## PR Review Checklist\n\nWhen reviewing, ensure you check:\n\n### Critical (Must Pass):\n- [ ] No SQL injection vulnerabilities\n- [ ] No XSS vulnerabilities\n- [ ] Proper access control implemented\n- [ ] No hardcoded credentials or secrets\n- [ ] Drupal APIs used correctly (Entity, Form, Render)\n- [ ] Database updates in update hooks\n- [ ] File uploads validated\n\n### Important (Should Pass):\n- [ ] Performance optimized (queries, caching)\n- [ ] Drupal coding standards followed\n- [ ] Adequate test coverage\n- [ ] Documentation updated\n- [ ] Error handling implemented\n- [ ] No code duplication\n\n### Nice to Have:\n- [ ] Accessibility standards met\n- [ ] Frontend best practices\n- [ ] Multisite compatibility tested\n- [ ] Multilingual support\n- [ ] Module structure follows conventions\n\n### Commonly Missed:\n- [ ] Cache invalidation strategy\n- [ ] Update path testing\n- [ ] Queue/Batch API for long processes\n- [ ] Entity access beyond permissions\n- [ ] Configuration split for environments\n\n## CRITICAL: Self-Improvement Protocol\n\n**MANDATORY**: After EVERY code review session, you MUST update this command file (create if file does not exist. Filename `docs/pr.md` within project root) with:\n\n1. **New Technology Stacks Encountered**:\n   - Add specific review criteria for any new frameworks/languages\n   - Document unique linting rules or standards\n   - Note build/test commands specific to that stack\n\n2. **Command Issues and Workarounds**:\n   - Document any gh CLI commands that failed and why\n   - Add working alternatives you discovered\n   - Update examples with real, tested commands\n\n3. **Repository-Specific Patterns**:\n   - Custom label schemes used by specific organisations\n   - Unique workflow requirements\n   - Special security or compliance needs\n\n4. **Review Process Improvements**:\n   - Better ways to extract requirements from issues\n   - More efficient review workflows\n   - Time-saving automation opportunities\n\n5. **Common Code Issues by Technology**:\n   - Add to the \"Commonly Missed\" sections\n   - Create new sections for technology-specific pitfalls\n   - Update scoring criteria based on real reviews\n\n### Update Process:\n1. At the end of each review, ask yourself: \"What did I learn?\"\n2. Use the `Edit` tool to update relevant sections\n3. Add real examples from the review you just completed\n4. Test any new commands before documenting them\n\n### Example Update Entry:\n```markdown\n### [Date] - Technology: [Stack] - Repository: [Name]\n**Issue**: [What happened]\n**Solution**: [How you solved it]\n**Future Prevention**: [What to do next time]\n```\n\n## Lessons Learned from Review Sessions\n\n### What Works Well:\n1. **gh CLI**: Reliable for PR operations\n2. **gh issue edit**: Works for adding labels to PRs (PRs are issues in GitHub)\n3. **Review API**: Best method for line-specific comments\n4. **JSON input files**: Clean way to structure complex review data\n\n### Common Pitfalls:\n1. **Don't assume Drupal**: Many repos are Vue.js/React frontends\n2. **Check existing labels**: Repos may have custom label schemes\n3. **Line comments require review API**: `gh pr comment` only adds general comments\n4. **No issue reference**: Not all PRs reference issues - proceed with code review anyway\n5. **Import statements**: Watch for incorrect ES6 module imports in frontend code\n6. **Deprecated Vue features**: `/deep/` selector, unused props, etc.\n\n### Technology-Specific Discoveries:\n\n#### Vue.js (Vue 2)\n- **Date**: 2025-06-03\n- **Issue**: `/deep/` selector still being used\n- **Solution**: Always flag for `::v-deep` replacement\n- **Common Pattern**: Unused props passed but never utilized\n\n#### GitHub API Quirks\n- **Date**: 2025-06-03\n- **Issue**: `gh pr edit --add-label` fails with permissions error\n- **Solution**: Use `gh issue edit` instead (PRs are issues)\n- **Note**: Some repos have 100+ custom labels - always check first\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/new-pull-request.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/new-pull-request.mdc",
      "sha": "2953f8a9778eb91dbf52d39dae66c9687b5333b6"
    }
  },
  {
    "name": "ivangrynenko-node-dependencies",
    "slug": "node-dependencies",
    "displayName": "Node Dependencies",
    "description": "--- description: Enforce Node.js versioning and package management best practices. globs: package.json, .nvmrc",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Enforce Node.js versioning and package management best practices.\nglobs: package.json, .nvmrc\n---\n# Node.js & Dependency Management\n\nEnsures correct Node.js versions and package management.\n\n<rule>\nname: node_dependency_management\ndescription: Enforce Node.js versioning and package management best practices.\nfilters:\n  - type: file_extension\n    pattern: \"package.json|\\\\.nvmrc\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: '\"engines\":\\\\s*{[^}]*}'\n        message: \"Ensure package.json specifies required Node.js version.\"\n\n      - pattern: \"(?<!\\\\.)nvmrc\"\n        message: \"Ensure an .nvmrc file exists in the root directory.\"\n\n  - type: suggest\n    message: |\n      Best practices:\n      - Include an .nvmrc file specifying Node.js version.\n      - Use latest stable Node.js version for Drupal projects.\n      - Use Composer for dependency management.\n\nmetadata:\n  priority: medium\n  version: 1.0\n</rule>\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/node-dependencies.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/node-dependencies.mdc",
      "sha": "07c2e63700db173da83bb1baa0fc2b670086cc34"
    }
  },
  {
    "name": "ivangrynenko-php-drupal-best-practices",
    "slug": "php-drupal-best-practices",
    "displayName": "Php Drupal Best Practices",
    "description": "--- description: PHP & Drupal Development Standards and Best Practices globs: *.php, *.module, *.theme, *.inc, *.info, *.install",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: PHP & Drupal Development Standards and Best Practices\nglobs: *.php, *.module, *.theme, *.inc, *.info, *.install\n---\n# Enhanced PHP & Drupal Development Standards\n\nDefines comprehensive coding standards and best practices for PHP and Drupal development, with a focus on modern PHP features, Drupal 10+ standards, and modularity.\n\n<rule>\nname: enhanced_php_drupal_best_practices\ndescription: Enforce PHP 8.3+ features, Drupal 10+ coding standards, and modularity\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|module|inc|install|theme)$\"\n  - type: file_path\n    pattern: \"web/modules/custom/|web/themes/custom/\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"^(?!declare\\\\(strict_types=1\\\\);)\"\n        message: \"Add 'declare(strict_types=1);' at the beginning of PHP files for type safety.\"\n\n      - pattern: \"(?<!\\\\bTRUE\\\\b)\\\\btrue\\\\b|(?<!\\\\bFALSE\\\\b)\\\\bfalse\\\\b|(?<!\\\\bNULL\\\\b)\\\\bnull\\\\b\"\n        message: \"Use uppercase for TRUE, FALSE, and NULL constants.\"\n\n      - pattern: \"(?i)\\\\/\\\\/\\\\s[a-z]\"\n        message: \"Ensure inline comments begin with a capital letter and end with a period.\"\n\n      - pattern: \"class\\\\s+\\\\w+\\\\s*(?!\\\\{[^}]*readonly\\\\s+\\\\$)\"\n        message: \"Consider using readonly properties where immutability is required.\"\n\n      - pattern: \"public\\\\s+function\\\\s+\\\\w+\\\\([^)]*\\\\)\\\\s*(?!:)\"\n        message: \"Add return type declarations for all methods to ensure type safety.\"\n\n      - pattern: \"extends\\\\s+\\\\w+\\\\s*\\\\{[^}]*public\\\\s+function\\\\s+\\\\w+\\\\([^)]*\\\\)\\\\s*(?!#\\\\[Override\\\\])\"\n        message: \"Add #[Override] attribute for overridden methods for clarity.\"\n\n      - pattern: \"\\\\$\\\\w+\\\\s*(?!:)\"\n        message: \"Use typed properties with proper nullability for better code maintainability.\"\n\n      - pattern: \"function\\\\s+hook_\\\\w+\\\\([^)]*\\\\)\\\\s*(?!:)\"\n        message: \"Add type hints and return types for all hooks to leverage PHP's type system.\"\n\n      - pattern: \"new\\\\s+\\\\w+\\\\([^)]*\\\\)\\\\s*(?!;\\\\s*//\\\\s*@inject)\"\n        message: \"Use proper dependency injection with services for better testability and modularity.\"\n\n      - pattern: \"extends\\\\s+FormBase\\\\s*\\\\{[^}]*validate\"\n        message: \"Implement proper form validation in FormBase classes for security.\"\n\n      - pattern: \"function\\\\s+\\\\w+\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*\\\\$this->t\\\\(\"\n        message: \"Use Drupal's t() function for strings that need translation.\"\n\n      - pattern: \"\\\\$this->config\\\\('\\\\w+'\\\\)\"\n        message: \"Use ConfigFactory for configuration management.\"\n      \n      - pattern: \"array\\\\s*\\\\(\"\n        message: \"Use short array syntax ([]) instead of array() for consistent code style.\"\n      \n      - pattern: \"(?<!\\\\()\\\\s+\\\\(int\\\\)\\\\s*\\\\$\"\n        message: \"Put a space between the (type) and the $variable in a cast: (int) $mynumber.\"\n      \n      - pattern: \"\\\\n[\\\\t ]+\\\\n\"\n        message: \"Remove whitespace from empty lines.\"\n      \n      - pattern: \"\\\\s+$\"\n        message: \"Remove trailing whitespace at the end of lines.\"\n      \n      - pattern: \"^(?!.*\\\\n$)\"\n        message: \"Ensure files end with a single newline character.\"\n      \n      - pattern: \"if\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^{]*\\\\}\\\\s*else\\\\s*\\\\{\"\n        message: \"Place the opening brace on the same line as the statement for control structures.\"\n      \n      - pattern: \"\\\\$_GET|\\\\$_POST|\\\\$_REQUEST\"\n        message: \"Never use superglobals directly; use Drupal's input methods.\"\n      \n      - pattern: \"mysql_|mysqli_\"\n        message: \"Use Drupal's database API instead of direct MySQL functions.\"\n      \n      - pattern: \"\\\\t+\"\n        message: \"Use 2 spaces for indentation, not tabs.\"\n      \n      - pattern: \"function\\\\s+\\\\w+\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*\\\\becho\\\\b\"\n        message: \"Don't use echo; use return values or Drupal's messenger service.\"\n      \n      - pattern: \"(?<!\\\\/\\\\*\\\\*)\\\\s*\\\\*\\\\s+@\"\n        message: \"Use proper DocBlock formatting for documentation.\"\n      \n      - pattern: \"\\\\bdie\\\\b|\\\\bexit\\\\b\"\n        message: \"Don't use die() or exit(); throw exceptions instead.\"\n      \n      - pattern: \"\\\\$entity->get\\\\([^)]+\\\\)->getValue\\\\(\\\\)\"\n        message: \"Use $entity->get('field_name')->value instead of getValue() when possible.\"\n      \n      - pattern: \"\\\\bvar_dump\\\\b|\\\\bprint_r\\\\b|\\\\bdump\\\\b\"\n        message: \"Don't use debug functions in production code; use Drupal's logger instead.\"\n      \n      - pattern: \"\\\\bnew\\\\s+DateTime\\\\b\"\n        message: \"Use Drupal's DateTimeInterface and DrupalDateTime instead of PHP's DateTime.\"\n      \n      - pattern: \"\\\\beval\\\\b\"\n        message: \"Never use eval() as it poses security risks.\"\n      \n      - pattern: \"function\\\\s+\\\\w+_menu_callback\\\\(\"\n        message: \"Use controller classes with route definitions instead of hook_menu() callbacks.\"\n      \n      - pattern: \"\\\\/\\\\*\\\\*(?:[^*]|\\\\*[^/])*?@file(?:[^*]|\\\\*[^/])*?\\\\*\\\\/\"\n        message: \"All PHP files must include proper @file documentation in the docblock.\"\n      \n      - pattern: \"function\\\\s+\\\\w+\\\\s*\\\\((?:[^)]|\\\\([^)]*\\\\))*\\\\)\\\\s*\\\\{(?:[^}]|\\\\{[^}]*\\\\})*\\\\$_SESSION\"\n        message: \"Use Drupal's user session handling instead of $_SESSION.\"\n      \n      - pattern: \"function\\\\s+theme_\\\\w+\\\\(\"\n        message: \"Theme functions should be replaced with Twig templates in Drupal 8+.\"\n      \n      - pattern: \"drupal_add_js|drupal_add_css\"\n        message: \"Use #attached in render arrays instead of drupal_add_js() or drupal_add_css().\"\n      \n      - pattern: \"function\\\\s+\\\\w+_implements_hook_\\\\w+\\\\(\"\n        message: \"Use proper hook implementation format: module_name_hook_name().\"\n        \n      - pattern: \"use\\\\s+[^;]+,\\\\s*[^;]+\"\n        message: \"Specify a single class per use statement. Do not specify multiple classes in a single use statement.\"\n        \n      - pattern: \"use\\\\s+\\\\\\\\[A-Za-z]\"\n        message: \"When importing a class with 'use', do not include a leading backslash (\\\\).\"\n        \n      - pattern: \"\\\\bnew\\\\s+\\\\\\\\DateTime\\\\(\\\\)\"\n        message: \"Non-namespaced global classes (like Exception) must be fully qualified with a leading backslash (\\\\) when used in a namespaced file.\"\n        \n      - pattern: \"(?<!namespace )Drupal\\\\\\\\(?!\\\\w+\\\\\\\\)\"\n        message: \"Modules should place classes inside a custom namespace: Drupal\\\\module_name\\\\...\"\n        \n      - pattern: \"class\\\\s+\\\\w+\\\\s*(?:extends|implements)(?:[^{]+)\\\\{\\\\s*[^\\\\s]\"\n        message: \"Leave an empty line between start of class/interface definition and property/method definition.\"\n        \n      - pattern: \"Drupal\\\\\\\\(?!Core|Component)[A-Z]\"\n        message: \"Module namespaces should be Drupal\\\\module_name, not Drupal\\\\ModuleName (camelCase not PascalCase).\"\n        \n      - pattern: \"\\\\\\\\Drupal::request\\\\(\\\\)->attributes->set\\\\('([^_][^']*)',\"\n        message: \"Request attributes added by modules should be prefixed with underscore (e.g., '_context_value').\"\n        \n      - pattern: \"\\\\\\\\Drupal::request\\\\(\\\\)->attributes->get\\\\('(_(system_path|title|route|route_object|controller|content|account))'\\\\)\"\n        message: \"Avoid overwriting reserved Symfony or Drupal core request attributes.\"\n        \n      - pattern: \"(?<!service provider)\\\\s+class\\\\s+\\\\w+Provider(?!Interface)\"\n        message: \"Classes that provide services should use the 'Provider' suffix (e.g., MyServiceProvider).\"\n        \n      - pattern: \"\\\\.services\\\\.yml[^}]*\\\\s+class:\\\\s+[^\\\\n]+\\\\s+arguments:\"\n        message: \"Services should use dependency injection through constructor arguments defined in services.yml.\"\n\n  - type: suggest\n    message: |\n      **PHP/Drupal Development Best Practices:**\n      \n      ### General Code Structure\n      - **File Structure:** Each PHP file should have the proper structures: <?php tag, namespace declaration (if applicable), use statements, docblock, and implementation.\n      - **Line Length:** Keep lines under 80 characters whenever possible.\n      - **Indentation:** Use 2 spaces for indentation, never tabs.\n      - **Empty Lines:** Use empty lines to separate logical blocks of code, but avoid multiple empty lines.\n      - **File Endings:** All files must end with a single newline character.\n      \n      ### PHP Language Features\n      - **PHP Version:** Use PHP 8.3+ features where appropriate.\n      - **Strict Types:** Use declare(strict_types=1) at the top of files to enforce type safety.\n      - **Type Hints:** Always use parameter and return type hints.\n      - **Named Arguments:** Use named arguments for clarity in complex function calls.\n      - **Attributes:** Use PHP 8 attributes like #[Override] for better code comprehension.\n      - **Match Expressions:** Prefer match over switch for cleaner conditionals.\n      - **Null Coalescing:** Use ?? and ??= operators where appropriate.\n      \n      ### Drupal-Specific Standards\n      - **Fields API:** Use hasField(), get(), and value() methods when working with entity fields.\n      - **Exception Handling:** Use try/catch for exception handling with proper logging.\n      - **Database Layer:** Use Drupal's database abstraction layer for all queries.\n      - **Schema Updates:** Implement hook_update_N() for schema changes during updates.\n      - **Dependency Injection:** Use services.yml and proper container injection.\n      - **Routing:** Define routes in routing.yml with proper access checks.\n      - **Forms:** Extend FormBase or ConfigFormBase with proper validation and submission handling.\n      - **Entity API:** Follow entity API best practices for loading, creating, and editing entities.\n      - **Plugins:** Use plugin system appropriately with proper annotations.\n      \n      ### Service & Request Standards\n      - **Service Naming:** Use descriptive service names and appropriate naming patterns (Provider suffix for service providers).\n      - **Service Definition:** Define services in the module's *.services.yml file with appropriate tags and arguments.\n      - **Request Attributes:** When adding attributes to the Request object, prefix custom attributes with underscore (e.g., `_context_value`).\n      - **Reserved Attributes:** Avoid overwriting core-reserved request attributes like `_system_path`, `_title`, `_account`, `_route`, `_route_object`, `_controller`, `_content`.\n      - **Service Container:** Use dependency injection rather than the service container directly.\n      - **Factory Services:** Use factory methods for complex service instantiation.\n      \n      ### Namespace Standards\n      - **Module Namespace:** Use Drupal\\\\module_name\\\\... for all custom module code.\n      - **PSR-4 Autoloading:** Class in folder module/src/SubFolder should use namespace Drupal\\\\module_name\\\\SubFolder.\n      - **Use Statements:** Each class should have its own use statement; don't combine multiple classes in one use.\n      - **No Leading Backslash:** Don't add a leading backslash (\\\\) in use statements.\n      - **Global Classes:** Global classes (like Exception) must be fully qualified with a leading backslash (\\\\) when used in a namespaced file.\n      - **Class Aliasing:** Only alias classes to avoid name collisions, using meaningful names like BarBaz and ThingBaz.\n      - **String Class Names:** When specifying a class name in a string, use full name including namespace without leading backslash. Prefer single quotes.\n      - **Class Placement:** A class named Drupal\\\\module_name\\\\Foo should be in file module_name/src/Foo.php.\n      \n      ### Security Practices\n      - **Input Validation:** Always validate and sanitize user input.\n      - **Access Checks:** Implement proper access checks for all routes and content.\n      - **CSRF Protection:** Use Form API with proper form tokens for all forms.\n      - **SQL Injection:** Use parameterized queries with placeholders.\n      - **XSS Prevention:** Use Xss::filter() or t() with appropriate placeholders.\n      - **File Security:** Validate uploaded files and restrict access properly.\n      \n      ### Documentation and Comments\n      - **PHPDoc Blocks:** Document all classes, methods, and properties with proper PHPDoc.\n      - **Function Comments:** Describe parameters, return values, and exceptions.\n      - **Inline Comments:** Use meaningful comments for complex logic.\n      - **Comment Format:** Begin comments with a capital letter and end with a period.\n      - **API Documentation:** Follow Drupal's API documentation standards.\n      \n      ### Performance\n      - **Caching:** Implement proper cache tags, contexts, and max-age.\n      - **Database Queries:** Optimize queries with proper indices and JOINs.\n      - **Lazy Loading:** Use lazy loading for expensive operations.\n      - **Batch Processing:** Use batch API for long-running operations.\n      - **Static Caching:** Implement static caching for repeated operations.\n      \n      ### Testing\n      - **Unit Tests:** Write PHPUnit tests for business logic.\n      - **Kernel Tests:** Use kernel tests for integration with Drupal subsystems.\n      - **Functional Tests:** Implement functional tests for user interactions.\n      - **Mocking:** Use proper mocking techniques for dependencies.\n      - **Test Coverage:** Aim for high test coverage of critical functionality.\n      \n      ### API Documentation Examples\n      \n      #### File Documentation\n      \n      **Module Files (.module)**\n      ```php\n      <?php\n      \n      /**\n       * @file\n       * Provides [module functionality description].\n       */\n      ```\n      \n      **Install Files (.install)**\n      ```php\n      <?php\n      \n      /**\n       * @file\n       * Install, update and uninstall functions for the [module name] module.\n       */\n      ```\n      \n      **Include Files (.inc)**\n      ```php\n      <?php\n      \n      /**\n       * @file\n       * [Specific functionality] for the [module name] module.\n       */\n      ```\n      \n      **Class Files (in namespaced directories)**\n      ```php\n      <?php\n      \n      namespace Drupal\\module_name\\ClassName;\n      \n      use Drupal\\Core\\SomeClass;\n      \n      /**\n       * Provides [class functionality description].\n       *\n       * [Extended description if needed]\n       */\n      class ClassName implements InterfaceName {\n      ```\n      \n      #### Function Documentation\n      \n      **Standard Function**\n      ```php\n      /**\n       * Returns [what the function returns or does].\n       *\n       * [Additional explanation if needed]\n       *\n       * @param string $param1\n       *   Description of parameter.\n       * @param int $param2\n       *   Description of parameter.\n       *\n       * @return array\n       *   Description of returned data.\n       *\n       * @throws \\Exception\n       *   Exception thrown when [condition].\n       *\n       * @see related_function()\n       */\n      function module_function_name($param1, $param2) {\n      ```\n      \n      **Hook Implementation**\n      ```php\n      /**\n       * Implements hook_form_alter().\n       */\n      function module_name_form_alter(&$form, \\Drupal\\Core\\Form\\FormStateInterface $form_state, $form_id) {\n      ```\n      \n      **Update Hook**\n      ```php\n      /**\n       * Implements hook_update_N().\n       *\n       * [Description of what the update does].\n       */\n      function module_name_update_8001() {\n      ```\n      \n      #### Class Documentation\n      \n      **Class Properties**\n      ```php\n      /**\n       * The entity type manager.\n       *\n       * @var \\Drupal\\Core\\Entity\\EntityTypeManagerInterface\n       */\n      protected $entityTypeManager;\n      ```\n      \n      **Method Documentation**\n      ```php\n      /**\n       * Gets entities of a specific type.\n       *\n       * @param string $entity_type\n       *   The entity type ID.\n       * @param array $conditions\n       *   (optional) An array of conditions to match. Defaults to an empty array.\n       *\n       * @return \\Drupal\\Core\\Entity\\EntityInterface[]\n       *   An array of entity objects indexed by their IDs.\n       *\n       * @throws \\Drupal\\Component\\Plugin\\Exception\\PluginNotFoundException\n       *   Thrown if the entity type doesn't exist.\n       * @throws \\Drupal\\Component\\Plugin\\Exception\\InvalidPluginDefinitionException\n       *   Thrown if the storage handler couldn't be loaded.\n       */\n      public function getEntities(string $entity_type, array $conditions = []): array {\n      ```\n      \n      **Interface Method**\n      ```php\n      /**\n       * Implements \\SomeInterface::methodName().\n       */\n      public function methodName() {\n      ```\n      \n      #### Namespace Examples\n      \n      **Using Classes From Other Namespaces**\n      ```php\n      namespace Drupal\\mymodule\\Tests\\Foo;\n      \n      use Drupal\\simpletest\\WebTestBase;\n      \n      /**\n       * Tests that the foo bars.\n       */\n      class BarTest extends WebTestBase {\n      ```\n      \n      **Class Aliasing for Name Collisions**\n      ```php\n      use Foo\\Bar\\Baz as BarBaz;\n      use Stuff\\Thing\\Baz as ThingBaz;\n      \n      /**\n       * Tests stuff for the whichever.\n       */\n      function test() {\n        $a = new BarBaz(); // This will be Foo\\Bar\\Baz\n        $b = new ThingBaz(); // This will be Stuff\\Thing\\Baz\n      }\n      ```\n      \n      **Using Global Classes in Namespaced Files**\n      ```php\n      namespace Drupal\\Subsystem;\n      \n      // Bar is a class in the Drupal\\Subsystem namespace in another file.\n      // It is already available without any importing.\n      \n      /**\n       * Defines a Foo.\n       */\n      class Foo {\n      \n        /**\n         * Constructs a new Foo object.\n         */\n        public function __construct(Bar $b) {\n          // Global classes must be prefixed with a \\ character.\n          $d = new \\DateTime();\n        }\n      }\n      ```\n      \n      #### Service Definition Example\n      \n      **services.yml File**\n      ```yaml\n      services:\n        mymodule.my_service:\n          class: Drupal\\mymodule\\MyService\n          arguments: ['@entity_type.manager', '@current_user']\n          tags:\n            - { name: cache.context }\n      ```\n      \n      **Request Attribute Handling**\n      ```php\n      // Correctly adding a request attribute (with underscore prefix)\n      \\Drupal::request()->attributes->set('_context_value', $myvalue);\n      \n      // Correctly retrieving a request attribute\n      $contextValue = \\Drupal::request()->attributes->get('_context_value');\n      ```\n\n  - type: validate\n    conditions:\n      - pattern: \"web/modules/custom/[^/]+/\\\\.info\\\\.yml$\"\n        message: \"Ensure each custom module has a required .info.yml file.\"\n\n      - pattern: \"web/modules/custom/[^/]+/\\\\.module$\"\n        message: \"Ensure module has .module file if hooks are implemented.\"\n\n      - pattern: \"web/modules/custom/[^/]+/src/Form/\\\\w+Form\\\\.php$\"\n        message: \"Place form classes in the Form directory for organization.\"\n\n      - pattern: \"try\\\\s*\\\\{[^}]*\\\\}\\\\s*catch\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{\\\\s*\\\\}\"\n        message: \"Implement proper exception handling in catch blocks.\"\n      \n      - pattern: \"namespace\\\\s+Drupal\\\\\\\\(?!\\\\w+\\\\\\\\)\"\n        message: \"Namespace should be Drupal\\\\ModuleName\\\\...\"\n      \n      - pattern: \"class\\\\s+[^\\\\s]+\\\\s+implements\\\\s+[^\\\\s]+Interface\"\n        message: \"Follow PSR-4 for class naming and organization.\"\n      \n      - pattern: \"\\\\*\\\\s+@return\\\\s+[a-z]+\\\\|null\"\n        message: \"Use nullable return types (e.g., ?string) instead of type|null in docblocks.\"\n      \n      - pattern: \"function\\\\s+__construct\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*parent::\"\n        message: \"Call parent::__construct() if extending a class with a constructor.\"\n      \n      - pattern: \"function\\\\s+[gs]et[A-Z]\\\\w+\\\\(\"\n        message: \"Use camelCase for method names (e.g., getId instead of get_id).\"\n      \n      - pattern: \"\\\\/\\\\*\\\\*(?:(?!\\\\@file).)*?\\\\*\\\\/\"\n        message: \"Add proper @file docblock for PHP files.\"\n      \n      - pattern: \"function\\\\s+hook_[a-z0-9_]+\\\\(\"\n        message: \"Replace 'hook_' prefix with your module name in hook implementations.\"\n      \n      - pattern: \"(?<!\\\\s\\\\*)\\\\s+@(?:param|return|throws)\\\\b\"\n        message: \"DocBlock tags should be properly aligned with leading asterisks.\"\n      \n      - pattern: \"@param\\\\s+(?!(?:array|bool|callable|float|int|mixed|object|resource|string|void|null|\\\\\\\\)[\\\\s|])\"\n        message: \"Use proper data types in @param tags (array, bool, int, string, etc.).\"\n      \n      - pattern: \"@return\\\\s+(?!(?:array|bool|callable|float|int|mixed|object|resource|string|void|null|\\\\\\\\)[\\\\s|])\"\n        message: \"Use proper data types in @return tags (array, bool, int, string, etc.).\"\n      \n      - pattern: \"\\\\*\\\\s*@param[^\\\\n]*?(?:(?!\\\\s{3,})[^\\\\n])*$\"\n        message: \"Parameter description should be separated by at least 3 spaces from the param type/name.\"\n      \n      - pattern: \"function\\\\s+theme\\\\w+\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*?(?!\\\\@ingroup\\\\s+themeable)\"\n        message: \"Theme functions should include @ingroup themeable in their docblock.\"\n      \n      - pattern: \"\\\\*\\\\s*@code(?!\\\\s+[a-z]+\\\\s+)\"\n        message: \"@code blocks should specify the language (e.g., @code php).\"\n      \n      - pattern: \"namespace\\\\s+(?!Drupal\\\\\\\\)\"\n        message: \"Namespaces should start with 'Drupal\\\\'.\"\n        \n      - pattern: \"web/modules/custom/[^/]+/\\\\.services\\\\.yml$\"\n        message: \"Every module using services should have a services.yml file.\"\n      \n      - pattern: \"web/modules/custom/[^/]+/src/[^/]+Provider\\\\.php$\"\n        message: \"Service providers should be in the module's root namespace (src/ directory).\"\n\nmetadata:\n  priority: critical\n  version: 1.5\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/php-drupal-best-practices.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/php-drupal-best-practices.mdc",
      "sha": "0627e1b881c7d21be18fad4464d9a8f097bad0f8"
    }
  },
  {
    "name": "ivangrynenko-php-drupal-development-standards",
    "slug": "php-drupal-development-standards",
    "displayName": "Php Drupal Development Standards",
    "description": "--- description: Standards for PHP and Drupal development globs: *.php, *.module, *.inc, *.install, *.theme",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standards for PHP and Drupal development\nglobs: *.php, *.module, *.inc, *.install, *.theme\n---\n# Enhanced PHP and Drupal Development Standards\n\nEnsures adherence to PHP 8.3+ features and Drupal development best practices for improved code quality, security, and maintainability.\n\n<rule>\nname: enhanced_php_drupal_development_standards\ndescription: Enforce PHP 8.3+ and Drupal development standards\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|module|inc|install|theme)$\"\n  - type: file_path\n    pattern: \"web/modules/custom/|web/themes/custom/\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"^(?!declare\\\\(strict_types=1\\\\);)\"\n        message: \"Add 'declare(strict_types=1);' at the beginning of PHP files for type safety.\"\n\n      - pattern: \"class\\\\s+\\\\w+\\\\s*(?!\\\\{[^}]*readonly\\\\s+\\\\$)\"\n        message: \"Consider using readonly properties where immutability is required for better code safety.\"\n\n      - pattern: \"public\\\\s+function\\\\s+\\\\w+\\\\([^)]*\\\\)\\\\s*(?!:)\"\n        message: \"Add return type declarations for all methods to enhance type safety.\"\n\n      - pattern: \"extends\\\\s+\\\\w+\\\\s*\\\\{[^}]*public\\\\s+function\\\\s+\\\\w+\\\\([^)]*\\\\)\\\\s*(?!#\\\\[Override\\\\])\"\n        message: \"Add #[Override] attribute for overridden methods for clear intent.\"\n\n      - pattern: \"\\\\$\\\\w+\\\\s*(?!:)\"\n        message: \"Use typed properties with proper nullability to improve code readability and prevent errors.\"\n\n      - pattern: \"function\\\\s+hook_\\\\w+\\\\([^)]*\\\\)\\\\s*(?!:)\"\n        message: \"Add type hints and return types for all hooks to leverage PHP's type system.\"\n\n      - pattern: \"new\\\\s+\\\\w+\\\\([^)]*\\\\)\\\\s*(?!;\\\\s*//\\\\s*@inject)\"\n        message: \"Use proper dependency injection with services for better testability and modularity.\"\n\n      - pattern: \"extends\\\\s+FormBase\\\\s*\\\\{[^}]*validate\"\n        message: \"Implement proper form validation in FormBase classes for security.\"\n\n      - pattern: \"(?<!\\\\bTRUE\\\\b)\\\\btrue\\\\b|(?<!\\\\bFALSE\\\\b)\\\\bfalse\\\\b|(?<!\\\\bNULL\\\\b)\\\\bnull\\\\b\"\n        message: \"Use uppercase for TRUE, FALSE, and NULL constants for consistency.\"\n\n      - pattern: \"(?i)\\\\/\\\\/\\\\s[a-z]\"\n        message: \"Ensure inline comments begin with a capital letter and end with a period for readability.\"\n\n      - pattern: \"\\\\$this->config\\\\('\\\\w+'\\\\)\"\n        message: \"Use ConfigFactory for configuration management to ensure proper dependency injection.\"\n\n  - type: suggest\n    message: |\n      **PHP/Drupal Development Best Practices:**\n      - **File Structure:** Place module files in `web/modules/custom/[module_name]/` for organization.\n      - **Module Files:** Ensure modules include .info.yml, .module, .libraries.yml, .services.yml where applicable.\n      - **Dependencies:** Use hook_requirements() to manage external dependencies.\n      - **Forms:** Use FormBase or ConfigFormBase for creating forms, always include CSRF protection.\n      - **Caching:** Apply proper cache tags and contexts for performance optimization.\n      - **Error Handling & Logging:** Implement robust error handling and logging using Drupal's mechanisms.\n      - **Type Safety:** Leverage type safety in form methods and throughout your code.\n      - **Dependency Injection:** Follow Drupal's dependency injection patterns for better maintainability.\n      - **Service Container:** Use Drupal's service container to manage dependencies.\n      - **Security:** Validate all user inputs, use Drupal's security practices like sanitization and escaping.\n      - **Schema Updates:** Implement hook_update_N() for database schema changes.\n      - **Translation:** Use Drupal's t() function for all user-facing strings.\n\n  - type: validate\n    conditions:\n      - pattern: \"web/modules/custom/[^/]+/\\\\.info\\\\.yml$\"\n        message: \"Ensure each custom module has a required .info.yml file.\"\n\n      - pattern: \"web/modules/custom/[^/]+/\\\\.module$\"\n        message: \"Ensure module has .module file if hooks are implemented.\"\n\n      - pattern: \"web/modules/custom/[^/]+/src/Form/\\\\w+Form\\\\.php$\"\n        message: \"Place form classes in the Form directory for consistency.\"\n\n      - pattern: \"try\\\\s*\\\\{[^}]*\\\\}\\\\s*catch\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{\\\\s*\\\\}\"\n        message: \"Implement proper exception handling in catch blocks for robustness.\"\n\nmetadata:\n  priority: critical\n  version: 1.1\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/php-drupal-development-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/php-drupal-development-standards.mdc",
      "sha": "3d600f6a17ad95bb2c49045aa54f014373be5010"
    }
  },
  {
    "name": "ivangrynenko-php-memory-optimisation",
    "slug": "php-memory-optimisation",
    "displayName": "Php Memory Optimisation",
    "description": "--- description: PHP memory optimisation standards and actionable checks globs: *.php, *.ini",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: PHP memory optimisation standards and actionable checks\nglobs: *.php, *.ini\n---\n# PHP Memory Optimisation Standards\n\nGuidance and automated checks to reduce peak memory usage in PHP applications. Based on widely accepted practices and the article \"PHP Memory Optimization Tips\" by Khouloud Haddad.\n\n<rule>\nname: php_memory_optimisation\ndescription: Detect memory-heavy patterns and suggest streaming, generators, and better data handling\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.php$\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Avoid loading entire DB result sets into memory.\n      - pattern: \"->fetchAll\\\\(\"\n        message: \"Avoid fetchAll() on large result sets; iterate with fetch() in a loop or wrap with a generator (yield).\"\n\n      - pattern: \"\\\\bmysqli_fetch_all\\\\(\"\n        message: \"Avoid mysqli_fetch_all() for large queries; prefer streaming fetch (e.g., mysqli_fetch_assoc in a loop).\"\n\n      # Avoid repeated full-file loads inside loops.\n      - pattern: \"foreach\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*file_get_contents\\\\(\"\n        message: \"Avoid file_get_contents() inside loops; stream with SplFileObject or read once and reuse.\"\n\n      # Avoid array_merge in tight loops as it copies arrays.\n      - pattern: \"foreach\\\\s*\\\\([^)]*\\\\)\\\\s*\\\\{[^}]*=\\\\s*array_merge\\\\(\"\n        message: \"Avoid array_merge() inside loops; append elements directly or preallocate arrays.\"\n\n      # Use caution with range() on large ranges (allocates full array).\n      - pattern: \"\\\\brange\\\\s*\\\\(\"\n        message: \"range() allocates full arrays; for large ranges consider generators (yield) to avoid high memory.\"\n\n  - type: suggest\n    message: |\n      **PHP memory optimisation recommendations:**\n\n      - **Stream database results:** Prefer `$stmt->fetch(PDO::FETCH_ASSOC)` in a `while` loop or use generators instead of `fetchAll()`.\n      - **Use generators (yield):** Iterate large datasets without allocating full arrays.\n      - **Stream files:** Use `SplFileObject` or chunked reads instead of `file_get_contents()` for large files.\n      - **Minimise array copying:** Avoid `array_merge()` in loops; push items directly or pre-size with known capacity (e.g., `SplFixedArray`).\n      - **Free memory explicitly:** `unset($var)` after large data is no longer needed; consider `gc_collect_cycles()` for long-running scripts.\n      - **Profile memory:** Use `memory_get_usage()` and tools like Xdebug/Blackfire to spot peaks.\n      - **OPcache:** Ensure OPcache is enabled and sized appropriately in production.\n\n  - type: validate\n    conditions:\n      # Detect full-file reads that likely could be streamed.\n      - pattern: \"\\\\bfile\\\\s*\\\\(\"\n        message: \"file() reads entire files into memory; prefer SplFileObject for line-by-line streaming.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n</rule>\n\n<rule>\nname: php_ini_opcache_recommendations\ndescription: Recommend enabling OPcache for lower memory and better performance when editing php.ini\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.ini$\"\n\nactions:\n  - type: suggest\n    message: |\n      **OPcache recommendations (php.ini):**\n      - Set `opcache.enable=1` and `opcache.enable_cli=1` for CLI scripts that process large datasets.\n      - Size memory pool appropriately, e.g., `opcache.memory_consumption=128` (adjust to your project).\n      - Consider `opcache.interned_strings_buffer` and `opcache.max_accelerated_files` for larger codebases.\n\n  - type: enforce\n    conditions:\n      - pattern: \"(?mi)^opcache\\\\.enable\\\\s*=\\\\s*0\"\n        message: \"Enable OPcache in production (set opcache.enable=1) to reduce memory and CPU overhead.\"\n\nmetadata:\n  priority: medium\n  version: 1.0\n</rule>\n\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/php-memory-optimisation.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/php-memory-optimisation.mdc",
      "sha": "6c55571d6933a51eaf71a54ae9472165f22cf221"
    }
  },
  {
    "name": "ivangrynenko-project-definition-template",
    "slug": "project-definition-template",
    "displayName": "Project Definition Template",
    "description": "--- description: Template for defining project context globs: README.md, /docs/*",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Template for defining project context\nglobs: README.md, /docs/*\n---\n# Comprehensive Project Definition Template\n\nThis rule enforces best practices for documenting project context, ensuring clarity and maintainability through well-documented README files and documentation.\n\n<rule>\nname: comprehensive_project_definition\ndescription: Enforce comprehensive project context definition for CursorAI\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.md$\"\n  - type: file_path\n    pattern: \"README.md|/docs/\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"## Project Purpose\"\n        message: \"Define the purpose of the project in the README file, including its goals and objectives.\"\n\n      - pattern: \"## Technical Stack\"\n        message: \"List the technical stack used in the project in the README file, including language versions and frameworks.\"\n\n      - pattern: \"## Folder Structure\"\n        message: \"Document the folder structure in the README file with a brief explanation for each significant directory.\"\n\n      - pattern: \"## Customizations\"\n        message: \"Include any custom themes, modules, or libraries in the README file, explaining their functionality.\"\n\n      - pattern: \"## Libraries\"\n        message: \"List any third-party libraries used in the project in the README file, including versions for reproducibility.\"\n\n      - pattern: \"## Setup Instructions\"\n        message: \"Provide clear setup instructions in the README to help new contributors or users get started.\"\n\n      - pattern: \"## Contribution Guidelines\"\n        message: \"Document contribution guidelines if the project is open-source or team-based.\"\n\n  - type: suggest\n    message: |\n      **Project Definition Best Practices:**\n      - **README and Docs:** Use both README.md for an overview and /docs/ for detailed documentation.\n      - **Project Purpose:** Clearly articulate why the project exists, its objectives, and who it serves.\n      - **Technical Stack:** Include all technologies, versions, and possibly why each was chosen.\n      - **Folder Structure:** Use tree diagrams or simple bullet points to describe the project's layout.\n      - **Customizations:** Explain any custom code, including its purpose and how it integrates with the project.\n      - **Libraries:** Detail external dependencies, why they're used, and how to manage them (e.g., npm, composer).\n      - **Setup Instructions:** Provide step-by-step guidance for setting up the project environment.\n      - **Contribution Guidelines:** Outline how to contribute, including coding standards, branch management, and pull request process.\n      - **License:** Include information about the project's licensing for legal clarity.\n      - **Roadmap:** Optionally, add a roadmap section to discuss future plans or features.\n\n  - type: validate\n    conditions:\n      - pattern: \"## Project Purpose\"\n        message: \"Ensure the project purpose is clearly defined for understanding the project's intent.\"\n\n      - pattern: \"## Technical Stack\"\n        message: \"Ensure the technical stack is documented to aid in tech stack comprehension.\"\n\n      - pattern: \"## Folder Structure\"\n        message: \"Ensure the folder structure is outlined for navigation ease.\"\n\n      - pattern: \"## Customizations\"\n        message: \"Ensure customizations are documented for understanding unique project elements.\"\n\n      - pattern: \"## Libraries\"\n        message: \"Ensure libraries are listed for dependency management.\"\n\n      - pattern: \"## Setup Instructions\"\n        message: \"Ensure setup instructions are included to facilitate onboarding.\"\n\nmetadata:\n  priority: medium\n  version: 1.1\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/project-definition-template.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/project-definition-template.mdc",
      "sha": "2d6eddbbdf9cd97b9839feaeac0a49c6513a562c"
    }
  },
  {
    "name": "ivangrynenko-pull-request-changelist-instructions",
    "slug": "pull-request-changelist-instructions",
    "displayName": "Pull Request Changelist Instructions",
    "description": "--- description: Guidelines for creating consistent pull request changelists in markdown format with proper code block formatting globs:",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Guidelines for creating consistent pull request changelists in markdown format with proper code block formatting\nglobs: \nalwaysApply: false\n---\n---\ndescription: Updated guidelines for creating consistent pull request changelists in markdown format, ensuring strict raw markdown code block formatting and proper structure.\nglobs: \"*.md\"\nalwaysApply: false\n---\n# Pull Request Changelist Format\n\nThis document outlines strict standards for creating and formatting pull request changelists in markdown. Following these guidelines ensures that the output remains as raw markdown (unrendered) and prevents any issues with Cursor’s markdown rendering.\n\n<rule>\nname: pull_request_changelist_format\ndescription: Updated guidelines for creating consistent pull request changelists in markdown with strict code block handling and structured formatting.\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.md$\"\n  - type: content\n    pattern: \"(?i)(pull request|pr|changelist|changelog)\"\n\nactions:\n  - type: suggest\n    message: |\n      ## Updated Pull Request Changelist Guidelines\n\n      To guarantee clarity and consistency, please adhere to the following time-tested, unambiguous guidelines when requesting a PR changelist from Cursor:\n\n      ### 1. Request Format\n      **Always explicitly request raw markdown output in a code block** using one of these exact phrases:\n      - \"Return markdown as code\"\n      - \"Return as code inside markdown as code (one block)\"\n      - \"Provide the markdown in a code block\"\n      - \"Return the content as a markdown code block, not as formatted text\"\n      - \"Generate the PR changelist in a markdown code block\"\n\n      Avoid ambiguous wording that could lead to a rendered (formatted) output.\n\n      ### 2. Expected Response Format\n      Cursor should always respond with a raw markdown code block that looks like:\n      ```\n      ```markdown\n      # Summary of Changes\n\n      ## Category Name\n      - Change item\n      ```\n      ```\n\n      ### 3. Handling Incorrect Format\n      If the response is rendered markdown rather than a raw code block, prompt with one of the following:\n      - \"Please provide the exact markdown in a code block using triple backticks, not as formatted text.\"\n      - \"I require the raw markdown syntax; reformat your response with triple backticks.\"\n      - \"Reformat your output as a code block enclosed in triple backticks.\"\n\n      ### 4. Changelist Structure\n      - **Main Heading:** Must begin with `# Summary of Changes`\n      - **Categories:** Use `##` headings to group related changes.\n      - **Changes:** List each change with a bullet (`-`), starting with a past tense verb (e.g., Added, Updated, Removed).\n      - **Code/Variables:** Enclose module names or configuration settings in backticks (e.g., `module_name`).\n\n      ### 5. Content Requirements\n      - Be specific about what changed and why.\n      - Group similar changes under the appropriate category headings.\n      - For configuration changes, include both the setting name and its new value.\n      - Keep each entry concise but descriptive.\n\n      ### 6. Example Command\n      To request a changelist from Cursor, try:\n      ```\n      Prepare a PR changelist based on these changes. Return the markdown in a code block with triple backticks.\n      ```\n\n      Adhering to these traditional, time-tested formatting guidelines not only prevents ambiguity but also paves the way for future improvements in automated changelist generation.\n      \n  - type: validate\n    conditions:\n      - pattern: \"^```\\\\s*markdown\\\\s*\\\\n#\\\\s+Summary\\\\s+of\\\\s+Changes\"\n        message: \"The changelist must be a raw markdown code block starting with '# Summary of Changes'. Ensure the use of triple backticks and correct heading structure.\"\n      - pattern: \"-\\\\s+(Added|Updated|Removed)\\\\b\"\n        message: \"Each bullet point must begin with a past tense verb: 'Added', 'Updated', or 'Removed'.\"\n      \nexamples:\n  - input: |\n      Request: \"Create a PR changelist for my changes. Return markdown code as code.\"\n      \n      Good Response from Cursor:\n      ```markdown\n      # Summary of Changes\n\n      ## Environment Configuration\n      - Updated `STAGE_FILE_PROXY_URL` to data.safeworkaustralia.gov.au\n      - Updated `LOCALDEV_URL` to dataswa.docker.amazee.io\n\n      ## Module Changes\n      - Removed `page_cache` module\n      - Added `stage_file_proxy` module\n      ```\n    output: |\n      This is the correct format for Cursor to return a changelist – as a raw markdown code block enclosed in triple backticks.\n      \n  - input: |\n      Request: \"Create a PR changelist for my changes.\"\n      \n      Bad Response from Cursor (rendered markdown instead of a code block):\n      # Summary of Changes\n\n      ## Environment Configuration\n      - Updated `STAGE_FILE_PROXY_URL` to data.safeworkaustralia.gov.au\n      - Updated `LOCALDEV_URL` to dataswa.docker.amazee.io\n    output: |\n      This response is incorrectly formatted as rendered markdown. Please ask Cursor to provide the output as a raw markdown code block with triple backticks.\n\nmetadata:\n  priority: medium\n  version: 1.2\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/pull-request-changelist-instructions.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/pull-request-changelist-instructions.mdc",
      "sha": "42590e2414442743d65c41929bcea92b74f57b05"
    }
  },
  {
    "name": "ivangrynenko-python-authentication-failures",
    "slug": "python-authentication-failures",
    "displayName": "Python Authentication Failures",
    "description": "--- description: Detect and prevent identification and authentication failures in Python applications as defined in OWASP Top 10:2021-A07 globs: *.py,",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "python"
    ],
    "content": "---\ndescription: Detect and prevent identification and authentication failures in Python applications as defined in OWASP Top 10:2021-A07\nglobs: *.py, *.ini, *.cfg, *.yml, *.yaml, *.json, *.toml\nalwaysApply: false\n---\n # Python Identification and Authentication Failures Standards (OWASP A07:2021)\n\nThis rule enforces security best practices to prevent identification and authentication failures in Python applications, as defined in OWASP Top 10:2021-A07.\n\n<rule>\nname: python_authentication_failures\ndescription: Detect and prevent identification and authentication failures in Python applications as defined in OWASP Top 10:2021-A07\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(py|ini|cfg|yml|yaml|json|toml)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Weak password validation\n      - pattern: \"password\\\\s*=\\\\s*['\\\"][^'\\\"]{1,7}['\\\"]|min_length\\\\s*=\\\\s*[1-7]\"\n        message: \"Weak password policy detected. Passwords should be at least 8 characters long and include complexity requirements.\"\n        \n      # Pattern 2: Hardcoded credentials\n      - pattern: \"(username|user|login|password|passwd|pwd|secret|api_key|apikey|token)\\\\s*=\\\\s*['\\\"][^'\\\"]+['\\\"]\"\n        message: \"Hardcoded credentials detected. Store sensitive credentials in environment variables or a secure vault.\"\n        \n      # Pattern 3: Missing password hashing\n      - pattern: \"password\\\\s*=\\\\s*request\\\\.form\\\\[\\\\'password\\\\'\\\\]|password\\\\s*=\\\\s*request\\\\.POST\\\\.get\\\\(\\\\'password\\\\'\\\\)\"\n        message: \"Storing or comparing plain text passwords detected. Always hash passwords before storage or comparison.\"\n        \n      # Pattern 4: Insecure password hashing\n      - pattern: \"hashlib\\\\.md5\\\\(|hashlib\\\\.sha1\\\\(|hashlib\\\\.sha224\\\\(\"\n        message: \"Insecure hashing algorithm detected. Use strong hashing algorithms like bcrypt, Argon2, or PBKDF2.\"\n        \n      # Pattern 5: Missing brute force protection\n      - pattern: \"@app\\\\.route\\\\(['\\\"]\\\\/(login|signin|authenticate)['\\\"]\"\n        message: \"Authentication endpoint detected without rate limiting or brute force protection. Implement account lockout or rate limiting.\"\n        \n      # Pattern 6: Insecure session management\n      - pattern: \"session\\\\[\\\\'user_id\\\\'\\\\]\\\\s*=|session\\\\[\\\\'authenticated\\\\'\\\\]\\\\s*=\\\\s*True\"\n        message: \"Session management detected. Ensure proper session security with secure cookies, proper expiration, and rotation.\"\n        \n      # Pattern 7: Missing CSRF protection in authentication\n      - pattern: \"form\\\\s*=\\\\s*FlaskForm|class\\\\s+\\\\w+Form\\\\(\\\\s*FlaskForm\\\\s*\\\\)|class\\\\s+\\\\w+Form\\\\(\\\\s*Form\\\\s*\\\\)\"\n        message: \"Form handling detected. Ensure CSRF protection is enabled for all authentication forms.\"\n        \n      # Pattern 8: Insecure remember me functionality\n      - pattern: \"remember_me|remember_token|stay_logged_in\"\n        message: \"Remember me functionality detected. Ensure secure implementation with proper expiration and refresh mechanisms.\"\n        \n      # Pattern 9: Insecure password reset\n      - pattern: \"@app\\\\.route\\\\(['\\\"]\\\\/(reset-password|forgot-password|recover)['\\\"]\"\n        message: \"Password reset functionality detected. Ensure secure implementation with time-limited tokens and proper user verification.\"\n        \n      # Pattern 10: Missing multi-factor authentication\n      - pattern: \"def\\\\s+login|def\\\\s+authenticate|def\\\\s+signin\"\n        message: \"Authentication function detected. Consider implementing multi-factor authentication for sensitive operations.\"\n        \n      # Pattern 11: Insecure direct object reference in user management\n      - pattern: \"User\\\\.objects\\\\.get\\\\(id=|User\\\\.query\\\\.get\\\\(|get_user_by_id\\\\(\"\n        message: \"Direct user lookup detected. Ensure proper authorization checks before accessing user data.\"\n        \n      # Pattern 12: Insecure JWT implementation\n      - pattern: \"jwt\\\\.encode\\\\(|jwt\\\\.decode\\\\(\"\n        message: \"JWT usage detected. Ensure proper signing, validation, expiration, and refresh mechanisms for JWTs.\"\n        \n      # Pattern 13: Missing secure flag in cookies\n      - pattern: \"set_cookie\\\\([^,]+,[^,]+,[^,]*secure=False|set_cookie\\\\([^,]+,[^,]+(?!,\\\\s*secure=True)\"\n        message: \"Cookie setting without secure flag detected. Set secure=True for all authentication cookies.\"\n        \n      # Pattern 14: Missing HTTP-only flag in cookies\n      - pattern: \"set_cookie\\\\([^,]+,[^,]+,[^,]*httponly=False|set_cookie\\\\([^,]+,[^,]+(?!,\\\\s*httponly=True)\"\n        message: \"Cookie setting without httponly flag detected. Set httponly=True for all authentication cookies.\"\n        \n      # Pattern 15: Insecure default credentials\n      - pattern: \"DEFAULT_USERNAME|DEFAULT_PASSWORD|ADMIN_USERNAME|ADMIN_PASSWORD\"\n        message: \"Default credential configuration detected. Remove default credentials from production code.\"\n\n  - type: suggest\n    message: |\n      **Python Authentication Security Best Practices:**\n      \n      1. **Password Storage:**\n         - Use strong hashing algorithms with salting\n         - Implement proper work factors\n         - Example with passlib:\n           ```python\n           from passlib.hash import argon2\n           \n           # Hash a password\n           hashed_password = argon2.hash(\"user_password\")\n           \n           # Verify a password\n           is_valid = argon2.verify(\"user_password\", hashed_password)\n           ```\n         - Example with Django:\n           ```python\n           from django.contrib.auth.hashers import make_password, check_password\n           \n           # Hash a password\n           hashed_password = make_password(\"user_password\")\n           \n           # Verify a password\n           is_valid = check_password(\"user_password\", hashed_password)\n           ```\n      \n      2. **Password Policies:**\n         - Enforce minimum length (at least 8 characters)\n         - Require complexity (uppercase, lowercase, numbers, special characters)\n         - Check against common passwords\n         - Example with Django:\n           ```python\n           # settings.py\n           AUTH_PASSWORD_VALIDATORS = [\n               {\n                   'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n                   'OPTIONS': {'min_length': 12}\n               },\n               {\n                   'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n               },\n               {\n                   'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n               },\n               {\n                   'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n               },\n           ]\n           ```\n      \n      3. **Brute Force Protection:**\n         - Implement account lockout after failed attempts\n         - Use rate limiting for authentication endpoints\n         - Example with Flask and Flask-Limiter:\n           ```python\n           from flask import Flask\n           from flask_limiter import Limiter\n           from flask_limiter.util import get_remote_address\n           \n           app = Flask(__name__)\n           limiter = Limiter(\n               app,\n               key_func=get_remote_address,\n               default_limits=[\"200 per day\", \"50 per hour\"]\n           )\n           \n           @app.route(\"/login\", methods=[\"POST\"])\n           @limiter.limit(\"5 per minute\")\n           def login():\n               # Login logic here\n               pass\n           ```\n      \n      4. **Multi-Factor Authentication:**\n         - Implement MFA for sensitive operations\n         - Use time-based one-time passwords (TOTP)\n         - Example with pyotp:\n           ```python\n           import pyotp\n           \n           # Generate a secret key for the user\n           secret = pyotp.random_base32()\n           \n           # Create a TOTP object\n           totp = pyotp.TOTP(secret)\n           \n           # Verify a token\n           is_valid = totp.verify(user_provided_token)\n           ```\n      \n      5. **Secure Session Management:**\n         - Use secure, HTTP-only cookies\n         - Implement proper session expiration\n         - Rotate session IDs after login\n         - Example with Flask:\n           ```python\n           from flask import Flask, session\n           \n           app = Flask(__name__)\n           app.config.update(\n               SECRET_KEY='your-secret-key',\n               SESSION_COOKIE_SECURE=True,\n               SESSION_COOKIE_HTTPONLY=True,\n               SESSION_COOKIE_SAMESITE='Lax',\n               PERMANENT_SESSION_LIFETIME=timedelta(hours=1)\n           )\n           ```\n      \n      6. **CSRF Protection:**\n         - Implement CSRF tokens for all forms\n         - Validate tokens on form submission\n         - Example with Flask-WTF:\n           ```python\n           from flask_wtf import FlaskForm, CSRFProtect\n           from wtforms import StringField, PasswordField, SubmitField\n           \n           csrf = CSRFProtect(app)\n           \n           class LoginForm(FlaskForm):\n               username = StringField('Username')\n               password = PasswordField('Password')\n               submit = SubmitField('Login')\n           ```\n      \n      7. **Secure Password Reset:**\n         - Use time-limited, single-use tokens\n         - Send reset links to verified email addresses\n         - Example implementation:\n           ```python\n           import secrets\n           from datetime import datetime, timedelta\n           \n           def generate_reset_token(user_id):\n               token = secrets.token_urlsafe(32)\n               expiry = datetime.utcnow() + timedelta(hours=1)\n               # Store token and expiry in database with user_id\n               return token\n           \n           def verify_reset_token(token):\n               # Retrieve token from database\n               # Check if token exists and is not expired\n               # If valid, return user_id\n               pass\n           ```\n      \n      8. **Secure JWT Implementation:**\n         - Use strong signing keys\n         - Include expiration claims\n         - Validate all claims\n         - Example with PyJWT:\n           ```python\n           import jwt\n           from datetime import datetime, timedelta\n           \n           # Create a JWT\n           payload = {\n               'user_id': user.id,\n               'exp': datetime.utcnow() + timedelta(hours=1),\n               'iat': datetime.utcnow()\n           }\n           token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')\n           \n           # Verify a JWT\n           try:\n               payload = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])\n               user_id = payload['user_id']\n           except jwt.ExpiredSignatureError:\n               # Token has expired\n               pass\n           except jwt.InvalidTokenError:\n               # Invalid token\n               pass\n           ```\n      \n      9. **Secure Cookie Configuration:**\n         - Set secure, HTTP-only, and SameSite flags\n         - Example with Flask:\n           ```python\n           from flask import Flask, make_response\n           \n           app = Flask(__name__)\n           \n           @app.route('/set_cookie')\n           def set_cookie():\n               resp = make_response('Cookie set')\n               resp.set_cookie(\n                   'session_id', \n                   'value', \n                   secure=True, \n                   httponly=True, \n                   samesite='Lax',\n                   max_age=3600\n               )\n               return resp\n           ```\n      \n      10. **Credential Storage:**\n          - Use environment variables or secure vaults\n          - Never hardcode credentials\n          - Example with python-dotenv:\n            ```python\n            import os\n            from dotenv import load_dotenv\n            \n            load_dotenv()\n            \n            # Access credentials from environment variables\n            db_user = os.environ.get('DB_USER')\n            db_password = os.environ.get('DB_PASSWORD')\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Proper password hashing\n      - pattern: \"argon2|bcrypt|pbkdf2|make_password|generate_password_hash\"\n        message: \"Using secure password hashing algorithms.\"\n      \n      # Check 2: CSRF protection\n      - pattern: \"csrf|CSRFProtect|csrf_token|csrftoken\"\n        message: \"CSRF protection is implemented.\"\n      \n      # Check 3: Secure cookie settings\n      - pattern: \"SESSION_COOKIE_SECURE\\\\s*=\\\\s*True|secure=True|httponly=True|samesite\"\n        message: \"Secure cookie settings are configured.\"\n      \n      # Check 4: Rate limiting\n      - pattern: \"limiter\\\\.limit|RateLimitExceeded|rate_limit|throttle\"\n        message: \"Rate limiting is implemented for authentication endpoints.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - python\n    - authentication\n    - identity\n    - owasp\n    - language:python\n    - framework:django\n    - framework:flask\n    - framework:fastapi\n    - category:security\n    - subcategory:authentication\n    - standard:owasp-top10\n    - risk:a07-identification-authentication-failures\n  references:\n    - \"https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Credential_Stuffing_Prevention_Cheat_Sheet.html\"\n    - \"https://docs.djangoproject.com/en/stable/topics/auth/passwords/\"\n    - \"https://flask-login.readthedocs.io/en/latest/\"\n    - \"https://fastapi.tiangolo.com/tutorial/security/\"\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/python-authentication-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/python-authentication-failures.mdc",
      "sha": "b59062ff64d942cafd8ffbdba6a0d153f178ac5a"
    }
  },
  {
    "name": "ivangrynenko-python-broken-access-control",
    "slug": "python-broken-access-control",
    "displayName": "Python Broken Access Control",
    "description": "--- description: Detect and prevent broken access control vulnerabilities in Python applications as defined in OWASP Top 10:2021-A01 globs: *.py",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "python"
    ],
    "content": "---\ndescription: Detect and prevent broken access control vulnerabilities in Python applications as defined in OWASP Top 10:2021-A01\nglobs: *.py\nalwaysApply: false\n---\n# Python Broken Access Control Security Standards (OWASP A01:2021)\n\nThis rule enforces security best practices to prevent broken access control vulnerabilities in Python applications, as defined in OWASP Top 10:2021-A01.\n\n<rule>\nname: python_broken_access_control\ndescription: Detect and prevent broken access control vulnerabilities in Python applications as defined in OWASP Top 10:2021-A01\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(py)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Missing access control in Flask routes\n      - pattern: \"@(app|blueprint)\\\\.route\\\\([^)]*\\\\)\\\\s*\\\\n\\\\s*def\\\\s+[a-zA-Z0-9_]+\\\\([^)]*\\\\):\\\\s*(?![^#]*@login_required|[^#]*current_user\\\\.|[^#]*session\\\\[)\"\n        message: \"Flask route lacks access control. Consider using @login_required or checking user permissions within the function.\"\n        \n      # Pattern 2: Missing access control in Django views\n      - pattern: \"class\\\\s+[A-Za-z0-9_]+View\\\\((?!LoginRequiredMixin|PermissionRequiredMixin|UserPassesTestMixin)[^)]*\\\\):\"\n        message: \"Django class-based view lacks access control mixins. Consider using LoginRequiredMixin, PermissionRequiredMixin, or UserPassesTestMixin.\"\n        \n      # Pattern 3: Insecure direct object reference\n      - pattern: \"(get|filter|find)_by_id\\\\(\\\\s*request\\\\.(GET|POST|args|form|json)\\\\[['\\\"][^'\\\"]+['\\\"]\\\\]\\\\s*\\\\)\"\n        message: \"Potential insecure direct object reference (IDOR). Validate that the current user has permission to access this object.\"\n        \n      # Pattern 4: Hardcoded role checks\n      - pattern: \"if\\\\s+user\\\\.role\\\\s*==\\\\s*['\\\"]admin['\\\"]|if\\\\s+user\\\\.(is_staff|is_superuser)\\\\s*:\"\n        message: \"Hardcoded role checks can be fragile. Consider using a permission system or role-based access control framework.\"\n        \n      # Pattern 5: Missing authorization in FastAPI\n      - pattern: \"@(app|router)\\\\.([a-z]+)\\\\([^)]*\\\\)\\\\s*\\\\n\\\\s*(?:async\\\\s+)?def\\\\s+[a-zA-Z0-9_]+\\\\([^)]*\\\\):\\\\s*(?![^#]*Depends\\\\(|[^#]*Security\\\\(|[^#]*HTTPBearer\\\\()\"\n        message: \"FastAPI endpoint lacks security dependencies. Consider using Depends(get_current_user) or similar security dependencies.\"\n        \n      # Pattern 6: Bypassing access control with admin flags\n      - pattern: \"if\\\\s+request\\\\.(GET|POST|args|form|json)\\\\[['\\\"]admin['\\\"]\\\\]|if\\\\s+request\\\\.(GET|POST|args|form|json)\\\\[['\\\"]debug['\\\"]\\\\]\"\n        message: \"Dangerous admin/debug flags in request parameters could bypass access control. Remove or secure these backdoors.\"\n        \n      # Pattern 7: Insecure use of eval or exec with user input\n      - pattern: \"eval\\\\(|exec\\\\(.*request\\\\.\"\n        message: \"Extremely dangerous use of eval() or exec() with user input can lead to code execution. Avoid these functions entirely.\"\n        \n      # Pattern 8: Missing access control in API endpoints\n      - pattern: \"@api_view\\\\(|@api\\\\.route\\\\(|@app\\\\.api_route\\\\(\"\n        message: \"API endpoint may lack access control. Ensure proper authentication and authorization checks are implemented.\"\n        \n      # Pattern 9: Insecure Flask session usage\n      - pattern: \"session\\\\[['\\\"][^'\\\"]+['\\\"]\\\\]\\\\s*=\\\\s*request\\\\.\"\n        message: \"Setting session variables directly from request data without validation can lead to session-based access control bypasses.\"\n        \n      # Pattern 10: Missing CSRF protection\n      - pattern: \"class\\\\s+[A-Za-z0-9_]+Form\\\\((?!.*csrf).*\\\\):|@csrf_exempt\"\n        message: \"Form or view appears to be missing CSRF protection. Ensure CSRF tokens are properly implemented.\"\n\n  - type: suggest\n    message: |\n      **Python Access Control Best Practices:**\n      \n      1. **Framework-Specific Controls:**\n         - **Django**: Use built-in authentication and permission decorators/mixins\n           - `@login_required`, `LoginRequiredMixin`\n           - `@permission_required`, `PermissionRequiredMixin`\n           - `UserPassesTestMixin` for custom permission logic\n         - **Flask**: Use Flask-Login or similar extensions\n           - `@login_required` decorator\n           - `current_user.is_authenticated` checks\n           - Role-based access control with Flask-Principal\n         - **FastAPI**: Use dependency injection for security\n           - `Depends(get_current_user)` pattern\n           - OAuth2 with `Security(oauth2_scheme)`\n           - JWT validation middleware\n      \n      2. **General Access Control Principles:**\n         - Implement access control at the server side, never rely on client-side checks\n         - Use deny-by-default approach (whitelist vs blacklist)\n         - Implement proper session management\n         - Apply principle of least privilege\n         - Use contextual access control (time, location, device-based restrictions when appropriate)\n      \n      3. **Object-Level Authorization:**\n         - Validate user has permission to access specific resources\n         - Implement row-level security for database access\n         - Use UUIDs instead of sequential IDs when possible\n         - Always verify ownership or permission before allowing operations on objects\n      \n      4. **API Security:**\n         - Implement proper authentication for all API endpoints\n         - Use token-based authentication with proper validation\n         - Apply rate limiting to prevent brute force attacks\n         - Implement proper CORS configuration\n         - Log and monitor access control failures\n      \n      5. **Testing Access Control:**\n         - Write tests specifically for authorization logic\n         - Test vertical access control (different permission levels)\n         - Test horizontal access control (same permission level, different users)\n         - Verify access control works after session timeout/expiration\n\n  - type: validate\n    conditions:\n      # Check 1: Proper Django permission usage\n      - pattern: \"@login_required|@permission_required|LoginRequiredMixin|PermissionRequiredMixin\"\n        message: \"Using Django's built-in access control mechanisms.\"\n      \n      # Check 2: Proper Flask authentication\n      - pattern: \"@login_required|current_user\\\\.is_authenticated|@auth\\\\.login_required\"\n        message: \"Implementing proper Flask authentication checks.\"\n      \n      # Check 3: Object-level permission checks\n      - pattern: \"\\\\.has_permission\\\\(|has_object_permission\\\\(|can_view\\\\(|can_edit\\\\(\"\n        message: \"Implementing object-level permission checks.\"\n      \n      # Check 4: FastAPI security dependencies\n      - pattern: \"Depends\\\\(get_current_user\\\\)|Security\\\\(|HTTPBearer\\\\(\"\n        message: \"Using FastAPI's security dependency injection.\"\n\nmetadata:\n  priority: 90\n  version: \"1.0\"\n  tags:\n    - python\n    - security\n    - access_control\n    - owasp\n    - language:python\n    - category:security\n    - subcategory:authorisation\n    - subcategory:access-control\n    - standard:owasp-top10\n    - risk:a01-broken-access-control\n    - framework:django\n    - framework:flask\n    - framework:fastapi\n  references:\n    - https://owasp.org/Top10/A01_2021-Broken_Access_Control/\n    - https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html\n    - https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html\n    - https://docs.djangoproject.com/en/stable/topics/auth/default/\n    - https://flask-login.readthedocs.io/en/latest/\n    - https://fastapi.tiangolo.com/tutorial/security/\n    - https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/python-broken-access-control.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/python-broken-access-control.mdc",
      "sha": "2ed05c7e717d48901685912f53b928881931f1c8"
    }
  },
  {
    "name": "ivangrynenko-python-cryptographic-failures",
    "slug": "python-cryptographic-failures",
    "displayName": "Python Cryptographic Failures",
    "description": "--- description: Detect and prevent cryptographic failures in Python applications as defined in OWASP Top 10:2021-A02 globs: *.py",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "python"
    ],
    "content": "---\ndescription: Detect and prevent cryptographic failures in Python applications as defined in OWASP Top 10:2021-A02\nglobs: *.py\nalwaysApply: false\n---\n# Python Cryptographic Failures Security Standards (OWASP A02:2021)\n\nThis rule enforces security best practices to prevent cryptographic failures in Python applications, as defined in OWASP Top 10:2021-A02.\n\n<rule>\nname: python_cryptographic_failures\ndescription: Detect and prevent cryptographic failures in Python applications as defined in OWASP Top 10:2021-A02\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(py)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Weak or insecure cryptographic algorithms\n      - pattern: \"import\\\\s+(md5|sha1)|hashlib\\\\.(md5|sha1)\\\\(|Crypto\\\\.Hash\\\\.(MD5|SHA1)|cryptography\\\\.hazmat\\\\.primitives\\\\.hashes\\\\.(MD5|SHA1)\"\n        message: \"Using weak hashing algorithms (MD5/SHA1). Use SHA-256 or stronger algorithms from the hashlib or cryptography packages.\"\n        \n      # Pattern 2: Hardcoded secrets/credentials\n      - pattern: \"(password|secret|key|token|auth)\\\\s*=\\\\s*['\\\"][^'\\\"]+['\\\"]\"\n        message: \"Potential hardcoded credentials detected. Store secrets in environment variables or a secure vault.\"\n        \n      # Pattern 3: Insecure random number generation\n      - pattern: \"random\\\\.(random|randint|choice|sample)|import random\"\n        message: \"Using Python's standard random module for security purposes. Use secrets module or cryptography.hazmat.primitives.asymmetric for cryptographic operations.\"\n        \n      # Pattern 4: Weak SSL/TLS configuration\n      - pattern: \"ssl\\\\.PROTOCOL_(SSLv2|SSLv3|TLSv1|TLSv1_1)|SSLContext\\\\(\\\\s*ssl\\\\.PROTOCOL_(SSLv2|SSLv3|TLSv1|TLSv1_1)\\\\)\"\n        message: \"Using deprecated/insecure SSL/TLS protocol versions. Use TLS 1.2+ (ssl.PROTOCOL_TLS_CLIENT with minimum version set).\"\n        \n      # Pattern 5: Missing certificate validation\n      - pattern: \"verify\\\\s*=\\\\s*False|check_hostname\\\\s*=\\\\s*False|CERT_NONE\"\n        message: \"SSL certificate validation is disabled. Always validate certificates in production environments.\"\n        \n      # Pattern 6: Insecure cipher usage\n      - pattern: \"DES|RC4|Blowfish|ECB\"\n        message: \"Using insecure encryption cipher or mode. Use AES with GCM or CBC mode with proper padding.\"\n        \n      # Pattern 7: Insufficient key length\n      - pattern: \"RSA\\\\([^,]+,\\\\s*[0-9]+\\\\s*\\\\)|key_size\\\\s*=\\\\s*([0-9]|10[0-9][0-9]|11[0-9][0-9]|12[0-4][0-9])\"\n        message: \"Using insufficient key length for asymmetric encryption. RSA keys should be at least 2048 bits, preferably 4096 bits.\"\n        \n      # Pattern 8: Insecure password hashing\n      - pattern: \"\\\\.encode\\\\(['\\\"]utf-?8['\\\"]\\\\)\\\\.(digest|hexdigest)\\\\(\\\\)|hashlib\\\\.[a-zA-Z0-9]+\\\\([^)]*\\\\)\\\\.(digest|hexdigest)\\\\(\\\\)\"\n        message: \"Using plain hashing for passwords. Use dedicated password hashing functions like bcrypt, Argon2, or PBKDF2.\"\n        \n      # Pattern 9: Missing salt in password hashing\n      - pattern: \"pbkdf2_hmac\\\\([^,]+,[^,]+,[^,]+,\\\\s*[0-9]+\\\\s*\\\\)\"\n        message: \"Ensure you're using a proper random salt with password hashing functions.\"\n        \n      # Pattern 10: Insecure cookie settings\n      - pattern: \"set_cookie\\\\([^)]*secure\\\\s*=\\\\s*False|set_cookie\\\\([^)]*httponly\\\\s*=\\\\s*False\"\n        message: \"Cookies with sensitive data should have secure and httponly flags enabled.\"\n\n  - type: suggest\n    message: |\n      **Python Cryptography Best Practices:**\n      \n      1. **Secure Password Storage:**\n         - Use dedicated password hashing algorithms:\n           ```python\n           import bcrypt\n           hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt(rounds=12))\n           ```\n         - Or use Argon2 (preferred) or PBKDF2 with sufficient iterations:\n           ```python\n           from argon2 import PasswordHasher\n           ph = PasswordHasher()\n           hash = ph.hash(password)\n           ```\n      \n      2. **Secure Random Number Generation:**\n         - Use the `secrets` module for cryptographic operations:\n           ```python\n           import secrets\n           token = secrets.token_hex(32)  # 256 bits of randomness\n           ```\n         - For cryptographic keys, use proper key generation functions:\n           ```python\n           from cryptography.hazmat.primitives.asymmetric import rsa\n           private_key = rsa.generate_private_key(public_exponent=65537, key_size=4096)\n           ```\n      \n      3. **Secure Communications:**\n         - Use TLS 1.2+ for all communications:\n           ```python\n           import ssl\n           context = ssl.create_default_context()\n           context.minimum_version = ssl.TLSVersion.TLSv1_2\n           ```\n         - Always validate certificates:\n           ```python\n           import requests\n           response = requests.get('https://example.com', verify=True)\n           ```\n      \n      4. **Proper Key Management:**\n         - Never hardcode secrets in source code\n         - Use environment variables or secure vaults:\n           ```python\n           import os\n           api_key = os.environ.get('API_KEY')\n           ```\n         - Consider using dedicated key management services\n      \n      5. **Secure Encryption:**\n         - Use high-level libraries like `cryptography`:\n           ```python\n           from cryptography.fernet import Fernet\n           key = Fernet.generate_key()\n           f = Fernet(key)\n           encrypted = f.encrypt(data)\n           ```\n         - For lower-level needs, use authenticated encryption (AES-GCM):\n           ```python\n           from cryptography.hazmat.primitives.ciphers.aead import AESGCM\n           key = AESGCM.generate_key(bit_length=256)\n           aesgcm = AESGCM(key)\n           nonce = os.urandom(12)\n           encrypted = aesgcm.encrypt(nonce, data, associated_data)\n           ```\n      \n      6. **Secure Cookie Handling:**\n         - Set secure and httponly flags:\n           ```python\n           # Flask example\n           response.set_cookie('session', session_id, httponly=True, secure=True, samesite='Lax')\n           ```\n         - Use signed cookies or tokens:\n           ```python\n           # Django example - uses signed cookies by default\n           request.session['user_id'] = user.id\n           ```\n      \n      7. **Input Validation:**\n         - Validate all cryptographic inputs\n         - Use constant-time comparison for secrets:\n           ```python\n           import hmac\n           def constant_time_compare(a, b):\n               return hmac.compare_digest(a, b)\n           ```\n\n  - type: validate\n    conditions:\n      # Check 1: Proper password hashing\n      - pattern: \"bcrypt\\\\.hashpw|argon2|PasswordHasher|pbkdf2_hmac\\\\([^,]+,[^,]+,[^,]+,\\\\s*[0-9]{4,}\\\\s*\\\\)\"\n        message: \"Using secure password hashing algorithm.\"\n      \n      # Check 2: Secure random generation\n      - pattern: \"secrets\\\\.|urandom|cryptography\\\\.hazmat\\\\.primitives\\\\.asymmetric\"\n        message: \"Using cryptographically secure random number generation.\"\n      \n      # Check 3: Strong TLS configuration\n      - pattern: \"ssl\\\\.PROTOCOL_TLS|minimum_version\\\\s*=\\\\s*ssl\\\\.TLSVersion\\\\.TLSv1_2|create_default_context\"\n        message: \"Using secure TLS configuration.\"\n      \n      # Check 4: Proper certificate validation\n      - pattern: \"verify\\\\s*=\\\\s*True|check_hostname\\\\s*=\\\\s*True|CERT_REQUIRED\"\n        message: \"Properly validating SSL certificates.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - python\n    - cryptography\n    - encryption\n    - owasp\n    - language:python\n    - framework:django\n    - framework:flask\n    - framework:fastapi\n    - category:security\n    - subcategory:cryptography\n    - standard:owasp-top10\n    - risk:a02-cryptographic-failures\n  references:\n    - \"https://owasp.org/Top10/A02_2021-Cryptographic_Failures/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html\"\n    - \"https://docs.python.org/3/library/secrets.html\"\n    - \"https://cryptography.io/en/latest/\"\n    - \"https://pypi.org/project/bcrypt/\"\n    - \"https://pypi.org/project/argon2-cffi/\"\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/python-cryptographic-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/python-cryptographic-failures.mdc",
      "sha": "c4861938b8a2762286fd0197e8947020d30fe17b"
    }
  },
  {
    "name": "ivangrynenko-python-injection",
    "slug": "python-injection",
    "displayName": "Python Injection",
    "description": "--- description: Detect and prevent injection vulnerabilities in Python applications as defined in OWASP Top 10:2021-A03 globs: *.py, *.ini, *.cfg, *.",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "python"
    ],
    "content": "---\ndescription: Detect and prevent injection vulnerabilities in Python applications as defined in OWASP Top 10:2021-A03\nglobs: *.py, *.ini, *.cfg, *.yml, *.yaml, *.json, *.toml\nalwaysApply: false\n---\n # Python Injection Security Standards (OWASP A03:2021)\n\nThis rule enforces security best practices to prevent injection vulnerabilities in Python applications, as defined in OWASP Top 10:2021-A03.\n\n<rule>\nname: python_injection\ndescription: Detect and prevent injection vulnerabilities in Python applications as defined in OWASP Top 10:2021-A03\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(py)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: SQL Injection - String concatenation in SQL queries\n      - pattern: \"cursor\\\\.(execute|executemany)\\\\([\\\"'][^\\\"']*\\\\s*[\\\\+%]|cursor\\\\.(execute|executemany)\\\\([^,]+\\\\+\\\\s*[a-zA-Z_][a-zA-Z0-9_]*\"\n        message: \"Potential SQL injection vulnerability. Use parameterized queries with placeholders instead of string concatenation.\"\n        \n      # Pattern 2: SQL Injection - String formatting in SQL queries\n      - pattern: \"cursor\\\\.(execute|executemany)\\\\([\\\"'][^\\\"']*%[^\\\"']*[\\\"']\\\\s*%\\\\s*|cursor\\\\.(execute|executemany)\\\\([\\\"'][^\\\"']*{[^\\\"']*}[\\\"']\\\\.format\"\n        message: \"Potential SQL injection vulnerability. Use parameterized queries with placeholders instead of string formatting.\"\n        \n      # Pattern 3: Command Injection - Shell command execution with user input\n      - pattern: \"(os\\\\.system|os\\\\.popen|subprocess\\\\.Popen|subprocess\\\\.call|subprocess\\\\.run|subprocess\\\\.check_output)\\\\([^)]*\\\\+\\\\s*[a-zA-Z_][a-zA-Z0-9_]*|\\\\b(os\\\\.system|os\\\\.popen|subprocess\\\\.Popen|subprocess\\\\.call|subprocess\\\\.run|subprocess\\\\.check_output)\\\\([^)]*format\\\\(|\\\\b(os\\\\.system|os\\\\.popen|subprocess\\\\.Popen|subprocess\\\\.call|subprocess\\\\.run|subprocess\\\\.check_output)\\\\([^)]*f['\\\"]\"\n        message: \"Potential command injection vulnerability. Never use string concatenation or formatting with shell commands. Use subprocess with shell=False and pass arguments as a list.\"\n        \n      # Pattern 4: Command Injection - Shell=True in subprocess\n      - pattern: \"(subprocess\\\\.Popen|subprocess\\\\.call|subprocess\\\\.run|subprocess\\\\.check_output)\\\\([^)]*shell\\\\s*=\\\\s*True\"\n        message: \"Using shell=True with subprocess functions is dangerous and can lead to command injection. Use shell=False (default) and pass arguments as a list.\"\n        \n      # Pattern 5: XSS - Unescaped template variables\n      - pattern: \"\\\\{\\\\{\\\\s*[^|]*\\\\s*\\\\}\\\\}|\\\\{\\\\%\\\\s*autoescape\\\\s+off\\\\s*\\\\%\\\\}\"\n        message: \"Potential XSS vulnerability. Ensure all template variables are properly escaped. Avoid using 'autoescape off' in templates.\"\n        \n      # Pattern 6: XSS - Unsafe HTML rendering in Flask/Django\n      - pattern: \"render_template\\\\([^)]*\\\\)|render\\\\([^)]*\\\\)|mark_safe\\\\([^)]*\\\\)|safe\\\\s*\\\\|\"\n        message: \"Potential XSS vulnerability. Ensure all user-supplied data is properly escaped before rendering in templates.\"\n        \n      # Pattern 7: Path Traversal - Unsafe file operations\n      - pattern: \"open\\\\([^)]*\\\\+|open\\\\([^)]*format\\\\(|open\\\\([^)]*f['\\\"]\"\n        message: \"Potential path traversal vulnerability. Validate and sanitize file paths before opening files. Consider using os.path.abspath and os.path.normpath.\"\n        \n      # Pattern 8: LDAP Injection - Unsafe LDAP queries\n      - pattern: \"ldap\\\\.search\\\\([^)]*\\\\+|ldap\\\\.search\\\\([^)]*format\\\\(|ldap\\\\.search\\\\([^)]*f['\\\"]\"\n        message: \"Potential LDAP injection vulnerability. Use proper LDAP escaping for user-supplied input in LDAP queries.\"\n        \n      # Pattern 9: NoSQL Injection - Unsafe MongoDB queries\n      - pattern: \"find\\\\(\\\\{[^}]*\\\\+|find\\\\(\\\\{[^}]*format\\\\(|find\\\\(\\\\{[^}]*f['\\\"]\"\n        message: \"Potential NoSQL injection vulnerability. Use parameterized queries or proper escaping for MongoDB queries.\"\n        \n      # Pattern 10: Template Injection - Unsafe template rendering\n      - pattern: \"Template\\\\([^)]*\\\\)\\\\.(render|substitute)\\\\(|eval\\\\([^)]*\\\\)|exec\\\\([^)]*\\\\)\"\n        message: \"Potential template injection or code injection vulnerability. Avoid using eval() or exec() with user input, and ensure template variables are properly validated.\"\n\n  - type: suggest\n    message: |\n      **Python Injection Prevention Best Practices:**\n      \n      1. **SQL Injection Prevention:**\n         - Use parameterized queries (prepared statements) with placeholders:\n           ```python\n           # Safe SQL query with parameters\n           cursor.execute(\"SELECT * FROM users WHERE username = %s AND password = %s\", (username, password))\n           \n           # Django ORM (safe by default)\n           User.objects.filter(username=username, password=password)\n           \n           # SQLAlchemy (safe by default)\n           session.query(User).filter(User.username == username, User.password == password)\n           ```\n         - Use ORM frameworks when possible (Django ORM, SQLAlchemy)\n         - Apply proper input validation and sanitization\n      \n      2. **Command Injection Prevention:**\n         - Never use shell=True with subprocess functions\n         - Pass command arguments as a list, not a string:\n           ```python\n           # Safe command execution\n           subprocess.run([\"ls\", \"-l\", user_dir], shell=False)\n           ```\n         - Use shlex.quote() if you must include user input in shell commands\n         - Consider using safer alternatives like Python libraries instead of shell commands\n      \n      3. **XSS Prevention:**\n         - Use template auto-escaping (enabled by default in modern frameworks)\n         - Explicitly escape user input before rendering:\n           ```python\n           # Django\n           from django.utils.html import escape\n           safe_data = escape(user_input)\n           \n           # Flask/Jinja2\n           from markupsafe import escape\n           safe_data = escape(user_input)\n           ```\n         - Use Content-Security-Policy headers\n         - Validate input against allowlists\n      \n      4. **Path Traversal Prevention:**\n         - Validate and sanitize file paths:\n           ```python\n           import os\n           safe_path = os.path.normpath(os.path.join(safe_base_dir, user_filename))\n           if not safe_path.startswith(safe_base_dir):\n               raise ValueError(\"Invalid path\")\n           ```\n         - Use os.path.abspath() and os.path.normpath()\n         - Implement proper access controls\n         - Consider using libraries like Werkzeug's secure_filename()\n      \n      5. **NoSQL Injection Prevention:**\n         - Use parameterized queries or query builders\n         - Validate input against schemas\n         - Apply proper type checking\n           ```python\n           # Safe MongoDB query\n           collection.find({\"username\": username, \"status\": \"active\"})\n           ```\n      \n      6. **Template Injection Prevention:**\n         - Avoid using eval() or exec() with user input\n         - Use sandboxed template engines\n         - Limit template functionality to what's necessary\n         - Apply proper input validation\n\n  - type: validate\n    conditions:\n      # Check 1: Safe SQL queries\n      - pattern: \"cursor\\\\.(execute|executemany)\\\\([\\\"'][^\\\"']*[\\\"']\\\\s*,\\\\s*\\\\(|cursor\\\\.(execute|executemany)\\\\([\\\"'][^\\\"']*[\\\"']\\\\s*,\\\\s*\\\\[|Model\\\\.objects\\\\.filter\\\\(|session\\\\.query\\\\(\"\n        message: \"Using parameterized queries or ORM for database access.\"\n      \n      # Check 2: Safe command execution\n      - pattern: \"(subprocess\\\\.Popen|subprocess\\\\.call|subprocess\\\\.run|subprocess\\\\.check_output)\\\\(\\\\[[^\\\\]]*\\\\]\"\n        message: \"Using subprocess with arguments as a list (safe pattern).\"\n      \n      # Check 3: Proper input validation\n      - pattern: \"validate|sanitize|clean|escape|is_valid\\\\(|validators\\\\.\"\n        message: \"Implementing input validation or sanitization.\"\n      \n      # Check 4: Safe file operations\n      - pattern: \"os\\\\.path\\\\.join|os\\\\.path\\\\.abspath|os\\\\.path\\\\.normpath|secure_filename\"\n        message: \"Using safe file path handling techniques.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - python\n    - injection\n    - sql-injection\n    - xss\n    - command-injection\n    - owasp\n    - language:python\n    - framework:django\n    - framework:flask\n    - framework:fastapi\n    - category:security\n    - subcategory:injection\n    - standard:owasp-top10\n    - risk:a03-injection\n  references:\n    - \"https://owasp.org/Top10/A03_2021-Injection/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\"\n    - \"https://docs.python.org/3/library/subprocess.html\"\n    - \"https://docs.djangoproject.com/en/stable/topics/security/\"\n    - \"https://flask.palletsprojects.com/en/latest/security/\"\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/python-injection.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/python-injection.mdc",
      "sha": "8fc1e953580d501537a246b1bfa19bbfdee0b740"
    }
  },
  {
    "name": "ivangrynenko-python-insecure-design",
    "slug": "python-insecure-design",
    "displayName": "Python Insecure Design",
    "description": "--- description: Detect and prevent insecure design patterns in Python applications as defined in OWASP Top 10:2021-A04 globs: *.py, *.ini, *.cfg, *.y",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "python"
    ],
    "content": "---\ndescription: Detect and prevent insecure design patterns in Python applications as defined in OWASP Top 10:2021-A04\nglobs: *.py, *.ini, *.cfg, *.yml, *.yaml, *.json, *.toml\nalwaysApply: false\n---\n # Python Insecure Design Security Standards (OWASP A04:2021)\n\nThis rule enforces security best practices to prevent insecure design vulnerabilities in Python applications, as defined in OWASP Top 10:2021-A04.\n\n<rule>\nname: python_insecure_design\ndescription: Detect and prevent insecure design patterns in Python applications as defined in OWASP Top 10:2021-A04\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(py)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Lack of input validation\n      - pattern: \"def\\\\s+[a-zA-Z0-9_]+\\\\([^)]*\\\\):\\\\s*(?![^#]*validate|[^#]*clean|[^#]*sanitize|[^#]*check|[^#]*is_valid)\"\n        message: \"Function lacks input validation. Consider implementing validation for all user-supplied inputs.\"\n        \n      # Pattern 2: Hardcoded business rules\n      - pattern: \"if\\\\s+[a-zA-Z0-9_]+\\\\s*(==|!=|>|<|>=|<=)\\\\s*['\\\"][^'\\\"]+['\\\"]:\"\n        message: \"Hardcoded business rules detected. Consider using configuration files or database-driven rules for better maintainability.\"\n        \n      # Pattern 3: Lack of rate limiting\n      - pattern: \"@(app|api|route|blueprint)\\\\.(get|post|put|delete|patch)\\\\([^)]*\\\\)\\\\s*\\\\n\\\\s*(?![^#]*rate_limit|[^#]*throttle|[^#]*limiter)\"\n        message: \"API endpoint lacks rate limiting. Consider implementing rate limiting to prevent abuse.\"\n        \n      # Pattern 4: Insecure default configurations\n      - pattern: \"DEBUG\\\\s*=\\\\s*True|DEVELOPMENT\\\\s*=\\\\s*True|TESTING\\\\s*=\\\\s*True\"\n        message: \"Insecure default configuration detected. Ensure debug/development modes are disabled in production.\"\n        \n      # Pattern 5: Lack of error handling\n      - pattern: \"(?<!try:\\\\s*\\\\n)[^#]*\\\\n\\\\s*(?!except|finally)\"\n        message: \"Consider implementing proper error handling with try-except blocks for operations that might fail.\"\n        \n      # Pattern 6: Insecure direct object references\n      - pattern: \"get_object_or_404\\\\(\\\\s*[^,]+,\\\\s*pk\\\\s*=\\\\s*request\\\\.(GET|POST|args|form|json)\\\\[['\\\"][^'\\\"]+['\\\"]\\\\]\\\\s*\\\\)|get\\\\(\\\\s*id\\\\s*=\\\\s*request\\\\.(GET|POST|args|form|json)\"\n        message: \"Potential insecure direct object reference. Validate user's permission to access the requested object.\"\n        \n      # Pattern 7: Missing authentication checks\n      - pattern: \"@(app|api|route|blueprint)\\\\.(get|post|put|delete|patch)\\\\([^)]*\\\\)\\\\s*\\\\n\\\\s*(?!.*@login_required|.*@auth\\\\.login_required|.*@jwt_required|.*current_user|.*request\\\\.user)\"\n        message: \"Endpoint lacks authentication checks. Consider adding authentication requirements for sensitive operations.\"\n        \n      # Pattern 8: Lack of proper logging\n      - pattern: \"except\\\\s+[a-zA-Z0-9_]+\\\\s*(?:as\\\\s+[a-zA-Z0-9_]+)?:\\\\s*(?!.*logger\\\\.|.*logging\\\\.|.*print)\"\n        message: \"Exception caught without proper logging. Implement proper logging for exceptions to aid in debugging and monitoring.\"\n        \n      # Pattern 9: Insecure file uploads\n      - pattern: \"request\\\\.files\\\\[['\\\"][^'\\\"]+['\\\"]\\\\]|FileField\\\\(|FileStorage\\\\(\"\n        message: \"File upload functionality detected. Ensure proper validation of file types, sizes, and implement virus scanning if applicable.\"\n        \n      # Pattern 10: Lack of security headers\n      - pattern: \"response\\\\.(headers|set_header)\\\\([^)]*\\\\)|return\\\\s+Response\\\\([^)]*\\\\)|return\\\\s+make_response\\\\([^)]*\\\\)\"\n        message: \"Consider adding security headers (Content-Security-Policy, X-Content-Type-Options, etc.) to HTTP responses.\"\n\n  - type: suggest\n    message: |\n      **Python Secure Design Best Practices:**\n      \n      1. **Implement Defense in Depth:**\n         - Layer security controls throughout your application\n         - Don't rely on a single security mechanism\n         - Assume that each security layer can be bypassed\n      \n      2. **Use Secure Defaults:**\n         - Start with secure configurations by default\n         - Require explicit opt-in for less secure options\n         - Example for Flask:\n           ```python\n           app.config.update(\n               SESSION_COOKIE_SECURE=True,\n               SESSION_COOKIE_HTTPONLY=True,\n               SESSION_COOKIE_SAMESITE='Lax',\n               PERMANENT_SESSION_LIFETIME=timedelta(hours=1)\n           )\n           ```\n      \n      3. **Implement Proper Access Control:**\n         - Use role-based access control (RBAC)\n         - Implement principle of least privilege\n         - Validate access at the controller and service layers\n         - Example:\n           ```python\n           @app.route('/admin')\n           @roles_required('admin')  # Using Flask-Security\n           def admin_dashboard():\n               return render_template('admin/dashboard.html')\n           ```\n      \n      4. **Use Rate Limiting:**\n         - Protect against brute force and DoS attacks\n         - Example with Flask-Limiter:\n           ```python\n           from flask_limiter import Limiter\n           limiter = Limiter(app)\n           \n           @app.route('/login', methods=['POST'])\n           @limiter.limit(\"5 per minute\")\n           def login():\n               # Login logic\n           ```\n      \n      5. **Implement Proper Error Handling:**\n         - Catch and log exceptions appropriately\n         - Return user-friendly error messages without exposing sensitive details\n         - Example:\n           ```python\n           try:\n               # Operation that might fail\n               result = perform_operation(user_input)\n           except ValidationError as e:\n               logger.warning(f\"Validation error: {str(e)}\")\n               return jsonify({\"error\": \"Invalid input provided\"}), 400\n           except Exception as e:\n               logger.error(f\"Unexpected error: {str(e)}\", exc_info=True)\n               return jsonify({\"error\": \"An unexpected error occurred\"}), 500\n           ```\n      \n      6. **Use Configuration Management:**\n         - Store configuration in environment variables or secure vaults\n         - Use different configurations for development and production\n         - Example:\n           ```python\n           import os\n           from dotenv import load_dotenv\n           \n           load_dotenv()\n           \n           DEBUG = os.getenv('DEBUG', 'False') == 'True'\n           SECRET_KEY = os.getenv('SECRET_KEY')\n           DATABASE_URL = os.getenv('DATABASE_URL')\n           ```\n      \n      7. **Implement Proper Logging:**\n         - Log security events and exceptions\n         - Include contextual information but avoid sensitive data\n         - Use structured logging\n         - Example:\n           ```python\n           import logging\n           \n           logger = logging.getLogger(__name__)\n           \n           def user_action(user_id, action):\n               logger.info(\"User action\", extra={\n                   \"user_id\": user_id,\n                   \"action\": action,\n                   \"timestamp\": datetime.now().isoformat()\n               })\n           ```\n      \n      8. **Use Security Headers:**\n         - Implement Content-Security-Policy, X-Content-Type-Options, etc.\n         - Example with Flask:\n           ```python\n           from flask_talisman import Talisman\n           \n           talisman = Talisman(\n               app,\n               content_security_policy={\n                   'default-src': \"'self'\",\n                   'script-src': \"'self'\"\n               }\n           )\n           ```\n      \n      9. **Implement Secure File Handling:**\n         - Validate file types, sizes, and content\n         - Store files outside the web root\n         - Use secure file permissions\n         - Example:\n           ```python\n           import os\n           from werkzeug.utils import secure_filename\n           \n           ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg'}\n           MAX_CONTENT_LENGTH = 1 * 1024 * 1024  # 1MB\n           \n           def allowed_file(filename):\n               return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n           \n           @app.route('/upload', methods=['POST'])\n           def upload_file():\n               if 'file' not in request.files:\n                   return jsonify({\"error\": \"No file part\"}), 400\n               \n               file = request.files['file']\n               if file.filename == '':\n                   return jsonify({\"error\": \"No selected file\"}), 400\n               \n               if file and allowed_file(file.filename):\n                   filename = secure_filename(file.filename)\n                   file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n                   return jsonify({\"success\": True}), 200\n               \n               return jsonify({\"error\": \"File type not allowed\"}), 400\n           ```\n      \n      10. **Use Threat Modeling:**\n          - Identify potential threats during design phase\n          - Implement controls to mitigate identified threats\n          - Regularly review and update threat models\n\n  - type: validate\n    conditions:\n      # Check 1: Proper input validation\n      - pattern: \"validate|clean|sanitize|check|is_valid\"\n        message: \"Implementing input validation.\"\n      \n      # Check 2: Proper error handling\n      - pattern: \"try:\\\\s*\\\\n[^#]*\\\\n\\\\s*(except|finally)\"\n        message: \"Using proper error handling with try-except blocks.\"\n      \n      # Check 3: Rate limiting implementation\n      - pattern: \"rate_limit|throttle|limiter\"\n        message: \"Implementing rate limiting for API endpoints.\"\n      \n      # Check 4: Proper logging\n      - pattern: \"logger\\\\.|logging\\\\.\"\n        message: \"Using proper logging mechanisms.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - python\n    - design\n    - architecture\n    - owasp\n    - language:python\n    - framework:django\n    - framework:flask\n    - framework:fastapi\n    - category:security\n    - subcategory:design\n    - standard:owasp-top10\n    - risk:a04-insecure-design\n  references:\n    - \"https://owasp.org/Top10/A04_2021-Insecure_Design/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Secure_Product_Design_Cheat_Sheet.html\"\n    - \"https://flask.palletsprojects.com/en/latest/security/\"\n    - \"https://docs.djangoproject.com/en/stable/topics/security/\"\n    - \"https://fastapi.tiangolo.com/advanced/security/\"\n    - \"https://owasp.org/www-project-proactive-controls/\"\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/python-insecure-design.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/python-insecure-design.mdc",
      "sha": "c7fa352752566fcfda10f55e9557e98c3b6c2c63"
    }
  },
  {
    "name": "ivangrynenko-python-integrity-failures",
    "slug": "python-integrity-failures",
    "displayName": "Python Integrity Failures",
    "description": "--- description: Detect and prevent software and data integrity failures in Python applications as defined in OWASP Top 10:2021-A08 globs: *.py, *.ini",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "python"
    ],
    "content": "---\ndescription: Detect and prevent software and data integrity failures in Python applications as defined in OWASP Top 10:2021-A08\nglobs: *.py, *.ini, *.cfg, *.yml, *.yaml, *.json, *.toml\nalwaysApply: false\n---\n# Python Software and Data Integrity Failures Standards (OWASP A08:2021)\n\nThis rule enforces security best practices to prevent software and data integrity failures in Python applications, as defined in OWASP Top 10:2021-A08.\n\n<rule>\nname: python_integrity_failures\ndescription: Detect and prevent software and data integrity failures in Python applications as defined in OWASP Top 10:2021-A08\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(py|ini|cfg|yml|yaml|json|toml)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Insecure deserialization with pickle\n      - pattern: \"pickle\\\\.loads\\\\(|pickle\\\\.load\\\\(|cPickle\\\\.loads\\\\(|cPickle\\\\.load\\\\(\"\n        message: \"Insecure deserialization detected with pickle. Pickle is not secure against maliciously constructed data and should not be used with untrusted input.\"\n        \n      # Pattern 2: Insecure deserialization with yaml.load\n      - pattern: \"yaml\\\\.load\\\\([^,)]+\\\\)|yaml\\\\.load\\\\([^,)]+,\\\\s*Loader=yaml\\\\.Loader\\\\)\"\n        message: \"Insecure deserialization detected with yaml.load(). Use yaml.safe_load() instead for untrusted input.\"\n        \n      # Pattern 3: Insecure deserialization with marshal\n      - pattern: \"marshal\\\\.loads\\\\(|marshal\\\\.load\\\\(\"\n        message: \"Insecure deserialization detected with marshal. Marshal is not secure against maliciously constructed data.\"\n        \n      # Pattern 4: Insecure deserialization with shelve\n      - pattern: \"shelve\\\\.open\\\\(\"\n        message: \"Potentially insecure deserialization with shelve detected. Shelve uses pickle internally and is not secure against malicious data.\"\n        \n      # Pattern 5: Insecure use of eval or exec\n      - pattern: \"eval\\\\(|exec\\\\(|compile\\\\([^,]+,\\\\s*['\\\"][^'\\\"]+['\\\"]\\\\s*,\\\\s*['\\\"]exec['\\\"]\\\\)\"\n        message: \"Insecure use of eval() or exec() detected. These functions can execute arbitrary code and should never be used with untrusted input.\"\n        \n      # Pattern 6: Missing integrity verification for downloads\n      - pattern: \"urllib\\\\.request\\\\.urlretrieve\\\\(|requests\\\\.get\\\\([^)]*\\\\.exe['\\\"]\\\\)|requests\\\\.get\\\\([^)]*\\\\.zip['\\\"]\\\\)|requests\\\\.get\\\\([^)]*\\\\.tar\\\\.gz['\\\"]\\\\)\"\n        message: \"File download without integrity verification detected. Always verify the integrity of downloaded files using checksums or digital signatures.\"\n        \n      # Pattern 7: Insecure package installation\n      - pattern: \"pip\\\\s+install\\\\s+[^-]|subprocess\\\\.(?:call|run|Popen)\\\\(['\\\"]pip\\\\s+install\"\n        message: \"Insecure package installation detected. Specify package versions and consider using hash verification for pip installations.\"\n        \n      # Pattern 8: Missing integrity checks for configuration\n      - pattern: \"config\\\\.read\\\\(|json\\\\.loads?\\\\(|yaml\\\\.safe_load\\\\(|toml\\\\.loads?\\\\(\"\n        message: \"Configuration loading detected. Ensure integrity verification for configuration files, especially in production environments.\"\n        \n      # Pattern 9: Insecure temporary file creation\n      - pattern: \"tempfile\\\\.mktemp\\\\(|os\\\\.tempnam\\\\(|os\\\\.tmpnam\\\\(\"\n        message: \"Insecure temporary file creation detected. Use tempfile.mkstemp() or tempfile.TemporaryFile() instead to avoid race conditions.\"\n        \n      # Pattern 10: Insecure file operations with untrusted paths\n      - pattern: \"open\\\\([^,)]+\\\\+\\\\s*request\\\\.|open\\\\([^,)]+\\\\+\\\\s*user_|open\\\\([^,)]+\\\\+\\\\s*input\\\\(\"\n        message: \"Potentially insecure file operation with user-controlled path detected. Validate and sanitize file paths from untrusted sources.\"\n        \n      # Pattern 11: Missing integrity checks for updates\n      - pattern: \"auto_update|self_update|check_for_updates\"\n        message: \"Update mechanism detected. Ensure proper integrity verification for software updates using digital signatures or secure checksums.\"\n        \n      # Pattern 12: Insecure plugin or extension loading\n      - pattern: \"importlib\\\\.import_module\\\\(|__import__\\\\(|load_plugin|load_extension|load_module\"\n        message: \"Dynamic module loading detected. Implement integrity checks and validation before loading external modules or plugins.\"\n        \n      # Pattern 13: Insecure use of subprocess with shell=True\n      - pattern: \"subprocess\\\\.(?:call|run|Popen)\\\\([^,)]*shell\\\\s*=\\\\s*True\"\n        message: \"Insecure subprocess execution with shell=True detected. This can lead to command injection if user input is involved.\"\n        \n      # Pattern 14: Missing integrity verification for serialized data\n      - pattern: \"json\\\\.loads?\\\\([^,)]*request\\\\.|json\\\\.loads?\\\\([^,)]*user_|json\\\\.loads?\\\\([^,)]*input\\\\(\"\n        message: \"Deserialization of user-controlled data detected. Implement schema validation or integrity checks before processing.\"\n        \n      # Pattern 15: Insecure use of globals or locals\n      - pattern: \"globals\\\\(\\\\)\\\\[|locals\\\\(\\\\)\\\\[\"\n        message: \"Potentially insecure modification of globals or locals detected. This can lead to unexpected behavior or security issues.\"\n\n  - type: suggest\n    message: |\n      **Python Software and Data Integrity Best Practices:**\n      \n      1. **Secure Deserialization:**\n         - Avoid using pickle, marshal, or shelve with untrusted data\n         - Use safer alternatives like JSON with schema validation\n         - Example with JSON schema validation:\n           ```python\n           import json\n           import jsonschema\n           \n           # Define a schema for validation\n           schema = {\n               \"type\": \"object\",\n               \"properties\": {\n                   \"name\": {\"type\": \"string\"},\n                   \"age\": {\"type\": \"integer\", \"minimum\": 0}\n               },\n               \"required\": [\"name\", \"age\"]\n           }\n           \n           # Validate data against schema\n           try:\n               data = json.loads(user_input)\n               jsonschema.validate(instance=data, schema=schema)\n               # Process data safely\n           except (json.JSONDecodeError, jsonschema.exceptions.ValidationError) as e:\n               # Handle validation error\n               print(f\"Invalid data: {e}\")\n           ```\n      \n      2. **YAML Safe Loading:**\n         - Always use yaml.safe_load() instead of yaml.load()\n         - Example:\n           ```python\n           import yaml\n           \n           # Safe way to load YAML\n           data = yaml.safe_load(yaml_string)\n           \n           # Avoid this:\n           # data = yaml.load(yaml_string)  # Insecure!\n           ```\n      \n      3. **Integrity Verification for Downloads:**\n         - Verify checksums or signatures for downloaded files\n         - Example:\n           ```python\n           import hashlib\n           import requests\n           \n           def download_with_integrity_check(url, expected_hash):\n               response = requests.get(url)\n               file_data = response.content\n               \n               # Calculate hash\n               calculated_hash = hashlib.sha256(file_data).hexdigest()\n               \n               # Verify integrity\n               if calculated_hash != expected_hash:\n                   raise ValueError(\"Integrity check failed: hash mismatch\")\n                   \n               return file_data\n           ```\n      \n      4. **Secure Package Installation:**\n         - Pin dependencies to specific versions\n         - Use hash verification for pip installations\n         - Example requirements.txt with hashes:\n           ```\n           # requirements.txt\n           requests==2.31.0 --hash=sha256:942c5a758f98d790eaed1a29cb6eefc7ffb0d1cf7af05c3d2791656dbd6ad1e1\n           ```\n      \n      5. **Secure Configuration Management:**\n         - Validate configuration file integrity\n         - Use environment-specific configurations\n         - Example:\n           ```python\n           import json\n           import hmac\n           import hashlib\n           \n           def load_config_with_integrity(config_file, secret_key):\n               with open(config_file, 'r') as f:\n                   content = f.read()\n                   \n               # Split content into data and signature\n               data, _, signature = content.rpartition('\\n')\n               \n               # Verify integrity\n               expected_signature = hmac.new(\n                   secret_key.encode(), \n                   data.encode(), \n                   hashlib.sha256\n               ).hexdigest()\n               \n               if not hmac.compare_digest(signature, expected_signature):\n                   raise ValueError(\"Configuration integrity check failed\")\n                   \n               return json.loads(data)\n           ```\n      \n      6. **Secure Temporary Files:**\n         - Use secure temporary file functions\n         - Example:\n           ```python\n           import tempfile\n           import os\n           \n           # Secure temporary file creation\n           fd, temp_path = tempfile.mkstemp()\n           try:\n               with os.fdopen(fd, 'w') as temp_file:\n                   temp_file.write('data')\n               # Process the file\n           finally:\n               os.unlink(temp_path)  # Clean up\n           \n           # Or use context manager\n           with tempfile.TemporaryFile() as temp_file:\n               temp_file.write(b'data')\n               temp_file.seek(0)\n               # Process the file\n           ```\n      \n      7. **Secure Update Mechanisms:**\n         - Verify signatures for updates\n         - Use HTTPS for update downloads\n         - Example:\n           ```python\n           import requests\n           import gnupg\n           \n           def secure_update(update_url, signature_url, gpg_key):\n               # Download update and signature\n               update_data = requests.get(update_url).content\n               signature = requests.get(signature_url).content\n               \n               # Verify signature\n               gpg = gnupg.GPG()\n               gpg.import_keys(gpg_key)\n               verified = gpg.verify_data(signature, update_data)\n               \n               if not verified:\n                   raise ValueError(\"Update signature verification failed\")\n                   \n               return update_data\n           ```\n      \n      8. **Secure Plugin Loading:**\n         - Validate plugins before loading\n         - Implement allowlisting for plugins\n         - Example:\n           ```python\n           import importlib\n           import hashlib\n           \n           # Allowlist of approved plugins with their hashes\n           APPROVED_PLUGINS = {\n               'safe_plugin': 'sha256:1234567890abcdef',\n               'other_plugin': 'sha256:abcdef1234567890'\n           }\n           \n           def load_plugin_safely(plugin_name, plugin_path):\n               # Check if plugin is in allowlist\n               if plugin_name not in APPROVED_PLUGINS:\n                   raise ValueError(f\"Plugin {plugin_name} is not approved\")\n                   \n               # Calculate plugin file hash\n               with open(plugin_path, 'rb') as f:\n                   plugin_hash = 'sha256:' + hashlib.sha256(f.read()).hexdigest()\n                   \n               # Verify hash matches expected value\n               if plugin_hash != APPROVED_PLUGINS[plugin_name]:\n                   raise ValueError(f\"Plugin {plugin_name} failed integrity check\")\n                   \n               # Load plugin safely\n               return importlib.import_module(plugin_name)\n           ```\n      \n      9. **Secure Subprocess Execution:**\n         - Avoid shell=True\n         - Use allowlists for commands\n         - Example:\n           ```python\n           import subprocess\n           import shlex\n           \n           def run_command_safely(command, arguments):\n               # Allowlist of safe commands\n               SAFE_COMMANDS = {'ls', 'echo', 'cat'}\n               \n               if command not in SAFE_COMMANDS:\n                   raise ValueError(f\"Command {command} is not allowed\")\n                   \n               # Build command with arguments\n               cmd = [command] + arguments\n               \n               # Execute without shell\n               return subprocess.run(cmd, shell=False, capture_output=True, text=True)\n           ```\n      \n      10. **Input Validation and Sanitization:**\n          - Validate all inputs before processing\n          - Use schema validation for structured data\n          - Example with Pydantic:\n            ```python\n            from pydantic import BaseModel, validator\n            \n            class UserData(BaseModel):\n                username: str\n                age: int\n                \n                @validator('username')\n                def username_must_be_valid(cls, v):\n                    if not v.isalnum() or len(v) > 30:\n                        raise ValueError('Username must be alphanumeric and <= 30 chars')\n                    return v\n                    \n                @validator('age')\n                def age_must_be_reasonable(cls, v):\n                    if v < 0 or v > 120:\n                        raise ValueError('Age must be between 0 and 120')\n                    return v\n            \n            # Usage\n            try:\n                user = UserData(username=user_input_name, age=user_input_age)\n                # Process validated data\n            except ValueError as e:\n                # Handle validation error\n                print(f\"Invalid data: {e}\")\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Safe YAML loading\n      - pattern: \"yaml\\\\.safe_load\\\\(\"\n        message: \"Using safe YAML loading.\"\n      \n      # Check 2: Secure temporary file usage\n      - pattern: \"tempfile\\\\.mkstemp\\\\(|tempfile\\\\.TemporaryFile\\\\(|tempfile\\\\.NamedTemporaryFile\\\\(\"\n        message: \"Using secure temporary file functions.\"\n      \n      # Check 3: Secure subprocess usage\n      - pattern: \"subprocess\\\\.(?:call|run|Popen)\\\\([^,)]*shell\\\\s*=\\\\s*False\"\n        message: \"Using subprocess with shell=False.\"\n      \n      # Check 4: Input validation\n      - pattern: \"jsonschema\\\\.validate|pydantic|dataclass|@validator\"\n        message: \"Implementing input validation.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - python\n    - integrity\n    - deserialization\n    - owasp\n    - language:python\n    - framework:django\n    - framework:flask\n    - framework:fastapi\n    - category:security\n    - subcategory:integrity\n    - standard:owasp-top10\n    - risk:a08-software-data-integrity-failures\n  references:\n    - \"https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html\"\n    - \"https://docs.python.org/3/library/pickle.html#restricting-globals\"\n    - \"https://pyyaml.org/wiki/PyYAMLDocumentation\"\n    - \"https://python-security.readthedocs.io/packages.html\"\n    - \"https://docs.python.org/3/library/tempfile.html#security\"\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/python-integrity-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/python-integrity-failures.mdc",
      "sha": "8294d122b5c0ce1920df724f928bab6b481d3529"
    }
  },
  {
    "name": "ivangrynenko-python-logging-monitoring-failures",
    "slug": "python-logging-monitoring-failures",
    "displayName": "Python Logging Monitoring Failures",
    "description": "--- description: Detect and prevent security logging and monitoring failures in Python applications as defined in OWASP Top 10:2021-A09 globs: *.py, *",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "python"
    ],
    "content": "---\ndescription: Detect and prevent security logging and monitoring failures in Python applications as defined in OWASP Top 10:2021-A09\nglobs: *.py, *.ini, *.cfg, *.yml, *.yaml, *.json, *.toml\nalwaysApply: false\n---\n # Python Security Logging and Monitoring Failures Standards (OWASP A09:2021)\n\nThis rule enforces security best practices to prevent security logging and monitoring failures in Python applications, as defined in OWASP Top 10:2021-A09.\n\n<rule>\nname: python_logging_monitoring_failures\ndescription: Detect and prevent security logging and monitoring failures in Python applications as defined in OWASP Top 10:2021-A09\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(py|ini|cfg|yml|yaml|json|toml)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Missing logging in authentication functions\n      - pattern: \"def\\\\s+(login|authenticate|signin|logout|signout).*?:[^\\\\n]*?(?!.*logging\\\\.(info|warning|error|critical))\"\n        message: \"Authentication function without logging detected. Always log authentication events, especially failures, for security monitoring.\"\n        \n      # Pattern 2: Missing logging in authorization functions\n      - pattern: \"def\\\\s+(authorize|check_permission|has_permission|is_authorized|require_permission).*?:[^\\\\n]*?(?!.*logging\\\\.(info|warning|error|critical))\"\n        message: \"Authorization function without logging detected. Always log authorization decisions, especially denials, for security monitoring.\"\n        \n      # Pattern 3: Missing logging in security-sensitive operations\n      - pattern: \"def\\\\s+(create_user|update_user|delete_user|reset_password|change_password).*?:[^\\\\n]*?(?!.*logging\\\\.(info|warning|error|critical))\"\n        message: \"Security-sensitive user operation without logging detected. Always log security-sensitive operations for audit trails.\"\n        \n      # Pattern 4: Missing logging in exception handlers\n      - pattern: \"except\\\\s+[^:]+:[^\\\\n]*?(?!.*logging\\\\.(warning|error|critical|exception))\"\n        message: \"Exception handler without logging detected. Always log exceptions, especially in security-sensitive code, for monitoring and debugging.\"\n        \n      # Pattern 5: Logging sensitive data\n      - pattern: \"logging\\\\.(debug|info|warning|error|critical)\\\\([^)]*?(password|token|secret|key|credential|auth)\"\n        message: \"Potential sensitive data logging detected. Avoid logging sensitive information like passwords, tokens, or keys.\"\n        \n      # Pattern 6: Insufficient log level in security context\n      - pattern: \"logging\\\\.debug\\\\([^)]*?(auth|login|permission|security|attack|hack|exploit|vulnerability)\"\n        message: \"Debug-level logging for security events detected. Use appropriate log levels (INFO, WARNING, ERROR) for security events.\"\n        \n      # Pattern 7: Missing logging configuration\n      - pattern: \"import\\\\s+logging(?!.*logging\\\\.basicConfig|.*logging\\\\.config)\"\n        message: \"Logging import without configuration detected. Configure logging properly with appropriate handlers, formatters, and levels.\"\n        \n      # Pattern 8: Insecure logging configuration\n      - pattern: \"logging\\\\.basicConfig\\\\([^)]*?level\\\\s*=\\\\s*logging\\\\.DEBUG\"\n        message: \"Debug-level logging configuration detected. Use appropriate log levels in production to avoid excessive logging.\"\n        \n      # Pattern 9: Missing request/response logging in web frameworks\n      - pattern: \"@app\\\\.route\\\\(['\\\"][^'\\\"]+['\\\"]|@api_view\\\\(|class\\\\s+\\\\w+\\\\(APIView\\\\)|class\\\\s+\\\\w+\\\\(View\\\\)\"\n        message: \"Web endpoint without request logging detected. Consider logging requests and responses for security monitoring.\"\n        \n      # Pattern 10: Missing correlation IDs in logs\n      - pattern: \"logging\\\\.(debug|info|warning|error|critical)\\\\([^)]*?(?!.*request_id|.*correlation_id|.*trace_id)\"\n        message: \"Logging without correlation ID detected. Include correlation IDs in logs to trace requests across systems.\"\n        \n      # Pattern 11: Missing error handling for logging failures\n      - pattern: \"logging\\\\.(debug|info|warning|error|critical)\\\\([^)]*?\\\\)\"\n        message: \"Logging without error handling detected. Handle potential logging failures to ensure critical events are not missed.\"\n        \n      # Pattern 12: Missing logging for database operations\n      - pattern: \"(execute|executemany|cursor\\\\.execute|session\\\\.execute|query)\\\\([^)]*?(?!.*logging\\\\.(debug|info|warning|error|critical))\"\n        message: \"Database operation without logging detected. Consider logging database operations for audit trails and security monitoring.\"\n        \n      # Pattern 13: Missing logging for file operations\n      - pattern: \"open\\\\([^)]+,\\\\s*['\\\"]w['\\\"]|open\\\\([^)]+,\\\\s*['\\\"]a['\\\"]|write\\\\(|writelines\\\\(\"\n        message: \"File write operation without logging detected. Consider logging file operations for audit trails.\"\n        \n      # Pattern 14: Missing logging for subprocess execution\n      - pattern: \"subprocess\\\\.(call|run|Popen)\\\\([^)]*?(?!.*logging\\\\.(debug|info|warning|error|critical))\"\n        message: \"Subprocess execution without logging detected. Always log command execution for security monitoring.\"\n        \n      # Pattern 15: Missing centralized logging configuration\n      - pattern: \"logging\\\\.basicConfig\\\\([^)]*?(?!.*filename|.*handlers)\"\n        message: \"Console-only logging configuration detected. Configure centralized logging with file handlers or external logging services.\"\n\n  - type: suggest\n    message: |\n      **Python Security Logging and Monitoring Best Practices:**\n      \n      1. **Structured Logging:**\n         - Use structured logging formats (JSON)\n         - Include contextual information\n         - Example with Python's standard logging:\n           ```python\n           import logging\n           import json\n           \n           class JsonFormatter(logging.Formatter):\n               def format(self, record):\n                   log_record = {\n                       \"timestamp\": self.formatTime(record),\n                       \"level\": record.levelname,\n                       \"message\": record.getMessage(),\n                       \"logger\": record.name,\n                       \"path\": record.pathname,\n                       \"line\": record.lineno\n                   }\n                   \n                   # Add extra attributes from record\n                   for key, value in record.__dict__.items():\n                       if key not in [\"args\", \"asctime\", \"created\", \"exc_info\", \"exc_text\", \n                                     \"filename\", \"funcName\", \"id\", \"levelname\", \"levelno\",\n                                     \"lineno\", \"module\", \"msecs\", \"message\", \"msg\", \"name\", \n                                     \"pathname\", \"process\", \"processName\", \"relativeCreated\", \n                                     \"stack_info\", \"thread\", \"threadName\"]:\n                           log_record[key] = value\n                   \n                   return json.dumps(log_record)\n           \n           # Configure logger with JSON formatter\n           logger = logging.getLogger(\"security_logger\")\n           handler = logging.StreamHandler()\n           handler.setFormatter(JsonFormatter())\n           logger.addHandler(handler)\n           logger.setLevel(logging.INFO)\n           \n           # Usage with context\n           logger.info(\"User login successful\", extra={\n               \"user_id\": user.id,\n               \"ip_address\": request.remote_addr,\n               \"request_id\": request.headers.get(\"X-Request-ID\")\n           })\n           ```\n      \n      2. **Security Event Logging:**\n         - Log all authentication events\n         - Log authorization decisions\n         - Log security-sensitive operations\n         - Example:\n           ```python\n           def login(request):\n               username = request.form.get(\"username\")\n               password = request.form.get(\"password\")\n               \n               try:\n                   user = authenticate(username, password)\n                   if user:\n                       # Log successful login\n                       logger.info(\"User login successful\", extra={\n                           \"user_id\": user.id,\n                           \"ip_address\": request.remote_addr,\n                           \"request_id\": request.headers.get(\"X-Request-ID\")\n                       })\n                       return success_response()\n                   else:\n                       # Log failed login\n                       logger.warning(\"User login failed: invalid credentials\", extra={\n                           \"username\": username,  # Note: log username but never password\n                           \"ip_address\": request.remote_addr,\n                           \"request_id\": request.headers.get(\"X-Request-ID\")\n                       })\n                       return error_response(\"Invalid credentials\")\n               except Exception as e:\n                   # Log exceptions\n                   logger.error(\"Login error\", extra={\n                       \"error\": str(e),\n                       \"username\": username,\n                       \"ip_address\": request.remote_addr,\n                       \"request_id\": request.headers.get(\"X-Request-ID\")\n                   })\n                   return error_response(\"Login error\")\n           ```\n      \n      3. **Correlation IDs:**\n         - Use request IDs to correlate logs\n         - Propagate IDs across services\n         - Example with Flask:\n           ```python\n           import uuid\n           from flask import Flask, request, g\n           \n           app = Flask(__name__)\n           \n           @app.before_request\n           def before_request():\n               request_id = request.headers.get(\"X-Request-ID\")\n               if not request_id:\n                   request_id = str(uuid.uuid4())\n               g.request_id = request_id\n           \n           @app.after_request\n           def after_request(response):\n               response.headers[\"X-Request-ID\"] = g.request_id\n               return response\n           \n           # In your view functions\n           @app.route(\"/api/resource\")\n           def get_resource():\n               logger.info(\"Resource accessed\", extra={\"request_id\": g.request_id})\n               return jsonify({\"data\": \"resource\"})\n           ```\n      \n      4. **Appropriate Log Levels:**\n         - DEBUG: Detailed information for debugging\n         - INFO: Confirmation of normal events\n         - WARNING: Potential issues that don't prevent operation\n         - ERROR: Errors that prevent specific operations\n         - CRITICAL: Critical errors that prevent application function\n         - Example:\n           ```python\n           # Normal operation\n           logger.info(\"User profile updated\", extra={\"user_id\": user.id})\n           \n           # Potential security issue\n           logger.warning(\"Multiple failed login attempts\", extra={\n               \"username\": username,\n               \"attempt_count\": attempts,\n               \"ip_address\": ip_address\n           })\n           \n           # Security violation\n           logger.error(\"Unauthorized access attempt\", extra={\n               \"user_id\": user.id,\n               \"resource\": resource_id,\n               \"ip_address\": ip_address\n           })\n           \n           # Critical security breach\n           logger.critical(\"Possible data breach detected\", extra={\n               \"indicators\": indicators,\n               \"affected_resources\": resources\n           })\n           ```\n      \n      5. **Centralized Logging:**\n         - Configure logging to centralized systems\n         - Use appropriate handlers\n         - Example with file rotation:\n           ```python\n           import logging\n           from logging.handlers import RotatingFileHandler\n           \n           logger = logging.getLogger(\"security_logger\")\n           \n           # File handler with rotation\n           file_handler = RotatingFileHandler(\n               \"security.log\",\n               maxBytes=10485760,  # 10MB\n               backupCount=10\n           )\n           file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n           logger.addHandler(file_handler)\n           \n           # Set level\n           logger.setLevel(logging.INFO)\n           ```\n      \n      6. **Sensitive Data Handling:**\n         - Never log sensitive data\n         - Implement data masking\n         - Example:\n           ```python\n           def mask_sensitive_data(data, fields_to_mask):\n               \"\"\"Mask sensitive fields in data dictionary.\"\"\"\n               masked_data = data.copy()\n               for field in fields_to_mask:\n                   if field in masked_data:\n                       masked_data[field] = \"********\"\n               return masked_data\n           \n           # Usage\n           user_data = {\"username\": \"john\", \"password\": \"secret123\", \"email\": \"john@example.com\"}\n           safe_data = mask_sensitive_data(user_data, [\"password\"])\n           logger.info(\"User data processed\", extra={\"user_data\": safe_data})\n           ```\n      \n      7. **Exception Logging:**\n         - Always log exceptions\n         - Include stack traces for debugging\n         - Example:\n           ```python\n           try:\n               # Some operation\n               result = process_data(data)\n           except Exception as e:\n               logger.error(\n                   \"Error processing data\",\n                   exc_info=True,  # Include stack trace\n                   extra={\n                       \"data_id\": data.id,\n                       \"error\": str(e)\n                   }\n               )\n               raise  # Re-raise or handle appropriately\n           ```\n      \n      8. **Audit Logging:**\n         - Log all security-relevant changes\n         - Include before/after states\n         - Example:\n           ```python\n           def update_user_role(user_id, new_role, current_user):\n               user = User.get(user_id)\n               old_role = user.role\n               \n               # Update role\n               user.role = new_role\n               user.save()\n               \n               # Audit log\n               logger.info(\"User role changed\", extra={\n                   \"user_id\": user_id,\n                   \"old_role\": old_role,\n                   \"new_role\": new_role,\n                   \"changed_by\": current_user.id,\n                   \"timestamp\": datetime.utcnow().isoformat()\n               })\n           ```\n      \n      9. **Log Monitoring Integration:**\n         - Configure alerts for security events\n         - Integrate with SIEM systems\n         - Example configuration for ELK stack:\n           ```python\n           import logging\n           from elasticsearch import Elasticsearch\n           from elasticsearch.helpers import bulk\n           \n           class ElasticsearchHandler(logging.Handler):\n               def __init__(self, es_host, index_name):\n                   super().__init__()\n                   self.es = Elasticsearch([es_host])\n                   self.index_name = index_name\n                   self.buffer = []\n                   \n               def emit(self, record):\n                   try:\n                       log_entry = {\n                           \"_index\": self.index_name,\n                           \"_source\": {\n                               \"timestamp\": self.formatter.formatTime(record),\n                               \"level\": record.levelname,\n                               \"message\": record.getMessage(),\n                               \"logger\": record.name\n                           }\n                       }\n                       \n                       # Add extra fields\n                       for key, value in record.__dict__.items():\n                           if key not in [\"args\", \"asctime\", \"created\", \"exc_info\", \"exc_text\", \n                                         \"filename\", \"funcName\", \"id\", \"levelname\", \"levelno\",\n                                         \"lineno\", \"module\", \"msecs\", \"message\", \"msg\", \"name\", \n                                         \"pathname\", \"process\", \"processName\", \"relativeCreated\", \n                                         \"stack_info\", \"thread\", \"threadName\"]:\n                               log_entry[\"_source\"][key] = value\n                               \n                       self.buffer.append(log_entry)\n                       \n                       # Bulk insert if buffer is full\n                       if len(self.buffer) >= 10:\n                           self.flush()\n                   except Exception:\n                       self.handleError(record)\n                       \n               def flush(self):\n                   if self.buffer:\n                       bulk(self.es, self.buffer)\n                       self.buffer = []\n           \n           # Usage\n           es_handler = ElasticsearchHandler(\"localhost:9200\", \"app-logs\")\n           es_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n           logger.addHandler(es_handler)\n           ```\n      \n      10. **Logging Failure Handling:**\n          - Handle logging failures gracefully\n          - Implement fallback mechanisms\n          - Example:\n            ```python\n            class FallbackHandler(logging.Handler):\n                def __init__(self, primary_handler, fallback_handler):\n                    super().__init__()\n                    self.primary_handler = primary_handler\n                    self.fallback_handler = fallback_handler\n                    \n                def emit(self, record):\n                    try:\n                        self.primary_handler.emit(record)\n                    except Exception:\n                        try:\n                            self.fallback_handler.emit(record)\n                        except Exception:\n                            # Last resort: print to stderr\n                            import sys\n                            print(f\"CRITICAL: Logging failure: {record.getMessage()}\", file=sys.stderr)\n            \n            # Usage\n            primary = ElasticsearchHandler(\"localhost:9200\", \"app-logs\")\n            fallback = logging.FileHandler(\"fallback.log\")\n            handler = FallbackHandler(primary, fallback)\n            logger.addHandler(handler)\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Proper logging configuration\n      - pattern: \"logging\\\\.basicConfig\\\\(|logging\\\\.config\\\\.dictConfig\\\\(|logging\\\\.config\\\\.fileConfig\\\\(\"\n        message: \"Logging is properly configured.\"\n      \n      # Check 2: Security event logging\n      - pattern: \"logging\\\\.(info|warning|error|critical)\\\\([^)]*?(login|authenticate|authorize|permission)\"\n        message: \"Security events are being logged.\"\n      \n      # Check 3: Structured logging\n      - pattern: \"logging\\\\.(info|warning|error|critical)\\\\([^)]*?extra\\\\s*=\"\n        message: \"Structured logging with context is implemented.\"\n      \n      # Check 4: Correlation ID usage\n      - pattern: \"request_id|correlation_id|trace_id\"\n        message: \"Correlation IDs are used for request tracing.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - python\n    - logging\n    - monitoring\n    - owasp\n    - language:python\n    - framework:django\n    - framework:flask\n    - framework:fastapi\n    - category:security\n    - subcategory:logging\n    - standard:owasp-top10\n    - risk:a09-security-logging-monitoring-failures\n  references:\n    - \"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html\"\n    - \"https://docs.python.org/3/library/logging.html\"\n    - \"https://docs.python.org/3/howto/logging-cookbook.html\"\n    - \"https://docs.djangoproject.com/en/stable/topics/logging/\"\n    - \"https://flask.palletsprojects.com/en/latest/logging/\"\n    - \"https://fastapi.tiangolo.com/tutorial/handling-errors/#logging\"\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/python-logging-monitoring-failures.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/python-logging-monitoring-failures.mdc",
      "sha": "e9f11180693ae87be2d77f16a0b6c6553e68ec2b"
    }
  },
  {
    "name": "ivangrynenko-python-security-misconfiguration",
    "slug": "python-security-misconfiguration",
    "displayName": "Python Security Misconfiguration",
    "description": "--- description: Detect and prevent security misconfigurations in Python applications as defined in OWASP Top 10:2021-A05 globs: *.py, *.ini, *.cfg, *",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "python"
    ],
    "content": "---\ndescription: Detect and prevent security misconfigurations in Python applications as defined in OWASP Top 10:2021-A05\nglobs: *.py, *.ini, *.cfg, *.yml, *.yaml, *.json, *.toml\nalwaysApply: false\n---\n # Python Security Misconfiguration Standards (OWASP A05:2021)\n\nThis rule enforces security best practices to prevent security misconfigurations in Python applications, as defined in OWASP Top 10:2021-A05.\n\n<rule>\nname: python_security_misconfiguration\ndescription: Detect and prevent security misconfigurations in Python applications as defined in OWASP Top 10:2021-A05\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(py|ini|cfg|yml|yaml|json|toml)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Debug mode enabled in production settings\n      - pattern: \"DEBUG\\\\s*=\\\\s*True|debug\\\\s*=\\\\s*true|\\\"debug\\\"\\\\s*:\\\\s*true|debug:\\\\s*true\"\n        message: \"Debug mode appears to be enabled. This should be disabled in production environments as it can expose sensitive information.\"\n        \n      # Pattern 2: Insecure cookie settings\n      - pattern: \"SESSION_COOKIE_SECURE\\\\s*=\\\\s*False|session_cookie_secure\\\\s*=\\\\s*false|\\\"session_cookie_secure\\\"\\\\s*:\\\\s*false|session_cookie_secure:\\\\s*false\"\n        message: \"Insecure cookie configuration detected. Set SESSION_COOKIE_SECURE to True in production environments.\"\n        \n      # Pattern 3: Missing CSRF protection\n      - pattern: \"CSRF_ENABLED\\\\s*=\\\\s*False|csrf_enabled\\\\s*=\\\\s*false|\\\"csrf_enabled\\\"\\\\s*:\\\\s*false|csrf_enabled:\\\\s*false|WTF_CSRF_ENABLED\\\\s*=\\\\s*False\"\n        message: \"CSRF protection appears to be disabled. Enable CSRF protection to prevent cross-site request forgery attacks.\"\n        \n      # Pattern 4: Insecure CORS settings\n      - pattern: \"CORS_ORIGIN_ALLOW_ALL\\\\s*=\\\\s*True|cors_origin_allow_all\\\\s*=\\\\s*true|\\\"cors_origin_allow_all\\\"\\\\s*:\\\\s*true|cors_origin_allow_all:\\\\s*true|Access-Control-Allow-Origin:\\\\s*\\\\*\"\n        message: \"Overly permissive CORS configuration detected. Restrict CORS to specific origins rather than allowing all origins.\"\n        \n      # Pattern 5: Default or weak secret keys\n      - pattern: \"SECRET_KEY\\\\s*=\\\\s*['\\\"]default|SECRET_KEY\\\\s*=\\\\s*['\\\"][a-zA-Z0-9]{1,32}['\\\"]|secret_key\\\\s*=\\\\s*['\\\"]default|\\\"secret_key\\\"\\\\s*:\\\\s*\\\"default|secret_key:\\\\s*default\"\n        message: \"Default or potentially weak secret key detected. Use a strong, randomly generated secret key and store it securely.\"\n        \n      # Pattern 6: Exposed sensitive information in error messages\n      - pattern: \"DEBUG_PROPAGATE_EXCEPTIONS\\\\s*=\\\\s*True|debug_propagate_exceptions\\\\s*=\\\\s*true|\\\"debug_propagate_exceptions\\\"\\\\s*:\\\\s*true|debug_propagate_exceptions:\\\\s*true\"\n        message: \"Exception propagation in debug mode is enabled. This can expose sensitive information in error messages.\"\n        \n      # Pattern 7: Insecure SSL/TLS configuration\n      - pattern: \"SECURE_SSL_REDIRECT\\\\s*=\\\\s*False|secure_ssl_redirect\\\\s*=\\\\s*false|\\\"secure_ssl_redirect\\\"\\\\s*:\\\\s*false|secure_ssl_redirect:\\\\s*false\"\n        message: \"SSL redirection appears to be disabled. Enable SSL redirection to ensure secure communications.\"\n        \n      # Pattern 8: Missing security headers\n      - pattern: \"SECURE_HSTS_SECONDS\\\\s*=\\\\s*0|secure_hsts_seconds\\\\s*=\\\\s*0|\\\"secure_hsts_seconds\\\"\\\\s*:\\\\s*0|secure_hsts_seconds:\\\\s*0\"\n        message: \"HTTP Strict Transport Security (HSTS) appears to be disabled. Enable HSTS to enforce secure communications.\"\n        \n      # Pattern 9: Exposed sensitive directories\n      - pattern: \"@app\\\\.route\\\\(['\\\"]/(admin|console|management|config|settings|system)['\\\"]\"\n        message: \"Potentially sensitive endpoint exposed without access controls. Ensure proper authentication and authorization for administrative endpoints.\"\n        \n      # Pattern 10: Default accounts or credentials\n      - pattern: \"username\\\\s*=\\\\s*['\\\"]admin['\\\"]|password\\\\s*=\\\\s*['\\\"]admin|password\\\\s*=\\\\s*['\\\"]password|password\\\\s*=\\\\s*['\\\"]123|user\\\\s*=\\\\s*['\\\"]root['\\\"]\"\n        message: \"Default or weak credentials detected. Never use default or easily guessable credentials in any environment.\"\n        \n      # Pattern 11: Insecure file permissions\n      - pattern: \"os\\\\.chmod\\\\([^,]+,\\\\s*0o777\\\\)|os\\\\.chmod\\\\([^,]+,\\\\s*777\\\\)\"\n        message: \"Overly permissive file permissions detected. Use the principle of least privilege for file permissions.\"\n        \n      # Pattern 12: Exposed version information\n      - pattern: \"@app\\\\.route\\\\(['\\\"]/(version|build|status|health)['\\\"]\"\n        message: \"Endpoints that may expose version information detected. Ensure these endpoints don't reveal sensitive details about your application.\"\n        \n      # Pattern 13: Insecure deserialization\n      - pattern: \"pickle\\\\.loads|yaml\\\\.load\\\\([^,)]+\\\\)|json\\\\.loads\\\\([^,)]+,\\\\s*[^)]*object_hook\"\n        message: \"Potentially insecure deserialization detected. Use safer alternatives like yaml.safe_load() or validate input before deserialization.\"\n        \n      # Pattern 14: Missing timeout settings\n      - pattern: \"requests\\\\.get\\\\([^,)]+\\\\)|requests\\\\.(post|put|delete|patch)\\\\([^,)]+\\\\)\"\n        message: \"HTTP request without timeout setting detected. Always set timeouts for HTTP requests to prevent denial of service.\"\n        \n      # Pattern 15: Insecure upload directory\n      - pattern: \"UPLOAD_FOLDER\\\\s*=\\\\s*['\\\"][^'\\\"]*(/tmp|/var/tmp)[^'\\\"]*['\\\"]|upload_folder\\\\s*=\\\\s*['\\\"][^'\\\"]*(/tmp|/var/tmp)[^'\\\"]*['\\\"]\"\n        message: \"Insecure upload directory detected. Use a properly secured directory for file uploads, not temporary directories.\"\n\n  - type: suggest\n    message: |\n      **Python Security Configuration Best Practices:**\n      \n      1. **Environment-Specific Configuration:**\n         - Use different configurations for development, testing, and production\n         - Never enable debug mode in production\n         - Example with environment variables:\n           ```python\n           import os\n           \n           DEBUG = os.environ.get('DEBUG', 'False') == 'True'\n           SECRET_KEY = os.environ.get('SECRET_KEY')\n           ```\n      \n      2. **Secure Cookie Configuration:**\n         - Enable secure cookies in production\n         - Set appropriate cookie flags\n         - Example for Django:\n           ```python\n           SESSION_COOKIE_SECURE = True\n           SESSION_COOKIE_HTTPONLY = True\n           SESSION_COOKIE_SAMESITE = 'Lax'\n           CSRF_COOKIE_SECURE = True\n           CSRF_COOKIE_HTTPONLY = True\n           ```\n         - Example for Flask:\n           ```python\n           app.config.update(\n               SESSION_COOKIE_SECURE=True,\n               SESSION_COOKIE_HTTPONLY=True,\n               SESSION_COOKIE_SAMESITE='Lax',\n               PERMANENT_SESSION_LIFETIME=timedelta(hours=1)\n           )\n           ```\n      \n      3. **Security Headers:**\n         - Implement HTTP security headers\n         - Example with Flask-Talisman:\n           ```python\n           from flask_talisman import Talisman\n           \n           talisman = Talisman(\n               app,\n               content_security_policy={\n                   'default-src': \"'self'\",\n                   'script-src': \"'self'\"\n               },\n               strict_transport_security=True,\n               strict_transport_security_max_age=31536000,\n               frame_options='DENY'\n           )\n           ```\n         - Example for Django:\n           ```python\n           SECURE_HSTS_SECONDS = 31536000\n           SECURE_HSTS_INCLUDE_SUBDOMAINS = True\n           SECURE_HSTS_PRELOAD = True\n           SECURE_CONTENT_TYPE_NOSNIFF = True\n           SECURE_BROWSER_XSS_FILTER = True\n           X_FRAME_OPTIONS = 'DENY'\n           ```\n      \n      4. **CORS Configuration:**\n         - Restrict CORS to specific origins\n         - Example with Flask-CORS:\n           ```python\n           from flask_cors import CORS\n           \n           CORS(app, resources={r\"/api/*\": {\"origins\": \"https://example.com\"}})\n           ```\n         - Example for Django:\n           ```python\n           CORS_ALLOWED_ORIGINS = [\n               \"https://example.com\",\n               \"https://sub.example.com\",\n           ]\n           CORS_ALLOW_CREDENTIALS = True\n           ```\n      \n      5. **Secret Management:**\n         - Use environment variables or secure vaults for secrets\n         - Generate strong random secrets\n         - Example:\n           ```python\n           import secrets\n           \n           # Generate a secure random secret key\n           secret_key = secrets.token_hex(32)\n           ```\n      \n      6. **Error Handling:**\n         - Use custom error handlers to prevent information leakage\n         - Example for Flask:\n           ```python\n           @app.errorhandler(Exception)\n           def handle_exception(e):\n               # Log the error\n               app.logger.error(f\"Unhandled exception: {str(e)}\")\n               # Return a generic error message\n               return jsonify({\"error\": \"An unexpected error occurred\"}), 500\n           ```\n      \n      7. **Secure File Uploads:**\n         - Validate file types and sizes\n         - Store uploaded files outside the web root\n         - Use secure permissions\n         - Example:\n           ```python\n           import os\n           from werkzeug.utils import secure_filename\n           \n           UPLOAD_FOLDER = '/path/to/secure/location'\n           ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg'}\n           \n           app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n           app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB limit\n           \n           def allowed_file(filename):\n               return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\n           ```\n      \n      8. **Dependency Management:**\n         - Regularly update dependencies\n         - Use tools like safety or dependabot\n         - Pin dependency versions\n         - Example requirements.txt:\n           ```\n           Flask==2.0.1\n           Werkzeug==2.0.1\n           ```\n      \n      9. **Timeout Configuration:**\n         - Set timeouts for all external service calls\n         - Example:\n           ```python\n           import requests\n           \n           response = requests.get('https://api.example.com', timeout=(3.05, 27))\n           ```\n      \n      10. **Secure Deserialization:**\n          - Use safe alternatives for deserialization\n          - Validate input before deserialization\n          - Example:\n            ```python\n            import yaml\n            \n            # Use safe_load instead of load\n            data = yaml.safe_load(yaml_string)\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Proper debug configuration\n      - pattern: \"DEBUG\\\\s*=\\\\s*os\\\\.environ\\\\.get\\\\(['\\\"]DEBUG['\\\"]|DEBUG\\\\s*=\\\\s*False\"\n        message: \"Using environment-specific or secure debug configuration.\"\n      \n      # Check 2: Secure cookie settings\n      - pattern: \"SESSION_COOKIE_SECURE\\\\s*=\\\\s*True|session_cookie_secure\\\\s*=\\\\s*true\"\n        message: \"Using secure cookie configuration.\"\n      \n      # Check 3: Security headers implementation\n      - pattern: \"SECURE_HSTS_SECONDS|X_FRAME_OPTIONS|Talisman\\\\(|CSP|Content-Security-Policy\"\n        message: \"Implementing security headers.\"\n      \n      # Check 4: Proper CORS configuration\n      - pattern: \"CORS_ALLOWED_ORIGINS|CORS\\\\(app,\\\\s*resources\"\n        message: \"Using restricted CORS configuration.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - python\n    - configuration\n    - deployment\n    - owasp\n    - language:python\n    - framework:django\n    - framework:flask\n    - framework:fastapi\n    - category:security\n    - subcategory:configuration\n    - standard:owasp-top10\n    - risk:a05-security-misconfiguration\n  references:\n    - \"https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Configuration_Security_Cheat_Sheet.html\"\n    - \"https://flask.palletsprojects.com/en/latest/security/\"\n    - \"https://docs.djangoproject.com/en/stable/topics/security/\"\n    - \"https://fastapi.tiangolo.com/advanced/security/https/\"\n    - \"https://owasp.org/www-project-secure-headers/\"\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/python-security-misconfiguration.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/python-security-misconfiguration.mdc",
      "sha": "5e9a2a2743657e7c5f64487f8195192542d50728"
    }
  },
  {
    "name": "ivangrynenko-python-ssrf",
    "slug": "python-ssrf",
    "displayName": "Python Ssrf",
    "description": "--- description: Detect and prevent Server-Side Request Forgery (SSRF) vulnerabilities in Python applications as defined in OWASP Top 10:2021-A10 glob",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "python"
    ],
    "content": "---\ndescription: Detect and prevent Server-Side Request Forgery (SSRF) vulnerabilities in Python applications as defined in OWASP Top 10:2021-A10\nglobs: *.py\nalwaysApply: false\n---\n # Python Server-Side Request Forgery (SSRF) Standards (OWASP A10:2021)\n\nThis rule enforces security best practices to prevent Server-Side Request Forgery (SSRF) vulnerabilities in Python applications, as defined in OWASP Top 10:2021-A10.\n\n<rule>\nname: python_ssrf\ndescription: Detect and prevent Server-Side Request Forgery (SSRF) vulnerabilities in Python applications as defined in OWASP Top 10:2021-A10\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.py$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Detect direct use of requests library with user input\n      - pattern: \"requests\\\\.(get|post|put|delete|head|options|patch)\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used directly in HTTP requests. Implement URL validation and allowlisting.\"\n        \n      # Pattern 2: Detect urllib usage with user input\n      - pattern: \"urllib\\\\.(request|parse)\\\\.\\\\w+\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used directly in urllib functions. Implement URL validation and allowlisting.\"\n        \n      # Pattern 3: Detect http.client usage with user input\n      - pattern: \"http\\\\.client\\\\.\\\\w+\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used directly in http.client functions. Implement URL validation and allowlisting.\"\n        \n      # Pattern 4: Detect aiohttp usage with user input\n      - pattern: \"aiohttp\\\\.\\\\w+\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used directly in aiohttp functions. Implement URL validation and allowlisting.\"\n        \n      # Pattern 5: Detect httpx usage with user input\n      - pattern: \"httpx\\\\.\\\\w+\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used directly in httpx functions. Implement URL validation and allowlisting.\"\n        \n      # Pattern 6: Detect pycurl usage with user input\n      - pattern: \"pycurl\\\\.\\\\w+\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used directly in pycurl functions. Implement URL validation and allowlisting.\"\n        \n      # Pattern 7: Detect subprocess calls with user input that might lead to SSRF\n      - pattern: \"subprocess\\\\.(Popen|call|run|check_output|check_call)\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used in subprocess calls, which might lead to SSRF. Validate and sanitize input.\"\n        \n      # Pattern 8: Detect os.system calls with user input that might lead to SSRF\n      - pattern: \"os\\\\.(system|popen|spawn)\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used in OS commands, which might lead to SSRF. Validate and sanitize input.\"\n        \n      # Pattern 9: Detect URL construction with user input\n      - pattern: \"(f|r)[\\\"\\']https?://[^\\\"\\']*?\\\\{[^\\\\}]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used in URL construction. Implement URL validation and allowlisting.\"\n        \n      # Pattern 10: Detect URL joining with user input\n      - pattern: \"urljoin\\\\([^,]+,[^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used in URL joining. Implement URL validation and allowlisting.\"\n        \n      # Pattern 11: Detect file opening with user input (potential local SSRF)\n      - pattern: \"open\\\\([^,]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential local SSRF vulnerability detected. User-controlled input is being used in file operations. Validate file paths and use path sanitization.\"\n        \n      # Pattern 12: Detect XML/YAML parsing with user input (potential XXE leading to SSRF)\n      - pattern: \"(ET\\\\.fromstring|ET\\\\.parse|ET\\\\.XML|minidom\\\\.parse|parseString|yaml\\\\.load)\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential XXE vulnerability that could lead to SSRF detected. User-controlled input is being used in XML/YAML parsing. Use safe parsing methods and disable external entities.\"\n        \n      # Pattern 13: Detect socket connections with user input\n      - pattern: \"socket\\\\.(socket|create_connection)\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used in socket connections. Implement host/port validation and allowlisting.\"\n        \n      # Pattern 14: Detect FTP connections with user input\n      - pattern: \"ftplib\\\\.FTP\\\\([^)]*?\\\\b(request\\\\.\\\\w+|params\\\\[\\\\'[^\\\\']+\\\\'\\\\]|data\\\\[\\\\'[^\\\\']+\\\\'\\\\]|json\\\\[\\\\'[^\\\\']+\\\\'\\\\]|args\\\\.get|form\\\\.get)\"\n        message: \"Potential SSRF vulnerability detected. User-controlled input is being used in FTP connections. Implement host validation and allowlisting.\"\n        \n      # Pattern 15: Detect missing URL validation before making requests\n      - pattern: \"def\\\\s+\\\\w+\\\\([^)]*?\\\\):[^\\\\n]*?\\\\n(?:[^\\\\n]*?\\\\n)*?[^\\\\n]*?requests\\\\.(get|post|put|delete|head|options|patch)\\\\([^)]*?url\\\\s*=\\\\s*[^\\\\n]*?(?!.*?validate_url)\"\n        message: \"Missing URL validation before making HTTP requests. Implement URL validation with allowlisting to prevent SSRF attacks.\"\n\n  - type: suggest\n    message: |\n      **Python Server-Side Request Forgery (SSRF) Prevention Best Practices:**\n      \n      1. **URL Validation and Allowlisting:**\n         - Implement strict URL validation\n         - Use allowlists for domains, IP ranges, and protocols\n         - Example implementation:\n           ```python\n           import re\n           import socket\n           import ipaddress\n           from urllib.parse import urlparse\n           \n           def is_valid_url(url, allowed_domains=None, allowed_protocols=None, block_private_ips=True):\n               \"\"\"\n               Validate URLs against allowlists and block private IPs.\n               \n               Args:\n                   url (str): The URL to validate\n                   allowed_domains (list): List of allowed domains\n                   allowed_protocols (list): List of allowed protocols\n                   block_private_ips (bool): Whether to block private IPs\n                   \n               Returns:\n                   bool: True if URL is valid according to rules\n               \"\"\"\n               if not url:\n                   return False\n                   \n               # Default allowlists if none provided\n               if allowed_domains is None:\n                   allowed_domains = [\"example.com\", \"api.example.com\"]\n               if allowed_protocols is None:\n                   allowed_protocols = [\"https\"]\n                   \n               try:\n                   # Parse URL\n                   parsed_url = urlparse(url)\n                   \n                   # Check protocol\n                   if parsed_url.scheme not in allowed_protocols:\n                       return False\n                       \n                   # Check domain against allowlist\n                   if parsed_url.netloc not in allowed_domains:\n                       return False\n                       \n                   # Block private IPs if enabled\n                   if block_private_ips:\n                       hostname = parsed_url.netloc.split(':')[0]\n                       try:\n                           ip_addresses = socket.getaddrinfo(\n                               hostname, None, socket.AF_INET, socket.SOCK_STREAM\n                           )\n                           for family, socktype, proto, canonname, sockaddr in ip_addresses:\n                               ip = sockaddr[0]\n                               ip_obj = ipaddress.ip_address(ip)\n                               if ip_obj.is_private or ip_obj.is_loopback or ip_obj.is_reserved:\n                                   return False\n                       except socket.gaierror:\n                           # DNS resolution failed\n                           return False\n                           \n                   return True\n               except Exception:\n                   return False\n           \n           # Usage example\n           def fetch_resource(resource_url):\n               if not is_valid_url(resource_url):\n                   raise ValueError(\"Invalid or disallowed URL\")\n                   \n               # Proceed with request\n               import requests\n               return requests.get(resource_url)\n           ```\n      \n      2. **Implement Network-Level Controls:**\n         - Use network-level allowlists\n         - Configure firewalls to block outbound requests to internal resources\n         - Example with proxy configuration:\n           ```python\n           import requests\n           \n           def safe_request(url):\n               # Configure proxy that implements URL filtering\n               proxies = {\n                   'http': 'http://ssrf-protecting-proxy:8080',\n                   'https': 'http://ssrf-protecting-proxy:8080'\n               }\n               \n               # Set timeout to prevent long-running requests\n               timeout = 10\n               \n               try:\n                   return requests.get(url, proxies=proxies, timeout=timeout)\n               except requests.exceptions.RequestException as e:\n                   # Log the error and handle gracefully\n                   logging.error(f\"Request failed: {e}\")\n                   return None\n           ```\n      \n      3. **Use Safe Libraries and Wrappers:**\n         - Create wrapper functions for HTTP requests\n         - Implement consistent security controls\n         - Example wrapper:\n           ```python\n           import requests\n           from urllib.parse import urlparse\n           \n           class SafeRequestHandler:\n               def __init__(self, allowed_domains=None, allowed_protocols=None):\n                   self.allowed_domains = allowed_domains or [\"api.example.com\"]\n                   self.allowed_protocols = allowed_protocols or [\"https\"]\n                   \n               def validate_url(self, url):\n                   parsed_url = urlparse(url)\n                   \n                   # Validate protocol\n                   if parsed_url.scheme not in self.allowed_protocols:\n                       return False\n                       \n                   # Validate domain\n                   if parsed_url.netloc not in self.allowed_domains:\n                       return False\n                       \n                   return True\n                   \n               def request(self, method, url, **kwargs):\n                   if not self.validate_url(url):\n                       raise ValueError(f\"URL validation failed for: {url}\")\n                       \n                   # Set sensible defaults\n                   kwargs.setdefault('timeout', 10)\n                   \n                   # Make the request\n                   return requests.request(method, url, **kwargs)\n                   \n               def get(self, url, **kwargs):\n                   return self.request('GET', url, **kwargs)\n                   \n               def post(self, url, **kwargs):\n                   return self.request('POST', url, **kwargs)\n           \n           # Usage\n           safe_requests = SafeRequestHandler()\n           response = safe_requests.get('https://api.example.com/data')\n           ```\n      \n      4. **Disable Redirects or Implement Redirect Validation:**\n         - Disable automatic redirects\n         - Validate each redirect location\n         - Example:\n           ```python\n           import requests\n           \n           def safe_request_with_redirect_validation(url, allowed_domains):\n               # Disable automatic redirects\n               session = requests.Session()\n               response = session.get(url, allow_redirects=False)\n               \n               # Handle redirects manually with validation\n               redirect_count = 0\n               max_redirects = 5\n               \n               while 300 <= response.status_code < 400 and redirect_count < max_redirects:\n                   redirect_url = response.headers.get('Location')\n                   \n                   # Validate redirect URL\n                   parsed_url = urlparse(redirect_url)\n                   if parsed_url.netloc not in allowed_domains:\n                       raise ValueError(f\"Redirect to disallowed domain: {parsed_url.netloc}\")\n                       \n                   # Follow the redirect with validation\n                   redirect_count += 1\n                   response = session.get(redirect_url, allow_redirects=False)\n                   \n               return response\n           ```\n      \n      5. **Use Metadata Instead of Direct URLs:**\n         - Use resource identifiers instead of URLs\n         - Resolve identifiers server-side\n         - Example:\n           ```python\n           def fetch_resource_by_id(resource_id):\n               # Map of allowed resources\n               resource_map = {\n                   \"user_profile\": \"https://api.example.com/profiles/\",\n                   \"product_data\": \"https://api.example.com/products/\",\n                   \"weather_info\": \"https://api.weather.com/forecast/\"\n               }\n               \n               # Check if resource_id is in allowed list\n               if resource_id not in resource_map:\n                   raise ValueError(f\"Unknown resource ID: {resource_id}\")\n                   \n               # Construct URL from safe base + ID\n               base_url = resource_map[resource_id]\n               return requests.get(base_url)\n           ```\n      \n      6. **Implement Response Handling Controls:**\n         - Sanitize and validate responses\n         - Prevent response data from being used in further requests\n         - Example:\n           ```python\n           def safe_request_with_response_validation(url):\n               response = requests.get(url)\n               \n               # Check response size\n               if len(response.content) > MAX_RESPONSE_SIZE:\n                   raise ValueError(\"Response too large\")\n                   \n               # Validate content type\n               content_type = response.headers.get('Content-Type', '')\n               if not content_type.startswith('application/json'):\n                   raise ValueError(f\"Unexpected content type: {content_type}\")\n                   \n               # Parse and validate JSON structure\n               try:\n                   data = response.json()\n                   # Validate expected structure\n                   if 'result' not in data:\n                       raise ValueError(\"Invalid response structure\")\n                   return data\n               except ValueError:\n                   raise ValueError(\"Invalid JSON response\")\n           ```\n      \n      7. **Use Timeouts and Circuit Breakers:**\n         - Set appropriate timeouts\n         - Implement circuit breakers for failing services\n         - Example:\n           ```python\n           import requests\n           from requests.exceptions import Timeout, ConnectionError\n           \n           def request_with_circuit_breaker(url, max_retries=3, timeout=5):\n               retries = 0\n               while retries < max_retries:\n                   try:\n                       return requests.get(url, timeout=timeout)\n                   except (Timeout, ConnectionError) as e:\n                       retries += 1\n                       if retries >= max_retries:\n                           # Circuit is now open\n                           raise ValueError(f\"Circuit breaker open for {url}: {str(e)}\")\n                       # Exponential backoff\n                       time.sleep(2 ** retries)\n           ```\n      \n      8. **Implement Proper Logging and Monitoring:**\n         - Log all outbound requests\n         - Monitor for unusual patterns\n         - Example:\n           ```python\n           import logging\n           import requests\n           \n           def logged_request(url, **kwargs):\n               # Log the outbound request\n               logging.info(f\"Outbound request to: {url}\")\n               \n               try:\n                   response = requests.get(url, **kwargs)\n                   # Log the response\n                   logging.info(f\"Response from {url}: status={response.status_code}\")\n                   return response\n               except Exception as e:\n                   # Log the error\n                   logging.error(f\"Request to {url} failed: {str(e)}\")\n                   raise\n           ```\n      \n      9. **Use DNS Resolution Controls:**\n         - Implement DNS resolution controls\n         - Block internal DNS names\n         - Example:\n           ```python\n           import socket\n           import ipaddress\n           \n           def is_safe_host(hostname):\n               try:\n                   # Resolve hostname to IP\n                   ip_addresses = socket.getaddrinfo(\n                       hostname, None, socket.AF_INET, socket.SOCK_STREAM\n                   )\n                   \n                   for family, socktype, proto, canonname, sockaddr in ip_addresses:\n                       ip = sockaddr[0]\n                       ip_obj = ipaddress.ip_address(ip)\n                       \n                       # Check if IP is private/internal\n                       if (ip_obj.is_private or ip_obj.is_loopback or \n                           ip_obj.is_link_local or ip_obj.is_reserved):\n                           return False\n                           \n                   return True\n               except (socket.gaierror, ValueError):\n                   return False\n                   \n           def safe_request_with_dns_check(url):\n               parsed_url = urlparse(url)\n               hostname = parsed_url.netloc.split(':')[0]\n               \n               if not is_safe_host(hostname):\n                   raise ValueError(f\"Hostname resolves to unsafe IP: {hostname}\")\n                   \n               return requests.get(url)\n           ```\n      \n      10. **Implement Defense in Depth:**\n          - Combine multiple protection mechanisms\n          - Don't rely on a single control\n          - Example comprehensive approach:\n            ```python\n            class SSRFProtectedClient:\n                def __init__(self):\n                    self.allowed_domains = [\"api.example.com\", \"cdn.example.com\"]\n                    self.allowed_protocols = [\"https\"]\n                    self.max_redirects = 3\n                    self.timeout = 10\n                    \n                def is_safe_url(self, url):\n                    # URL validation\n                    parsed_url = urlparse(url)\n                    \n                    # Protocol check\n                    if parsed_url.scheme not in self.allowed_protocols:\n                        return False\n                        \n                    # Domain check\n                    if parsed_url.netloc not in self.allowed_domains:\n                        return False\n                        \n                    # DNS resolution check\n                    hostname = parsed_url.netloc.split(':')[0]\n                    try:\n                        ip_addresses = socket.getaddrinfo(\n                            hostname, None, socket.AF_INET, socket.SOCK_STREAM\n                        )\n                        for family, socktype, proto, canonname, sockaddr in ip_addresses:\n                            ip = sockaddr[0]\n                            ip_obj = ipaddress.ip_address(ip)\n                            if ip_obj.is_private or ip_obj.is_loopback or ip_obj.is_reserved:\n                                return False\n                    except socket.gaierror:\n                        return False\n                        \n                    return True\n                    \n                def request(self, method, url, **kwargs):\n                    # Validate URL\n                    if not self.is_safe_url(url):\n                        raise ValueError(f\"URL failed security validation: {url}\")\n                        \n                    # Set sensible defaults\n                    kwargs.setdefault('timeout', self.timeout)\n                    kwargs.setdefault('allow_redirects', False)\n                    \n                    # Make initial request\n                    session = requests.Session()\n                    response = session.request(method, url, **kwargs)\n                    \n                    # Handle redirects manually with validation\n                    redirect_count = 0\n                    \n                    while 300 <= response.status_code < 400 and redirect_count < self.max_redirects:\n                        redirect_url = response.headers.get('Location')\n                        \n                        # Validate redirect URL\n                        if not self.is_safe_url(redirect_url):\n                            raise ValueError(f\"Redirect URL failed security validation: {redirect_url}\")\n                            \n                        # Follow the redirect with validation\n                        redirect_count += 1\n                        response = session.request(method, redirect_url, **kwargs)\n                        \n                    # Log the request\n                    logging.info(f\"{method} request to {url} completed with status {response.status_code}\")\n                    \n                    return response\n                    \n                def get(self, url, **kwargs):\n                    return self.request('GET', url, **kwargs)\n                    \n                def post(self, url, **kwargs):\n                    return self.request('POST', url, **kwargs)\n            \n            # Usage\n            client = SSRFProtectedClient()\n            response = client.get('https://api.example.com/data')\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: URL validation implementation\n      - pattern: \"def\\\\s+is_valid_url|def\\\\s+validate_url\"\n        message: \"URL validation function is implemented.\"\n      \n      # Check 2: Allowlist implementation\n      - pattern: \"allowed_domains|allowed_urls|ALLOWED_HOSTS|whitelist\"\n        message: \"URL allowlisting is implemented.\"\n      \n      # Check 3: Safe request wrapper\n      - pattern: \"class\\\\s+\\\\w+Request|def\\\\s+safe_request\"\n        message: \"Safe request wrapper is implemented.\"\n      \n      # Check 4: IP address validation\n      - pattern: \"ipaddress\\\\.ip_address|is_private|is_loopback|is_reserved\"\n        message: \"IP address validation is implemented to prevent access to internal resources.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - python\n    - ssrf\n    - owasp\n    - language:python\n    - framework:django\n    - framework:flask\n    - framework:fastapi\n    - category:security\n    - subcategory:ssrf\n    - standard:owasp-top10\n    - risk:a10-server-side-request-forgery\n  references:\n    - \"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html\"\n    - \"https://portswigger.net/web-security/ssrf\"\n    - \"https://docs.python.org/3/library/urllib.request.html\"\n    - \"https://docs.python-requests.org/en/latest/user/advanced/#ssl-cert-verification\"\n    - \"https://docs.python.org/3/library/ipaddress.html\"\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/python-ssrf.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/python-ssrf.mdc",
      "sha": "a8bba079ae1f085c8b7fd0a8acfcfdb8ba315bd3"
    }
  },
  {
    "name": "ivangrynenko-python-vulnerable-outdated-components",
    "slug": "python-vulnerable-outdated-components",
    "displayName": "Python Vulnerable Outdated Components",
    "description": "Python Vulnerable Outdated Components cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "languages",
    "tags": [
      "cursor",
      "cursor-rule",
      "python"
    ],
    "content": "---\ndescription: Detect and prevent vulnerabilities related to outdated dependencies and components in Python applications as defined in OWASP Top 10:2021-A06\nglobs: *.py, *.txt, *.ini, *.cfg, *.yml, *.yaml, *.json, *.toml\nalwaysApply: false\n---\n # Python Vulnerable and Outdated Components Standards (OWASP A06:2021)\n\nThis rule enforces security best practices to prevent vulnerabilities related to outdated dependencies and components in Python applications, as defined in OWASP Top 10:2021-A06.\n\n<rule>\nname: python_vulnerable_outdated_components\ndescription: Detect and prevent vulnerabilities related to outdated dependencies and components in Python applications as defined in OWASP Top 10:2021-A06\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(py|txt|ini|cfg|yml|yaml|json|toml)$\"\n  - type: file_path\n    pattern: \".*\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Pattern 1: Unpinned dependencies in requirements files\n      - pattern: \"^(django|flask|fastapi|requests|cryptography|pyyaml|sqlalchemy|celery|numpy|pandas|pillow|tensorflow|torch|boto3|psycopg2)\\\\s*$\"\n        file_pattern: \"requirements.*\\\\.txt$|setup\\\\.py$|pyproject\\\\.toml$\"\n        message: \"Unpinned dependency detected. Always pin dependencies to specific versions to prevent automatic updates to potentially vulnerable versions.\"\n        \n      # Pattern 2: Outdated/vulnerable Django versions\n      - pattern: \"django([<>=]=|~=|==)\\\\s*[\\\"']?(1\\\\.|2\\\\.[0-2]\\\\.|3\\\\.[0-2]\\\\.|4\\\\.0\\\\.)[0-9]+[\\\"']?\"\n        message: \"Potentially outdated Django version detected. Consider upgrading to the latest stable version with security updates.\"\n        \n      # Pattern 3: Outdated/vulnerable Flask versions\n      - pattern: \"flask([<>=]=|~=|==)\\\\s*[\\\"']?(0\\\\.|1\\\\.[0-3]\\\\.|2\\\\.0\\\\.[0-3])[0-9]*[\\\"']?\"\n        message: \"Potentially outdated Flask version detected. Consider upgrading to the latest stable version with security updates.\"\n        \n      # Pattern 4: Outdated/vulnerable Requests versions\n      - pattern: \"requests([<>=]=|~=|==)\\\\s*[\\\"']?(0\\\\.|1\\\\.|2\\\\.[0-2][0-5]\\\\.[0-9]+)[\\\"']?\"\n        message: \"Potentially outdated Requests version detected. Consider upgrading to the latest stable version with security updates.\"\n        \n      # Pattern 5: Outdated/vulnerable Cryptography versions\n      - pattern: \"cryptography([<>=]=|~=|==)\\\\s*[\\\"']?(0\\\\.|1\\\\.|2\\\\.|3\\\\.[0-3]\\\\.|3\\\\.4\\\\.[0-7])[0-9]*[\\\"']?\"\n        message: \"Potentially outdated Cryptography version detected. Consider upgrading to the latest stable version with security updates.\"\n        \n      # Pattern 6: Outdated/vulnerable PyYAML versions\n      - pattern: \"pyyaml([<>=]=|~=|==)\\\\s*[\\\"']?(0\\\\.|1\\\\.|2\\\\.|3\\\\.|4\\\\.|5\\\\.[0-5]\\\\.[0-9]+)[\\\"']?\"\n        message: \"Potentially outdated PyYAML version detected. Consider upgrading to the latest stable version with security updates.\"\n        \n      # Pattern 7: Outdated/vulnerable Pillow versions\n      - pattern: \"pillow([<>=]=|~=|==)\\\\s*[\\\"']?(0\\\\.|1\\\\.|2\\\\.|3\\\\.|4\\\\.|5\\\\.|6\\\\.|7\\\\.|8\\\\.[0-3]\\\\.[0-9]+)[\\\"']?\"\n        message: \"Potentially outdated Pillow version detected. Consider upgrading to the latest stable version with security updates.\"\n        \n      # Pattern 8: Direct imports of deprecated modules\n      - pattern: \"from\\\\s+xml\\\\.etree\\\\.ElementTree\\\\s+import\\\\s+.*parse|from\\\\s+urllib2\\\\s+import|from\\\\s+urllib\\\\s+import\\\\s+urlopen|import\\\\s+cgi|import\\\\s+imp\"\n        message: \"Use of deprecated or insecure module detected. Consider using more secure alternatives.\"\n        \n      # Pattern 9: Use of deprecated functions\n      - pattern: \"\\\\.set_password\\\\([^)]*\\\\)|hashlib\\\\.md5\\\\(|hashlib\\\\.sha1\\\\(|random\\\\.random\\\\(|random\\\\.randrange\\\\(|random\\\\.randint\\\\(\"\n        message: \"Use of deprecated or insecure function detected. Consider using more secure alternatives.\"\n        \n      # Pattern 10: Insecure dependency loading\n      - pattern: \"__import__\\\\(|importlib\\\\.import_module\\\\(|exec\\\\(|eval\\\\(\"\n        message: \"Dynamic code execution or module loading detected. This can lead to code injection if user input is involved.\"\n        \n      # Pattern 11: Outdated TLS/SSL versions\n      - pattern: \"ssl\\\\.PROTOCOL_TLSv1|ssl\\\\.PROTOCOL_TLSv1_1|ssl\\\\.PROTOCOL_SSLv2|ssl\\\\.PROTOCOL_SSLv3|ssl\\\\.PROTOCOL_TLSv1_2\"\n        message: \"Outdated TLS/SSL protocol version detected. Use ssl.PROTOCOL_TLS_CLIENT or ssl.PROTOCOL_TLS_SERVER instead.\"\n        \n      # Pattern 12: Insecure deserialization libraries\n      - pattern: \"import\\\\s+pickle|import\\\\s+marshal|import\\\\s+shelve\"\n        message: \"Use of potentially insecure deserialization library detected. Ensure these are not used with untrusted data.\"\n        \n      # Pattern 13: Outdated/vulnerable SQLAlchemy versions\n      - pattern: \"sqlalchemy([<>=]=|~=|==)\\\\s*[\\\"']?(0\\\\.|1\\\\.[0-3]\\\\.[0-9]+)[\\\"']?\"\n        message: \"Potentially outdated SQLAlchemy version detected. Consider upgrading to the latest stable version with security updates.\"\n        \n      # Pattern 14: Outdated/vulnerable Celery versions\n      - pattern: \"celery([<>=]=|~=|==)\\\\s*[\\\"']?(0\\\\.|1\\\\.|2\\\\.|3\\\\.|4\\\\.[0-4]\\\\.[0-9]+)[\\\"']?\"\n        message: \"Potentially outdated Celery version detected. Consider upgrading to the latest stable version with security updates.\"\n        \n      # Pattern 15: Insecure package installation\n      - pattern: \"pip\\\\s+install\\\\s+.*--no-deps|pip\\\\s+install\\\\s+.*--user|pip\\\\s+install\\\\s+.*--pre|pip\\\\s+install\\\\s+.*--index-url\\\\s+http://\"\n        message: \"Insecure pip installation options detected. Avoid using --no-deps, ensure HTTPS for index URLs, and be cautious with --pre and --user flags.\"\n\n  - type: suggest\n    message: |\n      **Python Dependency and Component Security Best Practices:**\n      \n      1. **Dependency Management:**\n         - Always pin dependencies to specific versions\n         - Use a lockfile (requirements.txt, Pipfile.lock, poetry.lock)\n         - Example requirements.txt:\n           ```\n           Django==4.2.7\n           requests==2.31.0\n           cryptography==41.0.5\n           ```\n      \n      2. **Vulnerability Scanning:**\n         - Regularly scan dependencies for vulnerabilities\n         - Use tools like safety, pip-audit, or dependabot\n         - Example safety check:\n           ```bash\n           pip install safety\n           safety check -r requirements.txt\n           ```\n      \n      3. **Dependency Updates:**\n         - Establish a regular update schedule\n         - Automate updates with tools like Renovate or Dependabot\n         - Test thoroughly after updates\n         - Example GitHub workflow:\n           ```yaml\n           name: Dependency Update\n           on:\n             schedule:\n               - cron: '0 0 * * 1'  # Weekly on Monday\n           jobs:\n             update-deps:\n               runs-on: ubuntu-latest\n               steps:\n                 - uses: actions/checkout@v3\n                 - name: Update dependencies\n                   run: |\n                     pip install pip-upgrader\n                     pip-upgrader -p requirements.txt\n           ```\n      \n      4. **Secure Package Installation:**\n         - Use trusted package sources\n         - Verify package integrity with hashes\n         - Example with pip and hashes:\n           ```\n           # requirements.txt\n           Django==4.2.7 --hash=sha256:8e0f1c2c2786b5c0e39fe1afce24c926040fad47c8ea8ad30aaa2c03b76293b8\n           ```\n      \n      5. **Minimal Dependencies:**\n         - Limit the number of dependencies\n         - Regularly audit and remove unused dependencies\n         - Consider security history when selecting packages\n         - Example dependency audit:\n           ```bash\n           pip install pipdeptree\n           pipdeptree --warn silence | grep -v \"^\\s\"\n           ```\n      \n      6. **Virtual Environments:**\n         - Use isolated environments for each project\n         - Document environment setup\n         - Example:\n           ```bash\n           python -m venv venv\n           source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n           pip install -r requirements.txt\n           ```\n      \n      7. **Container Security:**\n         - Use official base images\n         - Pin image versions\n         - Scan container images\n         - Example Dockerfile:\n           ```dockerfile\n           FROM python:3.11-slim@sha256:1234567890abcdef\n           \n           WORKDIR /app\n           COPY requirements.txt .\n           RUN pip install --no-cache-dir -r requirements.txt\n           \n           COPY . .\n           RUN pip install --no-cache-dir -e .\n           \n           USER nobody\n           CMD [\"gunicorn\", \"myapp.wsgi:application\"]\n           ```\n      \n      8. **Compile-time Dependencies:**\n         - Separate runtime and development dependencies\n         - Example with pip-tools:\n           ```\n           # requirements.in\n           Django>=4.2,<5.0\n           requests>=2.31.0\n           \n           # dev-requirements.in\n           -r requirements.in\n           pytest>=7.0.0\n           black>=23.0.0\n           ```\n      \n      9. **Deprecated API Usage:**\n         - Stay informed about deprecation notices\n         - Plan migrations away from deprecated APIs\n         - Example Django deprecation check:\n           ```bash\n           python manage.py check --deploy\n           ```\n      \n      10. **Supply Chain Security:**\n          - Use tools like pip-audit to check for supply chain attacks\n          - Consider using a private PyPI mirror\n          - Example:\n            ```bash\n            pip install pip-audit\n            pip-audit\n            ```\n\n  - type: validate\n    conditions:\n      # Check 1: Pinned dependencies\n      - pattern: \"^[a-zA-Z0-9_-]+==\\\\d+\\\\.\\\\d+\\\\.\\\\d+\"\n        file_pattern: \"requirements.*\\\\.txt$\"\n        message: \"Dependencies are properly pinned to specific versions.\"\n      \n      # Check 2: Use of dependency scanning tools\n      - pattern: \"safety|pip-audit|pyup|dependabot|renovate\"\n        file_pattern: \"\\\\.github/workflows/.*\\\\.ya?ml$|\\\\.gitlab-ci\\\\.ya?ml$|tox\\\\.ini$|setup\\\\.py$|pyproject\\\\.toml$\"\n        message: \"Dependency scanning tools are being used.\"\n      \n      # Check 3: Modern TLS usage\n      - pattern: \"ssl\\\\.PROTOCOL_TLS_CLIENT|ssl\\\\.PROTOCOL_TLS_SERVER|ssl\\\\.create_default_context\\\\(\\\\)\"\n        message: \"Using secure TLS protocol versions.\"\n      \n      # Check 4: Secure random generation\n      - pattern: \"secrets\\\\.token_|secrets\\\\.choice|cryptography\\\\.hazmat\"\n        message: \"Using secure random generation methods.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - security\n    - python\n    - dependencies\n    - supply-chain\n    - owasp\n    - language:python\n    - framework:django\n    - framework:flask\n    - framework:fastapi\n    - category:security\n    - subcategory:dependencies\n    - standard:owasp-top10\n    - risk:a06-vulnerable-outdated-components\n  references:\n    - \"https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Vulnerable_Dependency_Management_Cheat_Sheet.html\"\n    - \"https://pypi.org/project/safety/\"\n    - \"https://pypi.org/project/pip-audit/\"\n    - \"https://github.com/pyupio/safety-db\"\n    - \"https://github.com/pypa/advisory-database\"\n    - \"https://python-security.readthedocs.io/packages.html\"\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/python-vulnerable-outdated-components.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/python-vulnerable-outdated-components.mdc",
      "sha": "be3380d8cf17bb365cff26204f98f07149b1c4ce"
    }
  },
  {
    "name": "ivangrynenko-react-patterns",
    "slug": "react-patterns",
    "displayName": "React Patterns",
    "description": "--- description: React component patterns and hooks usage guidelines globs: *.jsx, *.tsx",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "frontend-frameworks",
    "tags": [
      "cursor",
      "cursor-rule",
      "react"
    ],
    "content": "---\ndescription: React component patterns and hooks usage guidelines\nglobs: *.jsx, *.tsx\n---\n# React Patterns and Best Practices\n\nEnsures React components follow recommended patterns and hook usage.\n\n<rule>\nname: react_patterns\ndescription: Enforce React component patterns and hooks best practices\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(jsx|tsx)$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"useEffect\\\\([^,]+\\\\)\"\n        message: \"Specify dependencies array in useEffect\"\n\n      - pattern: \"useState\\\\([^)]*\\\\).*useState\\\\([^)]*\\\\)\"\n        message: \"Consider combining related state variables\"\n\n      - pattern: \"React\\\\.memo\\\\(.*\\\\)\"\n        message: \"Ensure React.memo is used appropriately for performance\"\n\n  - type: suggest\n    message: |\n      React Best Practices:\n      - Use functional components with hooks\n      - Implement proper memoization\n      - Follow the Rules of Hooks\n      - Use TypeScript for prop types\n      - Consider custom hooks for reusable logic\n\nmetadata:\n  priority: high\n  version: 1.0\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/react-patterns.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/react-patterns.mdc",
      "sha": "3dcab70868ff2a4c887e44c21d9f7aa96f940222"
    }
  },
  {
    "name": "ivangrynenko-readme-maintenance-standards",
    "slug": "readme-maintenance-standards",
    "displayName": "Readme Maintenance Standards",
    "description": "--- description: Standards for maintaining README.md documentation globs: README.md, *.md",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standards for maintaining README.md documentation\nglobs: README.md, *.md\nalwaysApply: false\n---\n# Enhanced README Maintenance Standards\n\nEnsures that README files are consistently maintained, up-to-date, and informative.\n\n<rule>\nname: enhanced_readme_maintenance_standards\ndescription: Enforce standards for maintaining README documentation\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.md$\"\n  - type: file_name\n    pattern: \"^README\\\\.md$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"## (Available Rules|Features|Components)\"\n        message: \"Update the 'Available Rules/Features/Components' section whenever new elements are added.\"\n\n      - pattern: \"\\\\[`[^`]+`\\\\]\\\\([^)]+\\\\)\"\n        message: \"Ensure all file references in the README are properly linked and point to existing files.\"\n\n      - pattern: \"## (Installation|Usage|Configuration)\"\n        message: \"Keep setup, usage, and configuration sections current with the latest project changes.\"\n\n      - pattern: \"## (Contributing|License)\"\n        message: \"Ensure contributing guidelines and license information are accurate and up-to-date.\"\n\n      - pattern: \"\\\\[Version\\\\s*(\\\\d+\\\\.)?(\\\\d+\\\\.)?\\\\d+\\\\]\"\n        message: \"Update version information to reflect the current state of the project.\"\n\n      - pattern: \"## (Changelog|Changes|Updates)\"\n        message: \"Maintain a changelog for significant updates, fixes, and features.\"\n\n  - type: suggest\n    message: |\n      **README Maintenance Best Practices:**\n      - **Rule Listings:** Automatically update or manually check if new rules or features are reflected in the README.\n      - **Installation & Configuration:** Regularly review and update installation and configuration instructions to match the latest project state.\n      - **Documentation of Changes:** Document new features, bug fixes, and changes in a changelog or dedicated section.\n      - **Section Hierarchy:** Maintain a logical structure with clear headings for easy navigation.\n      - **Examples:** Include or update examples for new or changed functionalities.\n      - **Version Information:** Keep version numbers and release notes current, linking to the changelog if applicable.\n      - **Table of Contents:** Ensure the table of contents reflects the current document structure, using auto-generated if possible.\n      - **Badges:** Update badges for CI/CD status, test coverage, or dependencies to reflect current project health.\n      - **Accessibility:** Write with accessibility in mind, using alt text for images and semantic markdown.\n\n  - type: validate\n    conditions:\n      - pattern: \"^# [^\\\\n]+\\\\n\\\\n## \"\n        message: \"Ensure proper markdown heading hierarchy for readability.\"\n\n      - pattern: \"\\\\|[^|]+\\\\|[^|]+\\\\|\\\\n\\\\|\\\\s*-+\\\\s*\\\\|\"\n        message: \"Use consistent table formatting throughout the document.\"\n\n      - pattern: \"\\\\[(.*?)\\\\]\\\\((?!http|\\\\/)[^\\\\)]+\\\\)\"\n        message: \"All local links should point to existing files or sections within the project.\"\n\n      - pattern: \"\\\\[Version\\\\s*(\\\\d+\\\\.)?(\\\\d+\\\\.)?\\\\*\\\\d+\\\\]\"\n        message: \"Check that version placeholders are updated to actual numbers before release.\"\n\nmetadata:\n  priority: high\n  version: 1.1\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/readme-maintenance-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/readme-maintenance-standards.mdc",
      "sha": "3c198a77fe17acb5b9de14aa235d973a87d01489"
    }
  },
  {
    "name": "ivangrynenko-secret-detection",
    "slug": "secret-detection",
    "displayName": "Secret Detection",
    "description": "Secret Detection cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "# Secret Detection and Warning Rule\n\nThis rule helps identify potential secrets, credentials, and sensitive data in code files to prevent accidental exposure or leakage. It provides warnings when secrets are detected and suggests best practices for secure secret management.\n\n<rule>\nname: secret_detection_warning\ndescription: Detect and warn about potential secrets and sensitive data in code files\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|js|py|ts|jsx|tsx|java|rb|go|cs|c|cpp|h|hpp|ini|conf|yaml|yml|json|xml|properties|env|config|sh|bash|zsh)$\"\n  - type: file_path\n    pattern: \".*\"\n    exclude: \"(node_modules|vendor|bower_components|.git|.yarn|dist|build|out|\\\\.bundle|cache)\"\n\nactions:\n  - type: enforce\n    conditions:\n      # Generic API Keys, Tokens, and Credentials\n      - pattern: \"(?i)(api[_-]?key|apikey|api[_-]?secret|apisecret|app[_-]?key|appkey|app[_-]?secret|access[_-]?key|accesskey|access[_-]?token|auth[_-]?key|authkey|client[_-]?secret|consumer[_-]?key|consumer[_-]?secret|oauth[_-]?token|token)[\\\\s]*[=:]\\\\s*['\\\\\\\"](\\\\w|[\\\\-]){16,}['\\\\\\\"]\"\n        message: \"Potential API key or secret detected. Consider using environment variables or a secure secrets manager instead of hardcoding sensitive values.\"\n\n      # AWS Keys and Tokens\n      - pattern: \"(?i)(aws[_-]?access[_-]?key|aws[_-]?secret[_-]?key|aws[_-]?account[_-]?id)[\\\\s]*[=:]\\\\s*['\\\\\\\"](\\\\w|[\\\\-]){16,}['\\\\\\\"]\"\n        message: \"Potential AWS key detected. AWS credentials should be stored securely using AWS SDK credential providers, environment variables, or a secrets manager.\"\n\n      # Google Cloud and Firebase\n      - pattern: \"(?i)(google[_-]?api[_-]?key|google[_-]?cloud[_-]?key|firebase[_-]?api[_-]?key)[\\\\s]*[=:]\\\\s*['\\\\\\\"](\\\\w|[\\\\-]){16,}['\\\\\\\"]\"\n        message: \"Potential Google Cloud or Firebase key detected. Use environment variables or a secure secrets manager to store these credentials.\"\n\n      # Azure and Microsoft\n      - pattern: \"(?i)(azure[_-]?key|azure[_-]?connection[_-]?string|microsoft[_-]?key)[\\\\s]*[=:]\\\\s*['\\\\\\\"](\\\\w|[\\\\-]){16,}['\\\\\\\"]\"\n        message: \"Potential Azure or Microsoft key detected. Use Azure Key Vault, environment variables, or a secure secrets manager instead of hardcoding credentials.\"\n\n      # Database Connection Strings and Credentials\n      - pattern: \"(?i)(jdbc:|mongodb[\\\\+]?://|postgres://|mysql://|database[_-]?url|connection[_-]?string)[^\\\\n]{10,}(password|pwd)[^\\\\n]{3,}\"\n        message: \"Potential database connection string with credentials detected. Use environment variables or a secure configuration manager for database connections.\"\n\n      # Database Credentials\n      - pattern: \"(?i)(db[_-]?password|mysql[_-]?password|postgres[_-]?password|mongo[_-]?password|database[_-]?password)[\\\\s]*[=:]\\\\s*['\\\\\\\"][^\\\\s]{3,}['\\\\\\\"]\"\n        message: \"Potential database password detected. Store database credentials in environment variables or use a secure configuration manager.\"\n\n      # Private Keys and Certificates\n      - pattern: \"(?i)-----(BEGIN|END) (RSA |DSA |EC )?(PRIVATE KEY|CERTIFICATE)-----\"\n        message: \"Private key or certificate material detected. Never include these directly in code - store them securely and reference them from protected locations.\"\n\n      # SSH Keys\n      - pattern: \"(?i)ssh-rsa AAAA[0-9A-Za-z+/]+[=]{0,3}\"\n        message: \"SSH key detected. SSH keys should be managed securely and never included directly in code files.\"\n\n      # Passwords\n      - pattern: \"(?i)(password|passwd|pwd|secret)[\\\\s]*[=:]\\\\s*['\\\\\\\"][^\\\\s]{3,}['\\\\\\\"]\"\n        message: \"Potential password detected. Never hardcode passwords in code files. Use environment variables or a secure secrets manager.\"\n\n      # OAuth Tokens\n      - pattern: \"(?i)(bearer|oauth|access[_-]?token)[\\\\s]*[=:]\\\\s*['\\\\\\\"][\\\\w\\\\d\\\\-_.]{30,}['\\\\\\\"]\"\n        message: \"Potential OAuth token detected. Store tokens securely and consider implementing proper token rotation.\"\n\n      # JWT Tokens\n      - pattern: \"(?i)ey[a-zA-Z0-9]{20,}\\\\.ey[a-zA-Z0-9\\\\-_]{20,}\\\\.[a-zA-Z0-9\\\\-_]{20,}\"\n        message: \"JWT token detected. Never hardcode JWT tokens directly in your code.\"\n\n      # GitHub Tokens\n      - pattern: \"(?i)gh[pousr]_[a-zA-Z0-9]{20,}\"\n        message: \"GitHub token detected. GitHub tokens should be stored securely in environment variables or a secrets manager.\"\n\n      # Slack Tokens\n      - pattern: \"(?i)(xox[pbar]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})\"\n        message: \"Slack token detected. Store Slack tokens securely using environment variables or a secrets manager.\"\n\n      # Stripe API Keys\n      - pattern: \"(?i)(sk|pk)_(test|live)_[0-9a-zA-Z]{24,}\"\n        message: \"Stripe API key detected. Store Stripe keys securely in environment variables or a secrets manager.\"\n\n      # Generic Encryption Keys\n      - pattern: \"(?i)(encryption[_-]?key|cipher[_-]?key|aes[_-]?key)[\\\\s]*[=:]\\\\s*['\\\\\\\"][\\\\w\\\\d\\\\-_.]{16,}['\\\\\\\"]\"\n        message: \"Potential encryption key detected. Encryption keys should be managed securely and never hardcoded.\"\n\n      # .env or config files with credentials\n      - pattern: \"(?i)(DB_PASSWORD|API_KEY|SECRET_KEY|ADMIN_PASSWORD)[\\\\s]*=[\\\\s]*['\\\"]?[\\\\w\\\\d\\\\-_.]{3,}['\\\"]?\"\n        message: \"Environment variable with credential detected. Make sure .env files are included in .gitignore and .cursorignore.\"\n\n      # IP Addresses (if they appear with credentials)\n      - pattern: \"(?i)(username|password|login|credential)[^\\\\n]{3,}(?:\\\\d{1,3}\\\\.){3}\\\\d{1,3}\"\n        message: \"IP address detected near potential credentials. Consider using DNS names and storing connection details securely.\"\n\n  - type: suggest\n    message: |\n      **Secure Secret Management Best Practices:**\n      \n      1. **Never hardcode secrets in source code**\n         - Secrets in code can be exposed via version control, logs, or screenshots\n         - Code is often shared, backed up, and stored in multiple locations\n      \n      2. **Use environment variables for configuration**\n         - Load secrets from environment variables at runtime\n         - Use libraries like dotenv, but ensure .env files are in .gitignore\n         - Example: `API_KEY=os.environ.get(\"API_KEY\")`\n      \n      3. **Implement secret rotation**\n         - Regularly rotate credentials and keys\n         - Use short-lived tokens when possible\n         - Implement proper secret lifecycle management\n      \n      4. **Use secrets management solutions**\n         - AWS Secrets Manager, Azure Key Vault, HashiCorp Vault\n         - Platform-specific solutions like Kubernetes Secrets\n         - These provide encryption, access control, and audit trails\n      \n      5. **Implement access controls**\n         - Limit who can access secrets\n         - Use the principle of least privilege\n         - Implement proper authentication for secret access\n      \n      6. **Use .gitignore and .cursorignore**\n         - Add patterns for files that might contain secrets\n         - Example patterns: `.env`, `*.key`, `*secret*`, `*.pem`\n         - Verify these files are not committed to version control\n      \n      7. **Consider using secure by default libraries**\n         - Libraries that separate configuration from code\n         - Frameworks with built-in secrets management\n         - Encryption libraries with secure defaults\n      \n      8. **Implement detection tools**\n         - Use pre-commit hooks to prevent secret leakage\n         - Implement scanning in CI/CD pipelines\n         - Consider tools like git-secrets, trufflehog, or detect-secrets\n      \n      9. **Audit and monitor**\n         - Regularly audit code for leaked secrets\n         - Monitor for unauthorized access to secrets\n         - Implement alerts for potential compromises\n      \n      10. **Educate your team**\n          - Train developers on secure secret management\n          - Establish clear procedures for handling secrets\n          - Create a response plan for leaked credentials\n\n  - type: validate\n    conditions:\n      - pattern: \"(?i)import\\\\s+os\\\\s*;?\\\\s*.*\\\\s+os\\\\.environ(\\\\.get)?\"\n        message: \"Environment variable usage detected, which is a good practice for managing secrets.\"\n      \n      - pattern: \"(?i)process\\\\.env\\\\.\"\n        message: \"Environment variable usage in JavaScript detected, which is a good practice for managing secrets.\"\n      \n      - pattern: \"(?i)dotenv\"\n        message: \"Dotenv library usage detected, which can help with environment variable management.\"\n      \n      - pattern: \"(?i)(secret[s]?[_-]?manager|key[_-]?vault|hashicorp|vault)\"\n        message: \"Secret management solution reference detected, which is a best practice for handling secrets.\"\n\nmetadata:\n  priority: high\n  version: 1.0\n  tags:\n    - category:security\n    - subcategory:secrets\n    - subcategory:sensitive-data\n    - language:all\n    - priority:critical\n  references:\n    - \"https://owasp.org/www-community/vulnerabilities/Hardcoded_credentials\"\n    - \"https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html\"\n    - \"https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning\"\n    - \"https://cloud.google.com/secret-manager/docs/best-practices\"\n    - \"https://aws.amazon.com/blogs/security/how-to-use-aws-secrets-manager-securely-store-rotate-deploy-database-credentials/\"\n</rule>",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/secret-detection.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/secret-detection.mdc",
      "sha": "8c414af52c89c0989803335088501f1d74f43d90"
    }
  },
  {
    "name": "ivangrynenko-security-practices",
    "slug": "security-practices",
    "displayName": "Security Practices",
    "description": "--- description: Security best practices for PHP, JavaScript, and Drupal globs: *.php, *.js, *.vue, *.jsx, *.tsx",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Security best practices for PHP, JavaScript, and Drupal\nglobs: *.php, *.js, *.vue, *.jsx, *.tsx\nalwaysApply: false\n---\n# Security Best Practices\n\nEnsures application security standards are maintained.\n\n<rule>\nname: security_practices\ndescription: Enforce security best practices across the application\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|js|vue|jsx|tsx)$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"eval\\\\(\"\n        message: \"Avoid using eval() - security risk\"\n\n      - pattern: \"\\\\$_GET|\\\\$_POST|\\\\$_REQUEST\"\n        message: \"Use Drupal's input sanitization methods\"\n\n      - pattern: \"innerHTML\"\n        message: \"Use textContent or sanitize HTML content\"\n\n  - type: suggest\n    message: |\n      Security Best Practices:\n      - Implement CSRF protection\n      - Use prepared statements for queries\n      - Sanitize user input\n      - Implement proper access controls\n      - Follow security updates protocol\n      - Ensure Drupal file permissions are secure (see drupal-file-permissions.mdc)\n      - Use ahoy cli commands instead of direct docker compose exec\n\nmetadata:\n  priority: critical\n  version: 1.0\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/security-practices.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/security-practices.mdc",
      "sha": "0e012cc141dfc2e12742a8c83b87fab27cc6177b"
    }
  },
  {
    "name": "ivangrynenko-tailwind-standards",
    "slug": "tailwind-standards",
    "displayName": "Tailwind Standards",
    "description": "--- description: Tailwind CSS class organization and best practices globs: *.vue, *.jsx, *.tsx, *.html",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Tailwind CSS class organization and best practices\nglobs: *.vue, *.jsx, *.tsx, *.html\n---\n# Tailwind CSS Standards\n\nEnsures consistent and optimized usage of Tailwind CSS classes.\n\n<rule>\nname: tailwind_standards\ndescription: Enforce Tailwind CSS best practices and organization\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(vue|jsx|tsx|html)$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"class=\\\"[^\\\"]*\\\\s{2,}\"\n        message: \"Remove multiple spaces between Tailwind classes\"\n\n      - pattern: \"class=\\\"[^\\\"]*(?:text-\\\\w+\\\\s+text-\\\\w+|bg-\\\\w+\\\\s+bg-\\\\w+)\"\n        message: \"Avoid conflicting utility classes\"\n\n  - type: suggest\n    message: |\n      Tailwind Best Practices:\n      - Group related utilities together\n      - Use @apply for commonly repeated patterns\n      - Follow responsive design patterns\n      - Implement proper dark mode support\n      - Consider extracting components for repeated patterns\n\nmetadata:\n  priority: medium\n  version: 1.0\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/tailwind-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/tailwind-standards.mdc",
      "sha": "cd41b939f0f7096a58ee1f82b2a92fb55ede102a"
    }
  },
  {
    "name": "ivangrynenko-testing-guidelines",
    "slug": "testing-guidelines",
    "displayName": "Testing Guidelines",
    "description": "--- description: Testing Guidelines globs:",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "quality-testing",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Testing Guidelines\nglobs: \nalwaysApply: false\n---\n# Revised Cursor Rule File - Testing Guidelines (preserving functionality)\n# This file outlines testing policies that maintain existing functionality while incorporating best software testing practices.\n# It enforces separation of production and test code, allows controlled use of test hooks, and defines processes for exceptions and documentation alignment.\nrules:\n  - name: Test-Production Separation\n    description: \"Test code must remain strictly separated from production code.\"\n    guidelines:\n      - \"Place test code in dedicated test directories or modules, separate from production code.\"\n      - \"Allow test-specific helpers or hooks only in a controlled manner (e.g., via clearly isolated interfaces or configurations).\"\n      - \"Production code should remain unchanged for testing, unless using approved test extension points.\"\n  - name: Testability (Mocks and Stubs)\n    description: \"Enable testability by using mocks and stubs for external dependencies.\"\n    guidelines:\n      - \"Prefer dependency injection or interfaces to swap real components with mocks or stubs in tests.\"\n      - \"Avoid duplicating production logic in test code; tests should call into production code or use simplified mocks rather than reimplementing logic.\"\n  - name: Exception Handling\n    description: \"Any necessary modification to production code for testing is an exception and requires review.\"\n    guidelines:\n      - \"Document and justify any change made to production code solely for testing purposes.\"\n      - \"Obtain approval through a formal review process (e.g., code review by senior developers or architects) for such changes.\"\n      - \"Ensure that any approved change does not alter the intended functionality of the production code.\"\n  - name: Documentation Alignment\n    description: \"Align test expectations with existing documentation without modifying production documentation.\"\n    guidelines:\n      - \"Write tests to validate behaviors as documented in product or code documentation.\"\n      - \"If a test reveals a discrepancy between actual behavior and documentation, address it by updating the documentation via the normal process, not by changing production code to fit tests.\"\n      - \"Keep production code comments and descriptions unchanged during testing; refine tests or documentation instead to resolve mismatches.\"\n  - name: Industry Best Practices\n    description: \"Follow industry best practices for software testing with clear boundaries.\"\n    guidelines:\n      - \"Clearly delineate test types (unit, integration, end-to-end) and ensure each is executed in appropriate environments.\"\n      - \"Isolate tests to avoid side effects, and clean up any test data or state after execution.\"\n      - \"Integrate tests into continuous integration workflows to run automatically without requiring changes to production code.\"",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/testing-guidelines.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/testing-guidelines.mdc",
      "sha": "75a9772eac2a11548af57a2edf9c1247956fa87f"
    }
  },
  {
    "name": "ivangrynenko-tests-documentation-maintenance",
    "slug": "tests-documentation-maintenance",
    "displayName": "Tests Documentation Maintenance",
    "description": "--- description: Require tests for new functionality and enforce documentation updates. globs: *.php, *.feature, README.md, *.md",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "quality-testing",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Require tests for new functionality and enforce documentation updates.\nglobs: *.php, *.feature, README.md, *.md\n---\n# Tests & Documentation Maintenance\n\nEnsures that tests are written and updated for Drupal modules and plugins, and that documentation remains current.\n\n<rule>\nname: tests_documentation_maintenance\ndescription: Require tests for new functionality and enforce documentation updates.\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|feature|md|theme|module|install|info|inc)$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"class .*Test extends\"\n        message: \"Ensure all Drupal modules and plugins have unit tests.\"\n\n      - pattern: \"Feature:.*\"\n        message: \"Ensure front-end affecting plugins have Behat tests.\"\n\n      - pattern: \"function .*\\\\(\"\n        message: \"When modifying existing functionality, check and update related tests.\"\n\n      - pattern: \"# README\"\n        message: \"Ensure README.md exists in each module and is kept up to date.\"\n\n  - type: suggest\n    message: |\n      Keep tests and documentation updated:\n      - Write **unit tests** for Drupal modules and backend logic.\n      - Write **Behat tests** for plugins that affect front-end behavior.\n      - If functionality changes, **update corresponding tests**.\n      - Maintain a **README.md** file in each module and update it with relevant changes.\n\nmetadata:\n  priority: high\n  version: 1.0\n</rule>\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/tests-documentation-maintenance.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/tests-documentation-maintenance.mdc",
      "sha": "f5e4a1d42cded7874b70f1481dcd581a48640359"
    }
  },
  {
    "name": "ivangrynenko-third-party-integration",
    "slug": "third-party-integration",
    "displayName": "Third Party Integration",
    "description": "--- description: Standards for integrating external services globs: *.php, *.js, *.ts",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standards for integrating external services\nglobs: *.php, *.js, *.ts\n---\n# Third-Party Integration Standards\n\nEnsures consistent and secure third-party service integration.\n\n<rule>\nname: third_party_integration\ndescription: Enforce standards for external service integration\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|js|ts)$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"new\\\\s+[A-Z][a-zA-Z]*Client\\\\(\"\n        message: \"Implement proper error handling for external services\"\n\n      - pattern: \"process\\\\.env\\\\.|getenv\\\\(\"\n        message: \"Use configuration management for API credentials\"\n\n  - type: suggest\n    message: |\n      Integration Best Practices:\n      - Implement proper error handling\n      - Use environment variables\n      - Create service abstractions\n      - Implement retry mechanisms\n      - Monitor integration health\n\nmetadata:\n  priority: high\n  version: 1.0\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/third-party-integration.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/third-party-integration.mdc",
      "sha": "f7fabcf829d3308fb8d783a7c162c53deefd6398"
    }
  },
  {
    "name": "ivangrynenko-vortex-cicd-standards",
    "slug": "vortex-cicd-standards",
    "displayName": "Vortex Cicd Standards",
    "description": "--- description: Standards for Vortex CI/CD and Renovate configuration globs: .circleci/config.yml, renovate.json, .github/workflows/*.yml",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standards for Vortex CI/CD and Renovate configuration\nglobs: .circleci/config.yml, renovate.json, .github/workflows/*.yml\n---\n# Vortex CI/CD Standards\n\nEnsures proper CI/CD and dependency management configuration.\n\n<rule>\nname: vortex_cicd_standards\ndescription: Enforce standards for Vortex CI/CD and Renovate configuration\nfilters:\n  - type: file_name\n    pattern: \"^config\\\\.yml$|^renovate\\\\.json$|\\\\.github/workflows/.*\\\\.yml$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"workflows:\\\\s+version:\\\\s*2\\\\.1\"\n        message: \"Use Vortex's CircleCI configuration template\"\n\n      - pattern: \"\\\"extends\\\":\\\\s*\\\\[\\\\s*\\\"config:base\\\"\\\\s*\\\\]\"\n        message: \"Extend Vortex's Renovate configuration for Drupal projects\"\n\n      - pattern: \"steps:\\\\s+- run:\\\\s+name:\\\\s+Install dependencies\"\n        message: \"Use scripts/vortex/provision.sh for consistent provisioning\"\n\n  - type: suggest\n    message: |\n      CI/CD Best Practices:\n      - Use dual schedules for Drupal updates\n      - Configure automated PR assignments\n      - Enable deployment notifications\n      - Use provided test scaffolds\n      - Implement proper caching strategy\n      - Configure branch protection rules\n      - Use standardized job naming\n\n  - type: validate\n    conditions:\n      - pattern: \"\\\"packageRules\\\":\\\\s*\\\\[\\\\s*\\\\{\\\\s*\\\"matchPackagePatterns\\\":\\\\s*\\\\[\\\"^drupal/core\"\n        message: \"Configure separate update schedules for Drupal core and contrib\"\n\n      - pattern: \"jobs:\\\\s+build_test:\"\n        message: \"Include all required test jobs from Vortex template\"\n\n      - pattern: \"- store_test_results:\"\n        message: \"Enable test results storage for better CI visibility\"\n\nmetadata:\n  priority: critical\n  version: 1.0\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/vortex-cicd-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/vortex-cicd-standards.mdc",
      "sha": "d62afabac71c776393aed907cc69070426d0335f"
    }
  },
  {
    "name": "ivangrynenko-vortex-scaffold-standards",
    "slug": "vortex-scaffold-standards",
    "displayName": "Vortex Scaffold Standards",
    "description": "--- description: Standards for Vortex/DrevOps scaffold usage and best practices globs: *.yml, *.sh, composer.json, README.md",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: Standards for Vortex/DrevOps scaffold usage and best practices\nglobs: *.yml, *.sh, composer.json, README.md\n---\n# Vortex/DrevOps Scaffold Standards\n\nEnsures proper usage of Vortex/DrevOps scaffold features and workflows.\n\n<rule>\nname: vortex_scaffold_standards\ndescription: Enforce standards for Vortex/DrevOps scaffold usage\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(yml|yaml|sh|json|md)$\"\n  - type: file_path\n    pattern: \"scripts/(vortex|drevops)/\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"custom-download-db\\\\.sh\"\n        message: \"Use scripts/vortex/download-db.sh router script instead of custom implementation\"\n\n      - pattern: \"drush\\\\s+[a-z-]+\\\\s+--uri=\"\n        message: \"Use DRUPAL_SITE_URL environment variable instead of hardcoded URI\"\n\n      - pattern: \"composer\\\\s+require\\\\s+[^-]\"\n        message: \"Use Vortex's composer.json template and Renovate for dependency management\"\n\n      - pattern: \"docker\\\\s+exec\\\\s+-it\\\\s+\\\\$\\\\(docker-compose\"\n        message: \"Use Ahoy commands for container interactions\"\n\n  - type: suggest\n    message: |\n      Vortex/DrevOps Best Practices:\n      - Use centralized workflow scripts from scripts/vortex/\n      - Leverage environment variables for configuration\n      - Use Renovate for automated dependency updates\n      - Follow the router script pattern for customizations\n      - Implement proper CI/CD integration\n      - Use provided tool configurations (PHPCS, PHPStan, etc.)\n      - Maintain documentation structure\n      - Ensure CI/CD pipelines include testing and deployment steps\n      - Document CI/CD processes in the README for clarity\n\n  - type: validate\n    conditions:\n      - pattern: \"^\\\\s*source\\\\s+\\\\.env\"\n        message: \"Use scripts/vortex/bootstrap.sh for environment setup\"\n\n      - pattern: \"docker-compose\\\\s+exec\\\\s+cli\\\\s+vendor/bin/\"\n        message: \"Use provided Ahoy commands for tool execution\"\n\nmetadata:\n  priority: high\n  version: 1.1\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/vortex-scaffold-standards.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/vortex-scaffold-standards.mdc",
      "sha": "897e5dae69ca1e447a559c115c4ce50709557fe3"
    }
  },
  {
    "name": "ivangrynenko-vue-best-practices",
    "slug": "vue-best-practices",
    "displayName": "Vue Best Practices",
    "description": "--- description: Vue 3 and NuxtJS specific standards and optimizations globs: *.vue, *.js, *.ts",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "frontend-frameworks",
    "tags": [
      "cursor",
      "cursor-rule",
      "vue"
    ],
    "content": "---\ndescription: Vue 3 and NuxtJS specific standards and optimizations\nglobs: *.vue, *.js, *.ts\n---\n# Vue 3 and NuxtJS Best Practices\n\nEnsures Vue 3 and NuxtJS code follows recommended patterns and optimizations.\n\n<rule>\nname: vue_nuxt_best_practices\ndescription: Enforce Vue 3 and NuxtJS coding standards and optimizations\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(vue|js|ts)$\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"(?<!defineProps|interface|type)\\\\{\\\\s*[a-zA-Z]+\\\\s*:\\\\s*[a-zA-Z]+\\\\s*\\\\}\"\n        message: \"Use TypeScript interfaces for prop definitions\"\n\n      - pattern: \"watch\\\\(.*,.*\\\\{\\\\s*immediate:\\\\s*true\\\\s*\\\\}\"\n        message: \"Consider using computed property instead of immediate watch\"\n\n      - pattern: \"v-if.*v-for\"\n        message: \"Avoid using v-if with v-for on the same element\"\n\n  - type: suggest\n    message: |\n      Vue 3 Best Practices:\n      - Use Composition API for complex components\n      - Implement proper prop validation\n      - Use TypeScript for better type safety\n      - Leverage Vue 3's reactivity system effectively\n      - Consider using <script setup> syntax\n\nmetadata:\n  priority: high\n  version: 1.0\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.cursor/rules/vue-best-practices.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".cursor/rules/vue-best-practices.mdc",
      "sha": "f4da212a1e9a94d095b8bfad23d9972eba37e239"
    }
  },
  {
    "name": "ivangrynenko-github-bug-report",
    "slug": "github-bug-report",
    "displayName": ".Github Bug_report",
    "description": "--- name: Bug report about: Create a report to help us improve",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\nname: Bug report\nabout: Create a report to help us improve\ntitle: ''\nlabels: ''\nassignees: ''\n\n---\n\n**Describe the bug**\nA clear and concise description of what the bug is.\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. Go to '...'\n2. Click on '....'\n3. Scroll down to '....'\n4. See error\n\n**Expected behavior**\nA clear and concise description of what you expected to happen.\n\n**Screenshots**\nIf applicable, add screenshots to help explain your problem.\n\n**Desktop (please complete the following information):**\n - OS: [e.g. iOS]\n - Browser [e.g. chrome, safari]\n - Version [e.g. 22]\n\n**Smartphone (please complete the following information):**\n - Device: [e.g. iPhone6]\n - OS: [e.g. iOS8.1]\n - Browser [e.g. stock browser, safari]\n - Version [e.g. 22]\n\n**Additional context**\nAdd any other context about the problem here.\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.github/ISSUE_TEMPLATE/bug_report.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".github/ISSUE_TEMPLATE/bug_report.md",
      "sha": "dd84ea7824f11be1eeda22377549cbc1aec7f980"
    }
  },
  {
    "name": "ivangrynenko-github-feature-request",
    "slug": "github-feature-request",
    "displayName": ".Github Feature_request",
    "description": "--- name: Feature request about: Suggest an idea for this project",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\nname: Feature request\nabout: Suggest an idea for this project\ntitle: ''\nlabels: ''\nassignees: ''\n\n---\n\n**Is your feature request related to a problem? Please describe.**\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n\n**Describe the solution you'd like**\nA clear and concise description of what you want to happen.\n\n**Describe alternatives you've considered**\nA clear and concise description of any alternative solutions or features you've considered.\n\n**Additional context**\nAdd any other context or screenshots about the feature request here.\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.github/ISSUE_TEMPLATE/feature_request.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".github/ISSUE_TEMPLATE/feature_request.md",
      "sha": "bbcbbe7d61558adde3cbfd0c7a63a67c27ed6d30"
    }
  },
  {
    "name": "ivangrynenko-github-testing",
    "slug": "github-testing",
    "displayName": ".Github TESTING",
    "description": ".Github TESTING cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "quality-testing",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "# Cursor Rules Test Workflow\n\n[![Cursor Rules Tests](https://github.com/ivangrynenko/cursor-rules/actions/workflows/test.yml/badge.svg)](https://github.com/ivangrynenko/cursor-rules/actions/workflows/test.yml)\n\nThis directory contains the GitHub Actions workflow configuration for testing the Cursor Rules installer.\n\n## Workflow Overview\n\nThe `test.yml` workflow runs automatically on:\n- Push to the `main` branch\n- Pull requests targeting the `main` branch\n\n## What the Workflow Tests\n\nThe workflow runs a series of tests to ensure the Cursor Rules installer functions correctly:\n\n1. **Basic Tests**\n   - `test-copy.sh`: Verifies the installer file can be copied correctly\n   - `test-debug.sh`: Runs the installer with the `--help` option to verify basic functionality\n\n2. **Error Handling Tests**\n   - `test-invalid-option.sh`: Tests the installer's response to invalid options\n   - `test-conflicting-options.sh`: Tests the installer's response to conflicting options\n   - `test-missing-files.sh`: Tests file validation with missing files\n\n3. **Full Installation Tests**\n   - `run-all-tests.sh`: Runs a comprehensive test suite covering all installation options\n\n## Test Results\n\nThe workflow generates a test summary and uploads test logs as artifacts, which can be accessed from the GitHub Actions page.\n\n## Local Testing\n\nYou can run the tests locally in two ways:\n\n### Option 1: Direct Script Execution\n\n```bash\n# Run all tests\n./.tests/run-all-tests.sh\n\n# Run individual tests\n./.tests/test-copy.sh\n./.tests/test-debug.sh\n./.tests/test-invalid-option.sh\n./.tests/test-conflicting-options.sh\n./.tests/test-missing-files.sh\n```\n\n### Option 2: Using GitHub Actions Locally\n\nYou can test the GitHub Actions workflow locally using [act](https://github.com/nektos/act):\n\n```bash\n# Run the entire workflow\n./.github/test-workflow-locally.sh\n\n# Run a specific job\n./.github/test-workflow-locally.sh --job test\n```\n\nFor detailed instructions on local testing, see [TESTING.md](TESTING.md).\n\n## Workflow Configuration\n\nThe workflow is configured to:\n- Run on PHP 8.1 and 8.2\n- Validate PHP syntax\n- Generate detailed test reports\n- Upload test logs as artifacts\n\n## Best Practices\n\n- Always use the latest versions of GitHub Actions (e.g., `actions/checkout@v4`, `actions/upload-artifact@v4`)\n- Test workflow changes locally before pushing to GitHub\n- Keep workflow steps modular and well-documented \n\n# Testing GitHub Actions Workflows Locally\n\nThis guide explains how to test GitHub Actions workflows locally before pushing changes to GitHub.\n\n## Prerequisites\n\nYou need to install [act](https://github.com/nektos/act), a tool for running GitHub Actions locally:\n\n- **macOS**:\n  ```bash\n  brew install act\n  ```\n\n- **Linux**:\n  ```bash\n  curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\n  ```\n\n- **Windows**:\n  ```bash\n  # Using Chocolatey\n  choco install act-cli\n  \n  # Or download from GitHub releases\n  # https://github.com/nektos/act/releases\n  ```\n\n## Using the Test Script\n\nWe've provided a convenient script to run workflows locally:\n\n```bash\n./.github/test-workflow-locally.sh\n```\n\n### Options\n\n- `-w, --workflow FILE`: Specify the workflow file to test (default: `.github/workflows/test.yml`)\n- `-e, --event EVENT`: Specify the event type to trigger (default: `push`)\n- `-j, --job JOB`: Run a specific job from the workflow\n- `-h, --help`: Show help message\n\n### Examples\n\n```bash\n# Run the default workflow with push event\n./.github/test-workflow-locally.sh\n\n# Run a specific workflow file\n./.github/test-workflow-locally.sh --workflow .github/workflows/custom.yml\n\n# Run with pull_request event\n./.github/test-workflow-locally.sh --event pull_request\n\n# Run only a specific job\n./.github/test-workflow-locally.sh --job test\n```\n\n## Manual Usage\n\nYou can also use `act` directly:\n\n```bash\n# Run the default workflow\nact\n\n# Run a specific workflow\nact -W .github/workflows/test.yml\n\n# Run a specific job\nact -j test\n\n# Run with pull_request event\nact pull_request\n```\n\n## Docker Images\n\nBy default, `act` uses minimal Docker images that might not include all the tools needed for your workflow. You can specify different images:\n\n```bash\n# Use full Ubuntu image (larger but more complete)\nact -P ubuntu-latest=ghcr.io/catthehacker/ubuntu:full-latest\n\n# Use medium-sized image\nact -P ubuntu-latest=ghcr.io/catthehacker/ubuntu:act-latest\n```\n\n## Secrets and Environment Variables\n\nTo use secrets or environment variables:\n\n```bash\n# Using a .env file\nact --env-file .env\n\n# Passing secrets directly\nact -s MY_SECRET=value\n```\n\n## Limitations\n\n- Some GitHub-specific features might not work locally\n- Complex workflows with many dependencies might require additional configuration\n- GitHub-hosted runners might have different environments than your local Docker containers\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Make sure Docker is running\n2. Try using a more complete Docker image with `-P ubuntu-latest=ghcr.io/catthehacker/ubuntu:full-latest`\n3. Check if your workflow requires specific secrets or environment variables\n4. For complex setups, consider creating a `.actrc` file with your configuration\n\nFor more information, visit the [act GitHub repository](https://github.com/nektos/act). ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.github/TESTING.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".github/TESTING.md",
      "sha": "91f4054aa51764025ad8032bfb87ebd370f70421"
    }
  },
  {
    "name": "ivangrynenko-tests-test-scenarios",
    "slug": "tests-test-scenarios",
    "displayName": ".Tests Test Scenarios",
    "description": "# Cursor Rules Installer Test Scenarios  This document outlines the test scenarios for the Cursor Rules installer script.",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "quality-testing",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "# Cursor Rules Installer Test Scenarios\n\nThis document outlines the test scenarios for the Cursor Rules installer script.\n\n## ⚠️ Important Note\n\n**Core rules are always included** in all installation types (web-stack, python, all). This ensures that essential functionality such as Git commit standards, readme maintenance standards, and Cursor rules efficiency improvements are available regardless of the selected installation option.\n\n## CLI Options to Test\n\n| Option | Short | Description |\n|--------|-------|-------------|\n| `--web-stack` | `-w` | Install core, web, and Drupal rules |\n| `--python` | `-p` | Install core and Python rules |\n| `--all` | `-a` | Install all rule sets (includes all core, web, Drupal, and Python rules) |\n| `--core` | `-c` | Install only core rules |\n| `--custom` | | Enable selective installation (interactive) |\n| `--help` | `-h` | Display help information |\n| `--quiet` | `-q` | Suppress verbose output |\n| `--yes` | `-y` | Automatically confirm all prompts |\n\n## Test Scenarios\n\n### Basic Installation Tests\n\n1. **Web Stack Installation**\n   - Command: `php install.php --web-stack`\n   - Expected: Core, web, and Drupal rules installed\n\n2. **Python Installation**\n   - Command: `php install.php --python`\n   - Expected: Core and Python rules installed\n\n3. **All Rules Installation**\n   - Command: `php install.php --all`\n   - Expected: All rule sets installed (core, web, Drupal, and Python)\n\n4. **Core Rules Installation**\n   - Command: `php install.php --core`\n   - Expected: Only core rules installed\n\n5. **Custom Selection**\n   - Command: `php install.php --custom`\n   - Expected: Interactive prompts for selecting rule sets (core rules remain mandatory)\n\n6. **Help Information**\n   - Command: `php install.php --help`\n   - Expected: Display help information and exit\n\n### Option Combination Tests\n\n7. **Web Stack with Auto-confirm**\n   - Command: `php install.php --web-stack --yes`\n   - Expected: Web stack rules installed without confirmation prompts\n\n8. **Python with Quiet Mode**\n   - Command: `php install.php --python --quiet`\n   - Expected: Python rules installed with minimal output\n\n9. **All Rules with Auto-confirm and Quiet Mode**\n   - Command: `php install.php --all --yes --quiet`\n   - Expected: All rules installed without prompts and minimal output\n\n10. **Core Rules with Short Options**\n    - Command: `php install.php -c -y -q`\n    - Expected: Core rules installed without prompts and minimal output\n\n### Edge Case Tests\n\n11. **Invalid Option**\n    - Command: `php install.php --invalid-option`\n    - Expected: Error message and help information\n\n12. **Conflicting Options**\n    - Command: `php install.php --web-stack --python`\n    - Expected: Error message about conflicting options\n\n13. **Directory Creation**\n    - Precondition: Remove .cursor/rules directory\n    - Command: `php install.php --core --yes`\n    - Expected: Directory created and core rules installed\n\n14. **File Overwriting**\n    - Precondition: Create .cursor/rules with existing files\n    - Command: `php install.php --core --yes`\n    - Expected: Existing files overwritten with new versions\n\n## Test Environment Setup\n\nEach test should run in its own clean environment to avoid interference between tests. The test runner will:\n\n1. Create a temporary test directory\n2. Copy the installer script to the test directory\n3. Run the test command\n4. Verify the results\n5. Clean up the test directory\n\n## Success Criteria\n\nA test is considered successful if:\n\n1. The command exits with the expected status code\n2. The expected files are installed in the correct locations\n3. The output matches the expected pattern (for help, error messages, etc.)\n4. No unexpected files are created or modified ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/.tests/test-scenarios.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": ".tests/test-scenarios.md",
      "sha": "9c59db982281c8734a07e416dbd1ea8f6506184b"
    }
  },
  {
    "name": "ivangrynenko-agents",
    "slug": "agents",
    "displayName": "AGENTS",
    "description": "AGENTS cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "# Cursor Agents Guide (Using Cursor Rules)\n\nThis document explains how to use the rules in this repository with Cursor and serves as a single entry point that references the existing rule files. It avoids duplication by linking directly to the `.cursor/rules/*.mdc` sources.\n\nIf you installed these rules via the installer, a project‑local AGENTS.md can be generated that lists only the rules you chose. By default, the installer writes AGENTS.md if absent; it overwrites only when you pass `--yes`.\n\n## How To Use With Cursor\n- Open your project in Cursor. Rules under `.cursor/rules` are discovered automatically by Cursor.\n- Keep this AGENTS.md handy as your quick index to the rule set.\n- For installation methods and advanced options, see `README.md`.\n\n## Installation Options\nFor full installation details and examples, see `README.md`.\n- Core rules only: `--core`\n- Web stack (includes core): `--web-stack` or `--ws`\n- Python (includes core): `--python`\n- JavaScript security (includes core): `--javascript`\n- All rules: `--all`\n- Tag-based selection: `--tags \"<expression>\"` or `--tag-preset <name>`\n- Ignore files control: `--ignore-files yes|no|ask`\n\nTag taxonomy is documented in `TAG_STANDARDS.md`.\n\n## Rule Bundles (Source of Truth)\nBelow are the rule bundles and their rule files. Each item links directly to the authoritative file under `.cursor/rules/`.\n\n### Core\n- [.cursor/rules/cursor-rules.mdc](.cursor/rules/cursor-rules.mdc)\n- [.cursor/rules/git-commit-standards.mdc](.cursor/rules/git-commit-standards.mdc)\n- [.cursor/rules/github-actions-standards.mdc](.cursor/rules/github-actions-standards.mdc)\n- [.cursor/rules/improve-cursorrules-efficiency.mdc](.cursor/rules/improve-cursorrules-efficiency.mdc)\n- [.cursor/rules/pull-request-changelist-instructions.mdc](.cursor/rules/pull-request-changelist-instructions.mdc)\n- [.cursor/rules/readme-maintenance-standards.mdc](.cursor/rules/readme-maintenance-standards.mdc)\n- [.cursor/rules/testing-guidelines.mdc](.cursor/rules/testing-guidelines.mdc)\n - [.cursor/rules/confluence-editing-standards.mdc](.cursor/rules/confluence-editing-standards.mdc)\n\n### Web Stack\n- [.cursor/rules/accessibility-standards.mdc](.cursor/rules/accessibility-standards.mdc)\n- [.cursor/rules/api-standards.mdc](.cursor/rules/api-standards.mdc)\n- [.cursor/rules/build-optimization.mdc](.cursor/rules/build-optimization.mdc)\n- [.cursor/rules/code-generation-standards.mdc](.cursor/rules/code-generation-standards.mdc)\n- [.cursor/rules/debugging-standards.mdc](.cursor/rules/debugging-standards.mdc)\n- [.cursor/rules/docker-compose-standards.mdc](.cursor/rules/docker-compose-standards.mdc)\n- [.cursor/rules/drupal-authentication-failures.mdc](.cursor/rules/drupal-authentication-failures.mdc)\n- [.cursor/rules/drupal-broken-access-control.mdc](.cursor/rules/drupal-broken-access-control.mdc)\n- [.cursor/rules/drupal-cryptographic-failures.mdc](.cursor/rules/drupal-cryptographic-failures.mdc)\n- [.cursor/rules/drupal-database-standards.mdc](.cursor/rules/drupal-database-standards.mdc)\n- [.cursor/rules/drupal-file-permissions.mdc](.cursor/rules/drupal-file-permissions.mdc)\n- [.cursor/rules/drupal-injection.mdc](.cursor/rules/drupal-injection.mdc)\n- [.cursor/rules/drupal-insecure-design.mdc](.cursor/rules/drupal-insecure-design.mdc)\n- [.cursor/rules/drupal-integrity-failures.mdc](.cursor/rules/drupal-integrity-failures.mdc)\n- [.cursor/rules/drupal-logging-failures.mdc](.cursor/rules/drupal-logging-failures.mdc)\n- [.cursor/rules/drupal-security-misconfiguration.mdc](.cursor/rules/drupal-security-misconfiguration.mdc)\n- [.cursor/rules/drupal-ssrf.mdc](.cursor/rules/drupal-ssrf.mdc)\n- [.cursor/rules/drupal-vulnerable-components.mdc](.cursor/rules/drupal-vulnerable-components.mdc)\n- [.cursor/rules/generic_bash_style.mdc](.cursor/rules/generic_bash_style.mdc)\n- [.cursor/rules/javascript-performance.mdc](.cursor/rules/javascript-performance.mdc)\n- [.cursor/rules/javascript-standards.mdc](.cursor/rules/javascript-standards.mdc)\n- [.cursor/rules/lagoon-docker-compose-standards.mdc](.cursor/rules/lagoon-docker-compose-standards.mdc)\n- [.cursor/rules/lagoon-yml-standards.mdc](.cursor/rules/lagoon-yml-standards.mdc)\n- [.cursor/rules/multi-agent-coordination.mdc](.cursor/rules/multi-agent-coordination.mdc)\n- [.cursor/rules/node-dependencies.mdc](.cursor/rules/node-dependencies.mdc)\n- [.cursor/rules/php-drupal-best-practices.mdc](.cursor/rules/php-drupal-best-practices.mdc)\n- [.cursor/rules/php-drupal-development-standards.mdc](.cursor/rules/php-drupal-development-standards.mdc)\n- [.cursor/rules/php-memory-optimisation.mdc](.cursor/rules/php-memory-optimisation.mdc)\n- [.cursor/rules/project-definition-template.mdc](.cursor/rules/project-definition-template.mdc)\n- [.cursor/rules/react-patterns.mdc](.cursor/rules/react-patterns.mdc)\n- [.cursor/rules/security-practices.mdc](.cursor/rules/security-practices.mdc)\n- [.cursor/rules/secret-detection.mdc](.cursor/rules/secret-detection.mdc)\n- [.cursor/rules/tailwind-standards.mdc](.cursor/rules/tailwind-standards.mdc)\n- [.cursor/rules/tests-documentation-maintenance.mdc](.cursor/rules/tests-documentation-maintenance.mdc)\n- [.cursor/rules/third-party-integration.mdc](.cursor/rules/third-party-integration.mdc)\n- [.cursor/rules/vortex-cicd-standards.mdc](.cursor/rules/vortex-cicd-standards.mdc)\n- [.cursor/rules/vortex-scaffold-standards.mdc](.cursor/rules/vortex-scaffold-standards.mdc)\n- [.cursor/rules/vue-best-practices.mdc](.cursor/rules/vue-best-practices.mdc)\n- [.cursor/rules/behat-steps.mdc](.cursor/rules/behat-steps.mdc)\n- [.cursor/rules/behat-ai-guide.mdc](.cursor/rules/behat-ai-guide.mdc)\n\n### Python\n- [.cursor/rules/python-authentication-failures.mdc](.cursor/rules/python-authentication-failures.mdc)\n- [.cursor/rules/python-broken-access-control.mdc](.cursor/rules/python-broken-access-control.mdc)\n- [.cursor/rules/python-cryptographic-failures.mdc](.cursor/rules/python-cryptographic-failures.mdc)\n- [.cursor/rules/python-injection.mdc](.cursor/rules/python-injection.mdc)\n- [.cursor/rules/python-insecure-design.mdc](.cursor/rules/python-insecure-design.mdc)\n- [.cursor/rules/python-integrity-failures.mdc](.cursor/rules/python-integrity-failures.mdc)\n- [.cursor/rules/python-logging-monitoring-failures.mdc](.cursor/rules/python-logging-monitoring-failures.mdc)\n- [.cursor/rules/python-security-misconfiguration.mdc](.cursor/rules/python-security-misconfiguration.mdc)\n- [.cursor/rules/python-ssrf.mdc](.cursor/rules/python-ssrf.mdc)\n- [.cursor/rules/python-vulnerable-outdated-components.mdc](.cursor/rules/python-vulnerable-outdated-components.mdc)\n- [.cursor/rules/security-practices.mdc](.cursor/rules/security-practices.mdc)\n\n### JavaScript Security\n- [.cursor/rules/javascript-broken-access-control.mdc](.cursor/rules/javascript-broken-access-control.mdc)\n- [.cursor/rules/javascript-cryptographic-failures.mdc](.cursor/rules/javascript-cryptographic-failures.mdc)\n- [.cursor/rules/javascript-identification-authentication-failures.mdc](.cursor/rules/javascript-identification-authentication-failures.mdc)\n- [.cursor/rules/javascript-injection.mdc](.cursor/rules/javascript-injection.mdc)\n- [.cursor/rules/javascript-insecure-design.mdc](.cursor/rules/javascript-insecure-design.mdc)\n- [.cursor/rules/javascript-security-logging-monitoring-failures.mdc](.cursor/rules/javascript-security-logging-monitoring-failures.mdc)\n- [.cursor/rules/javascript-security-misconfiguration.mdc](.cursor/rules/javascript-security-misconfiguration.mdc)\n- [.cursor/rules/javascript-server-side-request-forgery.mdc](.cursor/rules/javascript-server-side-request-forgery.mdc)\n- [.cursor/rules/javascript-software-data-integrity-failures.mdc](.cursor/rules/javascript-software-data-integrity-failures.mdc)\n- [.cursor/rules/javascript-vulnerable-outdated-components.mdc](.cursor/rules/javascript-vulnerable-outdated-components.mdc)\n\n## Tag-Based Selection\nThe installer supports tag expressions and presets. Examples:\n- `--tags \"language:javascript category:security\"`\n- `--tags \"framework:react\"`\n- `--tags \"language:php standard:owasp-top10\"`\n- `--tag-preset js-owasp`\n\nSee `TAG_STANDARDS.md` for the complete tag taxonomy and guidance.\n\n## Updating Or Removing\n- To update, re-run the installer with your preferred options (it will copy over updated rules). See `README.md`.\n- To remove rules, delete files from `.cursor/rules` and remove any generated `.cursorignore` files if not needed.\n\n## References\n- Project README: [README.md](README.md)\n- Tag standards: [TAG_STANDARDS.md](TAG_STANDARDS.md)\n- All rule sources: `.cursor/rules/*.mdc`\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/AGENTS.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "AGENTS.md",
      "sha": "7305534ca1d68291ef72e994d04df9493572f16d"
    }
  },
  {
    "name": "ivangrynenko-claude",
    "slug": "claude",
    "displayName": "CLAUDE",
    "description": "# CLAUDE.md  This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Project Overview\n\nThis is a repository for managing and distributing Cursor AI rules, particularly focused on web development with strong emphasis on PHP/Drupal, frontend frameworks, and security best practices. The project provides an interactive PHP installer that allows developers to selectively install rule sets into their projects.\n\n## Common Development Tasks\n\n### Running Tests\n```bash\n# Run all tests\ncd .tests && ./run-all-tests.sh\n\n# Run individual test scripts\ncd .tests\n./test-copy.sh              # Test basic installation functionality\n./test-debug.sh             # Test debug mode\n./test-invalid-option.sh    # Test invalid option handling\n./test-conflicting-options.sh  # Test conflicting options\n./test-missing-files.sh     # Test missing file handling\n```\n\n### Testing the Installer\n```bash\n# Test installation interactively\nphp install.php\n\n# Test with specific options\nphp install.php --core           # Install core rules only\nphp install.php --web-stack      # Install web stack rules (includes core)\nphp install.php --python         # Install Python rules (includes core)\nphp install.php --all            # Install all rules\n\n# Test with debug mode\nphp install.php --debug --core\n\n# Test installation to custom directory\nphp install.php --all --destination=my/custom/path\n\n# Test installation via curl (non-interactive)\ncurl -s https://raw.githubusercontent.com/ivangrynenko/cursor-rules/main/install.php | php -- --ws\ncat install.php | php -- --core   # Test piped input locally\n```\n\n### Linting and Code Quality\n- PHP syntax validation: `php -l install.php`\n- No specific linting commands configured - consider adding phpcs/phpmd\n\n## Architecture and Code Structure\n\n### Project Organization\n- **install.php**: Main installer script (current version defined by CURSOR_RULES_VERSION constant)\n- **.cursor/rules/**: Contains 56 MDC rule files organized by category\n- **.cursor/UPDATE.md**: Installation receipt file tracking installed version and configuration (created by installer)\n- **.tests/**: Bash test scripts for installer validation\n- **.github/workflows/**: CI/CD pipeline using GitHub Actions for PHP 8.3\n- **AGENTS.md**: Comprehensive guide for using Cursor Rules (created by installer)\n\n### Rule Categories\n1. **Core Rules** (7 files): Git standards, testing guidelines, README maintenance\n2. **Web Development Rules**:\n   - Frontend: JavaScript, React, Vue, Tailwind, accessibility\n   - Backend: PHP/Drupal standards, database\n   - Security: OWASP Top 10 implementations for Drupal\n   - DevOps: Docker, Lagoon, Vortex configurations\n3. **Python Rules** (10 files): Security-focused rules following OWASP standards\n\n### Key Design Patterns\n- **Installer Architecture**:\n  - Stateless design - each execution is independent\n  - Builder pattern for rule set construction\n  - Strategy pattern for interactive vs non-interactive modes\n  - Factory pattern for rule set management\n\n### Installation Flow\n1. User executes install.php (directly or via curl)\n2. Script detects if running interactively or with parameters\n3. Creates .cursor/rules directory structure\n4. Downloads and installs selected rule files from GitHub\n5. Creates/overwrites .cursor/UPDATE.md file as an installation receipt\n6. Creates/updates AGENTS.md documentation (unless --yes flag overwrites)\n\n## Versioning System\n\n### Version Management\n- **Version Constant**: Defined in install.php as `CURSOR_RULES_VERSION`\n- **Version History**: Tracked in GitHub releases and repository documentation\n- **Release Process**:\n  1. Update CURSOR_RULES_VERSION constant in install.php\n  2. Update version history in repository documentation\n  3. Create GitHub release matching the version number\n  4. Tag the release in git\n\n### .cursor/UPDATE.md File Purpose\nThe UPDATE.md file serves as an installation receipt that:\n- Records the version of cursor-rules that was installed\n- Documents the installation date and time\n- Lists the number of rule files installed\n- Shows the installation type (core, web-stack, Python, etc.)\n- Records any tag filters that were applied\n- Gets created/overwritten by the installer on each run\n- Helps users identify which version and configuration they have installed\n\n## Known Issues and Solutions\n\n### Curl Piping Issues (Fixed in v1.0.6)\nWhen piping the installer through curl, several PHP-specific behaviors can cause problems:\n\n**Problem**: Script hangs when using `curl ... | php` commands\n**Root Causes**:\n1. `$_SERVER['PHP_SELF']` becomes \"Standard input code\" instead of script name when piped\n2. PHP continues waiting for STDIN input even after script completion\n3. Arguments may not parse correctly when using `--` separator with piped input\n\n**Solutions Implemented**:\n1. **Entry Point Detection**: Check for both normal execution and \"Standard input code\"\n   ```php\n   if (basename(__FILE__) === basename($_SERVER['PHP_SELF'] ?? '') || \n       ($_SERVER['PHP_SELF'] ?? '') === 'Standard input code')\n   ```\n\n2. **STDIN Cleanup**: Always close STDIN before exit to prevent hanging\n   ```php\n   if (defined('STDIN') && is_resource(STDIN)) {\n       fclose(STDIN);\n   }\n   ```\n\n3. **Argument Parsing**: Handle both with and without `--` separator\n   ```php\n   if (!stream_isatty(STDIN) && $_SERVER['PHP_SELF'] === 'Standard input code') {\n       // Parse arguments from argv when piped\n   }\n   ```\n\n### Testing Coverage Gaps\n**Issue**: Test suite only covered direct PHP execution, not curl piping scenarios\n**Recommendation**: Add tests for:\n- `curl ... | php` execution paths\n- `cat install.php | php` scenarios\n- Argument parsing with and without `--` separator\n- STDIN handling in different contexts\n\n## Important Considerations\n\n### When Adding New Rules\n- Follow MDC format (Markdown with custom rule syntax)\n- Place in appropriate category under .cursor/rules/\n- Update the rule arrays in install.php (core_rules, web_stack_rules, python_rules)\n- Add rule to README.md documentation table\n- Consider rule dependencies (e.g., web stack includes core rules)\n\n### When Modifying the Installer\n- Maintain PHP 8.3+ compatibility\n- Preserve both interactive and non-interactive modes\n- Update CURSOR_RULES_VERSION constant when making changes\n- Ensure all tests pass before committing\n- Test with both local files and GitHub downloads\n\n### Testing Guidelines\n- All tests are bash scripts in .tests/ directory\n- Tests use temporary directories to avoid affecting the actual installation\n- Each test should output clear success/failure messages\n- GitHub Actions runs all tests on push/PR to main branch\n\n## Security Considerations\n- Never commit sensitive information or API keys\n- Rule files should not contain hardcoded credentials\n- Installer validates file permissions and directory creation\n- Downloaded files are fetched over HTTPS from GitHub\n\n## Contributing\n- Follow conventional commits format (fix:, feat:, docs:, etc.)\n- Update relevant documentation when adding features\n- Ensure all tests pass before submitting PR\n- New rules should include clear descriptions and examples",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/CLAUDE.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "CLAUDE.md",
      "sha": "278fa9f8c4e5fbf52dc083bd6e81c5e57786d133"
    }
  },
  {
    "name": "ivangrynenko-tag-standards",
    "slug": "tag-standards",
    "displayName": "TAG_STANDARDS",
    "description": "TAG_STANDARDS cursor rules",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "# Cursor Rules - Tag Standards\n\nThis document defines the standardised tagging system used across all Cursor rules. These tags provide a structured, hierarchical way to categorise rules and enable selective installation based on project requirements.\n\n## Tag Hierarchy\n\nTags follow a hierarchical structure with the following levels:\n\n1. **Language** - The primary programming language the rule applies to\n2. **Framework** - The specific framework or CMS the rule targets\n3. **Category** - The primary functional category of the rule\n4. **Subcategory** - More granular categorisation within the category\n5. **Standard** - The formal standard or guideline the rule implements\n6. **Risk** - The specific risk identifier (when applicable)\n\n## Tag Format\n\nTags use lowercase with hyphens separating multiple words, and colons separating the tag type from its value:\n\n```\ntype:value\n```\n\nFor example: `language:javascript`, `framework:react`, `category:security`\n\n## Standard Tag Types\n\n### Language Tags\n\nLanguage tags identify the programming language the rule applies to:\n\n- `language:php`\n- `language:javascript` \n- `language:typescript`\n- `language:python`\n- `language:ruby`\n- `language:java`\n- `language:go`\n- `language:rust`\n- `language:csharp`\n- `language:bash`\n- `language:html`\n- `language:css`\n- `language:scss`\n\n### Framework Tags\n\nFramework tags specify the framework or CMS the rule targets:\n\n- `framework:angular`\n- `framework:astro`\n- `framework:bootstrap`\n- `framework:express`\n- `framework:jquery`\n- `framework:nextjs`\n- `framework:nuxtjs`\n- `framework:react`\n- `framework:tailwind`\n- `framework:vue`\n- `framework:drupal`\n- `framework:laravel`\n- `framework:symfony`\n- `framework:wordpress`\n- `framework:django`\n- `framework:fastapi`\n- `framework:flask`\n\n### Category Tags\n\nCategory tags define the primary functional focus of the rule:\n\n- `category:a11y` (for accessibility)\n- `category:best-practice`\n- `category:ci-cd`\n- `category:configuration`\n- `category:deployment`\n- `category:documentation`\n- `category:performance`\n- `category:security`\n- `category:style`\n- `category:testing`\n\n### Subcategory Tags\n\nSubcategory tags provide more granular categorisation within the primary category:\n\nFor `category:security`:\n- `subcategory:injection`\n- `subcategory:authentication`\n- `subcategory:authorisation`\n- `subcategory:xss`\n- `subcategory:csrf`\n- `subcategory:cryptography`\n- `subcategory:configuration`\n- `subcategory:data-protection`\n- `subcategory:api-security`\n- `subcategory:design`\n- `subcategory:input-validation`\n\nFor `category:performance`:\n- `subcategory:caching`\n- `subcategory:rendering`\n- `subcategory:database`\n- `subcategory:assets`\n- `subcategory:memory-management`\n\nFor `category:accessibility`:\n- `subcategory:screen-readers`\n- `subcategory:keyboard-navigation`\n- `subcategory:color-contrast`\n- `subcategory:form-accessibility`\n\n### Standard Tags\n\nStandard tags identify formal standards or guidelines the rule implements:\n\n- `standard:owasp-top10` - OWASP Top 10 web application security risks\n- `standard:wcag` - Web Content Accessibility Guidelines\n- `standard:pci-dss` - Payment Card Industry Data Security Standard\n- `standard:gdpr` - General Data Protection Regulation\n- `standard:hipaa` - Health Insurance Portability and Accountability Act\n- `standard:psr` - PHP Standards Recommendations\n- `standard:eslint` - ESLint recommended rules\n- `standard:a11y` - Accessibility standards\n- `standard:soc2` - Service Organisation Control 2\n\n### Risk Tags\n\nRisk tags specify the exact risk identifier, particularly for security standards:\n\nFor `standard:owasp-top10`:\n- `risk:a01-broken-access-control`\n- `risk:a02-cryptographic-failures`\n- `risk:a03-injection`\n- `risk:a04-insecure-design`\n- `risk:a05-security-misconfiguration`\n- `risk:a06-vulnerable-outdated-components`\n- `risk:a07-identification-authentication-failures`\n- `risk:a08-software-data-integrity-failures`\n- `risk:a09-security-logging-monitoring-failures`\n- `risk:a10-server-side-request-forgery`\n\n## Multiple Tag Values\n\nSome rules may apply to multiple languages, frameworks, or categories. In these cases, multiple tags of the same type can be specified:\n\n```\nlanguage:javascript\nlanguage:typescript\nframework:react\nframework:next\ncategory:security\nsubcategory:authentication\n```\n\n## Tag Combinations\n\nTag combinations enable precise rule selection. For example:\n\n- All security rules: `category:security`\n- PHP Drupal security rules: `language:php framework:drupal category:security`\n- OWASP injection rules for JavaScript: `language:javascript category:security standard:owasp-top10 subcategory:injection`\n- Accessibility rules for React: `framework:react category:accessibility`\n\n## Using Tags in Rule Files\n\nTags should be included in the metadata section of each rule file (.mdc):\n\n```yaml\nmetadata:\n  tags:\n    - language:php\n    - framework:drupal\n    - category:security\n    - subcategory:injection\n    - standard:owasp-top10\n    - risk:a03-injection\n```\n\n## Best Practices for Tagging\n\n1. **Consistency**: Always use the standard format and vocabulary\n2. **Specificity**: Be as specific as possible with tags\n3. **Completeness**: Include all relevant tag types\n4. **Hierarchy**: Maintain the hierarchical relationship between tags\n5. **Relevance**: Only include tags that are directly applicable to the rule\n\n## Tag-Based Selection\n\nThe tag system enables selective installation of rules based on project requirements:\n\n- Installation scripts can filter rules based on language, framework, or specific security concerns\n- Multiple tag criteria can be combined using logical operations (AND/OR)\n- Predefined rule sets can be created for common use cases (e.g., \"drupal-security\", \"react-accessibility\")\n\n## Extending the Tag System\n\nThe tag system is designed to be extensible. New tag types or values can be added as needed:\n\n1. Document the new tag type or value in this standard\n2. Ensure consistency with existing tag formats\n3. Update rule selection tools to recognise the new tags\n4. Consider backward compatibility with existing rules ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/TAG_STANDARDS.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "TAG_STANDARDS.md",
      "sha": "25eaf532673856d6856468c861720bb75d271f74"
    }
  },
  {
    "name": "ivangrynenko-docs-prd",
    "slug": "docs-prd",
    "displayName": "Docs Prd",
    "description": "# Product Requirements Document: Cursor Rules Installer  ## 1. Elevator Pitch",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "# Product Requirements Document: Cursor Rules Installer\n\n## 1. Elevator Pitch\nA PHP-based installation tool that enables developers to easily install cursor rules into their projects with a single curl command. The tool offers both interactive and non-interactive options for selecting rule sets (WebStack, Core, Python, or All), supporting keyboard navigation for a seamless user experience.\n\n## 2. Who is this app for?\nThis tool is designed for developers who work with cursor AI software and need to efficiently install cursor rules into their projects. It streamlines the process of integrating these rules, reducing setup time and ensuring consistency across multiple projects.\n\n## 3. Functional Requirements\n- **Installation Method**: Simple curl command that can be executed via PHP\n- **Rule Sets Support**:\n  - WebStack rules\n  - Core rules\n  - Python rules\n  - All rules option\n- **Installation Logic**:\n  - Core rules should be installed when either Python or WebStack are selected\n  - Support for installing all rules at once\n- **Interactive Mode**:\n  - Selection via keyboard up/down arrow navigation\n  - Visual prompts for selection options\n- **Non-Interactive Mode**:\n  - Command-line parameters for automated installation\n  - Support for all rule set options\n- **Technical Specifications**:\n  - PHP 8.3 compatibility\n  - Local testing capability (installing to temporary folder)\n  - GitHub Actions integration for CI/CD testing\n  - Testing coverage for all options, including invalid inputs\n\n## 4. User Stories\n1. **Basic Installation**\n   - As a developer, I want to copy a single curl command from the GitHub repository and execute it to install cursor rules into my project.\n\n2. **Interactive Rule Selection**\n   - As a developer, I want to interactively select which rule sets to install using keyboard navigation so that I can easily choose the appropriate rules for my project.\n\n3. **Automated Installation**\n   - As a developer, I want to specify rule sets via command-line parameters so that I can automate the installation process in scripts or CI/CD pipelines.\n\n4. **Core Rule Integration**\n   - As a developer, I want Core rules to be automatically included when I select either WebStack or Python rules so that I have the necessary foundational rules.\n\n5. **Complete Rules Installation**\n   - As a developer, I want to easily install all available rules with a single option so that I can quickly set up a comprehensive rule set.\n\n## 5. User Interface\nAs this is a command-line tool, the UI will consist of:\n\n1. **Installation Command**\n   - A simple, copy-pastable curl command visible in the GitHub repository README.\n\n2. **Interactive Mode Interface**\n   - Clear text prompts showing available options\n   - Visual indicators for currently selected option\n   - Up/down arrow navigation support\n   - Confirmation messages after selection\n\n3. **Command Execution Feedback**\n   - Progress indicators during installation\n   - Success/failure messages\n   - Summary of installed rule sets\n   - Use of common colours to indicate success, notification, warning and error type of messages.\n\n4. **Help Information**\n   - Documentation for command-line parameters\n   - Examples of common usage patterns\n\n## 6. Testing Requirements\n- Local tests that install rules into a temporary folder\n- Test coverage for all rule set combinations\n- Test handling of invalid options\n- GitHub Action for automated testing on push or pull request\n- Validation of PHP 8.3 compatibility",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/docs/prd.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "docs/prd.md",
      "sha": "4ceb5bea7e9f15381c98a09d81e430bc673c3115"
    }
  },
  {
    "name": "ivangrynenko-docs-srs",
    "slug": "docs-srs",
    "displayName": "Docs Srs",
    "description": "# Software Requirements Specification: Cursor Rules Installer  ## System Design",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "# Software Requirements Specification: Cursor Rules Installer\n\n## System Design\n- **Purpose**: PHP-based installation tool that enables the installation of cursor rules (WebStack, Core, Python) via a single curl command\n- **Components**:\n  - Installation script (PHP)\n  - Rule sets (WebStack, Core, Python, all)\n  - Testing framework\n  - CI/CD integration (GitHub Actions)\n- **Execution Flow**:\n  - User executes curl command to fetch and run the installer\n  - Installer presents options (interactive) or processes parameters (non-interactive)\n  - Selected rule sets are installed to appropriate project directories\n  - Success/failure status is reported to user\n\n## Architecture Pattern\n- **Command Line Application** using PHP\n- **Builder Pattern** for constructing rule set installations\n- **Strategy Pattern** for handling different installation modes (interactive vs. non-interactive)\n- **Factory Pattern** for rule set creation and management\n\n## State Management\n- **Execution State Tracking**:\n  - Command line arguments storage\n  - Selected options tracking\n  - Installation progress monitoring\n  - Error states handling\n- **Stateless Design**:\n  - Each execution is independent\n  - No persistent state between runs\n  - State maintained only during execution lifecycle\n\n## Data Flow\n1. **Input Collection**:\n   - Command line arguments parsing\n   - Interactive option selection\n2. **Validation**:\n   - Verify PHP version compatibility (8.3+)\n   - Validate selected options\n   - Check write permissions to target directories\n3. **Rule Selection Processing**:\n   - Determine rule dependencies (Core + selected rules)\n   - Resolve rule set paths\n4. **Installation Execution**:\n   - Copy rule files to designated locations\n   - Apply necessary file permissions\n5. **Output Generation**:\n   - Installation success/failure reporting\n   - Summary of installed rule sets\n\n## Technical Stack\n- **Languages**:\n  - PHP 8.3+ (primary implementation)\n  - Bash (supporting scripts)\n- **Development Tools**:\n  - PHPUnit (testing)\n  - phpcs, phpmd (code quality)\n- **Deployment Tools**:\n  - GitHub Actions (CI/CD)\n  - bash, zsh or other shell\n\n## Command Interface Design\n- **Interactive Mode Commands**:\n  - Selection mechanism using arrow keys\n  - Enter key for confirmation\n  - Escape key for cancellation\n- **Non-Interactive Parameters**:\n  - `--webstack`: Install WebStack rules\n  - `--python`: Install Python rules\n  - `--core`: Install Core rules\n  - `--all`: Install all rules\n  - `--help`: Display usage information\n  - `--version`: Display version information\n  - `--quiet`: Suppress output except for errors\n  - `--debug`: Enable verbose debugging output\n\n## Database Design ERD\n- **No persistent database required**\n- **File Structure**:\n  - `/.cursor/rules/webstack/`: WebStack rule files\n  - `/.cursor/rules/core/`: Core rule files\n  - `/.cursor/rules/python/`: Python rule files\n  - `/.cursor/tests/`: Test files\n  - `/install.php`: Installer files\n  - `/.tests/`: Temporary installation directory for \n  - `/docs/`: Documentation folder.",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/docs/srs.md",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "docs/srs.md",
      "sha": "62278b346ed02c2be416835ac54efee37cc5d8a0"
    }
  },
  {
    "name": "ivangrynenko-new-pull-request",
    "slug": "new-pull-request",
    "displayName": "New Pull Request",
    "description": "--- description: When you are requested to perform a pull request review globs:",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "general",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: When you are requested to perform a pull request review\nglobs: \nalwaysApply: false\n---\n# Code Review Agent Instructions\n\nYou are a senior technical lead and architect conducting automated code reviews for GitHub pull requests across multiple technology stacks (Drupal, Vue.js, React, etc.). Your role is to evaluate code changes against issue requirements and coding standards, and manage GitHub labels for workflow automation.\n\n## Primary Objectives\n\n1. **Requirement Fulfilment Analysis (50%)**: Verify code changes satisfy issue requirements\n2. **Code Standards Compliance (30%)**: Ensure adherence to technology-specific coding standards and best practices  \n3. **Security Assessment (20%)**: Validate OWASP security standards and framework-specific security practices\n4. **Label Management**: Apply appropriate GitHub labels for workflow automation\n5. **Line-Specific Feedback**: Add comments directly on problematic code lines\n\n## Input Data Analysis\n\n### Pull Request Context\n- **PR Details**: Extract PR number from provided URL or ask user to provide PR number/URL\n- **Repository Info**: Note owner, repo name, and branch information\n- **Change Statistics**: Review additions, deletions, and changed files count\n- **Use GitHub MCP tool**: Use github-mcp tool to connect to GitHub. If fails, use gh CLI.\n\n### Issue Requirements Context\nThe user will provide issue requirements through one of these methods:\n\n1. **Direct Requirements**: User copies and pastes acceptance criteria and technical directions\n2. **Issue Reference**: User provides GitHub issue number to extract requirements from\n3. **Functional Specification**: User provides or attaches a functional specification document\n4. **Mixed Input**: Combination of the above methods\n\n**Requirements Extraction Process:**\n- **Parse Provided Text**: Extract functional requirements, acceptance criteria, and technical specifications from user input\n- **GitHub Issue Integration**: If GitHub issue number provided, extract issue description and comments\n- **Document Analysis**: If functional specification provided, parse for requirements and constraints\n- **Technical Context**: Identify technology stack, modules affected, and dependencies from requirements\n- **Edge Cases**: Note any special conditions, error handling, or performance requirements\n\n**If Requirements Missing**: Request user to provide:\n- Functional requirements or acceptance criteria\n- Technical specifications or constraints\n- Expected behaviour or user stories\n- Any relevant documentation or context\n\n### Code Changes Analysis\n- **Files Modified**: Analyse changed files and their purposes\n- **File Filtering**: Skip large compiled files and focus on source code\n- **Technology Detection**: Automatically detect languages and frameworks used\n- **Code Patterns**: Review implementation approach and architecture\n- **Security Implications**: Assess security impact of changes\n\n**Technology Detection Process:**\n1. **File Extension Analysis**: Identify languages by file extensions (.php, .py, .js, .ts, .css, .vue, etc.)\n2. **Framework Detection**: Look for framework-specific files (composer.json, package.json, requirements.txt, etc.)\n3. **Project Structure**: Analyse directory structure for framework patterns\n4. **Dependency Analysis**: Check package managers and dependencies\n5. **Configuration Files**: Identify build tools, linters, and framework configs\n\n**File Analysis and Filtering:**\n```bash\n# Example file size check\nif [ $(stat -f%z \"$file\" 2>/dev/null || stat -c%s \"$file\" 2>/dev/null) -gt 1048576 ]; then\n    echo \"Skipping large file: $file (>1MB)\"\n    continue\nfi\n\n# Example compiled file detection\ncase \"$file\" in\n    *.min.js|*.min.css|*-bundle.*|*-compiled.*) \n        echo \"Skipping compiled file: $file\"\n        continue ;;\n    dist/*|build/*|node_modules/*|vendor/*)\n        echo \"Skipping vendor/build file: $file\"\n        continue ;;\nesac\n```\n\n## Review Process\n\n### 1. Requirement Analysis (Pass Score: 80%)\nCompare code changes against:\n- Provided functional requirements\n- Acceptance criteria from user input\n- Technical specifications and constraints\n- Expected functionality and behaviour\n- Edge cases and error handling requirements\n\n**Scoring Criteria:**\n- 90-100%: All requirements fully implemented with proper edge case handling\n- 80-89%: Core requirements met with minor gaps\n- 70-79%: Most requirements met but missing key functionality\n- Below 70%: Significant requirements gaps\n\n### 2. Code Standards Review (Context-Aware Scoring)\n\n**IMPORTANT**: Adjust review criteria based on repository type and detected languages:\n- For Drupal/PHP repositories: Apply Drupal and PHP-specific standards below\n- For Vue.js/React frontends: Apply frontend-specific standards (ES6+, component architecture, state management)\n- For Python applications: Apply Python-specific standards and security practices\n- For JavaScript/Node.js: Apply JavaScript standards and Node.js best practices\n- For CSS/SCSS: Apply CSS methodology and responsive design standards\n- For other technologies: Apply language-specific best practices\n\n**File Size and Compilation Detection:**\nBefore reviewing any file, check for large compiled files and skip them:\n- **Skip files > 1MB**: Likely compiled/minified assets\n- **Skip compiled CSS**: Files with names like `*.min.css`, `*-compiled.css`, `*-bundle.css`, `dist/*.css`\n- **Skip compiled JavaScript**: Files with names like `*.min.js`, `*-compiled.js`, `*-bundle.js`, `dist/*.js`, `build/*.js`\n- **Skip vendor/dependencies**: Files in `node_modules/`, `vendor/`, `dist/`, `build/`, `.next/`, `.nuxt/`\n- **Skip generated files**: Files with headers indicating auto-generation (e.g., \"This file was automatically generated\")\n- **Focus on source files**: Review actual source code, not compiled outputs\n\n#### Critical/Required Criteria:\n**Security Assessment:**\n- SQL Injection Prevention: Parameterised queries, no direct SQL concatenation\n- XSS Protection: Proper output sanitisation (Html::escape(), #plain_text)\n- CSRF Protection: Form API usage, custom forms have CSRF tokens\n- Access Control: Proper permission checks, entity access API usage\n- File Upload Security: Extension validation, MIME type checks\n- Input Validation: Server-side validation for all user inputs\n- Sensitive Data: No hardcoded credentials, API keys, or secrets\n\n**Drupal API Compliance:**\n- Entity API: Using Entity API instead of direct database queries\n- Form API: Proper form construction and validation\n- Render API: Using render arrays, not direct HTML\n- Database API: Using Database::getConnection(), not mysql_*\n- Configuration API: Config entities for settings, not variables\n- Cache API: Proper cache tags and contexts\n- Queue API: For long-running processes\n\n**Code Architecture:**\n- Dependency Injection: Services injected, not statically called\n- Hook Implementations: Correct hook usage and naming\n- Plugin System: Proper plugin implementation when applicable\n- Event Subscribers: For responding to system events\n- Service Definitions: Proper service registration\n\n**Database Changes:**\n- Update Hooks: Database schema changes in update hooks\n- Migration Scripts: For data transformations\n- Schema Definition: Proper schema API usage\n- Backward Compatibility: Rollback procedures\n\n#### Important/Recommended Criteria:\n**Performance Considerations:**\n- Query Optimisation: Avoid N+1 queries, use entity loading\n- Caching Strategy: Appropriate cache bins and invalidation\n- Asset Optimisation: Aggregation, lazy loading\n- Memory Usage: Batch processing for large datasets\n- Database Indexes: For frequently queried fields\n\n**Code Quality Standards:**\n- Drupal Coding Standards: phpcs with Drupal/DrupalPractice\n- Type Declarations: PHP 7.4+ type hints\n- Error Handling: Try-catch blocks, graceful degradation\n- Code Complexity: Cyclomatic complexity < 10\n- Function Length: Methods under 50 lines\n- DRY Principle: No code duplication\n\n**Testing Coverage:**\n- Unit Tests: For isolated functionality\n- Kernel Tests: For Drupal API integration\n- Functional Tests: For user workflows\n- JavaScript Tests: For frontend functionality\n- Test Data: Proper test fixtures and mocks\n\n**Documentation:**\n- PHPDoc Blocks: For classes and public methods\n- README Updates: For new features/modules\n- Change Records: For API changes\n- Hook Documentation: Proper @hook annotations\n- Code Comments: For complex logic only\n\n#### Optional/Nice-to-Have Criteria:\n**Accessibility (WCAG 2.1):**\n- ARIA Labels: Proper semantic markup\n- Keyboard Navigation: Full keyboard support\n- Screen Reader: Announced changes\n- Colour Contrast: WCAG AA compliance\n- Form Labels: Associated with inputs\n\n**Frontend Standards:**\n- JavaScript: ES6+, no inline scripts\n- CSS: BEM methodology, no !important\n- Responsive Design: Mobile-first approach\n- Browser Support: Per project requirements\n- Asset Libraries: Proper library definitions\n\n#### Language-Specific Standards:\n\n**For PHP/Drupal Projects:**\n- PSR Standards: Follow PSR-1, PSR-2, PSR-4 coding standards\n- Type Declarations: Use PHP 7.4+ type hints for parameters and return types\n- Error Handling: Implement try-catch blocks with specific exception types\n- Memory Management: Use unset() for large variables, avoid memory leaks\n- Security: Use prepared statements, validate input, escape output\n- Documentation: PHPDoc blocks for all public methods and classes\n\n**For Python Projects:**\n- PEP 8: Follow Python style guide (line length, naming conventions)\n- Type Hints: Use type annotations for function parameters and returns\n- Virtual Environments: Use venv or pipenv for dependency management\n- Security: Parameterised queries, input validation, avoid eval/exec\n- Error Handling: Use specific exception types, proper logging\n- Documentation: Docstrings for all functions, classes, and modules\n- Testing: Use pytest or unittest, maintain good test coverage\n\n**For JavaScript/Node.js Projects:**\n- ES6+ Features: Use modern JavaScript (const/let, arrow functions, async/await)\n- Module System: Use ES6 imports/exports or CommonJS consistently\n- Error Handling: Proper try-catch blocks, promise rejection handling\n- Security: Input validation, avoid eval(), use HTTPS, sanitise user input\n- Performance: Avoid blocking operations, use efficient algorithms\n- Testing: Jest, Mocha, or similar testing frameworks\n- Documentation: JSDoc comments for functions and classes\n\n**For Vue.js Projects:**\n- Import statements: Use named imports correctly (e.g., `import { ComponentName } from`)\n- CSS selectors: Avoid deprecated `/deep/`, use `::v-deep` for Vue 2\n- Props: Don't define props that aren't used, validate prop types\n- Component structure: Follow Vue style guide, use composition API for Vue 3\n- State management: Proper Vuex/Pinia usage, avoid direct state mutation\n- Computed properties: Should be pure functions, use reactive references\n- Lifecycle: Proper cleanup in unmounted/destroyed hooks\n\n**For React Projects:**\n- Hooks: Follow Rules of Hooks, use custom hooks for reusable logic\n- State management: Proper Redux/Context usage, avoid prop drilling\n- Component structure: Functional components preferred, proper JSX formatting\n- PropTypes or TypeScript: Type checking required for all props\n- Performance: Use React.memo, useMemo, useCallback appropriately\n- Testing: React Testing Library, proper component testing\n- Accessibility: ARIA attributes, semantic HTML, keyboard navigation\n\n**For CSS/SCSS Projects:**\n- Methodology: Use BEM, OOCSS, or consistent naming convention\n- Responsive Design: Mobile-first approach, proper breakpoints\n- Performance: Minimise CSS, avoid !important, efficient selectors\n- Accessibility: Sufficient colour contrast, focus indicators\n- Browser Support: Use autoprefixer, test across target browsers\n- Organisation: Logical file structure, consistent indentation\n- Variables: Use CSS custom properties or SCSS variables consistently\n\n**For TypeScript Projects:**\n- Strict Mode: Enable strict TypeScript configuration\n- Type Safety: Avoid 'any' type, use proper interfaces and types\n- Generics: Use generics for reusable components and functions\n- Error Handling: Proper error types, exhaustive type checking\n- Documentation: TSDoc comments, clear interface definitions\n- Testing: Type-safe testing with proper mocking\n\n**Multi-site & Multilingual:**\n- Domain Access: Proper domain-aware code\n- Configuration Split: Environment-specific configs\n- String Translation: t() and formatPlural()\n- Content Translation: Entity translation API\n\n### 3. Language-Specific Security Assessment\n\n**For PHP/Drupal Projects:**\n*Native Drupal Security (Auto-Pass Criteria):*\n- CSRF protection is handled automatically by Drupal Form API - no manual checks needed\n- Administrative forms protected by permission system - inherently secure\n- Drupal's built-in input filtering and sanitisation - trust the framework\n- Entity access control through Drupal's entity system - framework handles this\n\n*Manual Security Checks Required:*\n- Custom database queries must use parameterised queries\n- Direct HTML output must use proper sanitisation functions\n- File uploads must validate file types and permissions\n- Custom access callbacks must be properly implemented\n- No hardcoded credentials or API keys\n- Proper session management and authentication\n\n**For Python Projects:**\n*Critical Security Checks:*\n- SQL injection: Use parameterised queries, ORM frameworks (Django ORM, SQLAlchemy)\n- Command injection: Avoid shell=True, use subprocess with argument lists\n- XSS prevention: Template auto-escaping, proper input validation\n- Path traversal: Validate file paths, use os.path.join() safely\n- Authentication: Secure password hashing (bcrypt, scrypt), proper session management\n- Input validation: Use validation libraries, sanitise all user input\n\n**For JavaScript/Node.js Projects:**\n*Critical Security Checks:*\n- XSS prevention: Sanitise user input, use Content Security Policy\n- SQL injection: Use parameterised queries, ORM/query builders\n- Authentication: Secure JWT implementation, proper session management\n- CSRF protection: Use CSRF tokens, SameSite cookies\n- Dependency security: Regular npm audit, avoid vulnerable packages\n- Input validation: Validate and sanitise all user inputs\n\n**For Frontend Projects (Vue.js/React):**\n*Critical Security Checks:*\n- XSS prevention: Avoid dangerouslySetInnerHTML, sanitise user content\n- Authentication: Secure token storage, proper logout functionality\n- API security: Validate API responses, handle errors securely\n- Content Security Policy: Implement proper CSP headers\n- Dependency security: Regular security audits of frontend dependencies\n- Data exposure: Avoid exposing sensitive data in client-side code\n\n**For CSS/SCSS Projects:**\n*Security Considerations:*\n- No external resource loading without integrity checks\n- Avoid CSS injection vulnerabilities in dynamic styles\n- Proper handling of user-generated content in styles\n- No sensitive information in CSS comments or variables\n\n## Line-Specific Comments (CRITICAL)\n\n**ALWAYS add line-specific comments** for identified issues using the GitHub review API:\n\n1. **Use the review API** to create a review with line comments:\n   ```bash\n   # Create a JSON file with review comments\n   cat > /tmp/review_comments.json << 'EOF'\n   {\n     \"body\": \"Code review with line-specific feedback\",\n     \"event\": \"REQUEST_CHANGES\", # or \"APPROVE\" or \"COMMENT\"\n     \"comments\": [\n       {\n         \"path\": \"path/to/file.ext\",\n         \"line\": 123, # Line number in the diff\n         \"body\": \"Your comment here with code suggestions\"\n       }\n     ]\n   }\n   EOF\n   \n   # Submit the review\n   gh api repos/{owner}/{repo}/pulls/{pr_number}/reviews -X POST --input /tmp/review_comments.json\n   ```\n\n2. **Line comment best practices**:\n   - Be specific about the issue and provide the fix\n   - Include code snippets showing the correct implementation\n   - Reference relevant documentation or standards\n   - Use markdown formatting for clarity\n\n3. **Common pitfalls to avoid**:\n   - Don't use `gh pr comment` for line-specific feedback (it only adds general comments)\n   - Don't try to use deprecated comment APIs\n   - Ensure line numbers match the diff view, not the file view\n\n## Decision Criteria (Technology-Context Aware)\n\n- **Approve**: Overall score ≥ 80% AND requirement fulfilment ≥ 80% AND no critical security issues\n- **Request Changes**: Overall score < 75% OR requirement fulfilment < 80% OR critical security vulnerabilities\n- **Comment**: Score 75-79% with minor issues\n\n**Framework-Specific Notes:**\n- **Drupal projects**: Native security features (Form API CSRF, permission-based access, Entity API) are considered secure by default\n- **Django projects**: Built-in CSRF protection and ORM are considered secure when used properly\n- **React/Vue projects**: Framework-specific security features (like React's XSS protection) are considered secure by default\n- **Express.js projects**: Manual security implementation required for most features\n\n## GitHub Label Management\n\n**Required Standard Labels** (create if not present with specified colours):\n\n**Review Status Labels:**\n- `code-review-approved` - PR passes all quality checks\n  - **Colour**: `#1f7a1f` (dark green)\n- `code-review-changes` - Changes requested before approval\n  - **Colour**: `#cc8800` (dark orange)\n- `code-review-security` - Security issues identified\n  - **Colour**: `#dc3545` (red)\n\n**Quality Labels:**\n- `standards-compliant` - Coding standards followed\n  - **Colour**: `#6f42c1` (purple)\n- `requirements-met` - Functional requirements satisfied\n  - **Colour**: `#1f7a1f` (dark green)\n- `requirements-gap` - Missing or incomplete functionality\n  - **Colour**: `#cc8800` (dark orange)\n\n**Technical Labels:**\n- `performance-impact` - Performance concerns identified\n  - **Colour**: `#fd7e14` (orange)\n- `documentation-needed` - Missing or inadequate documentation\n  - **Colour**: `#17a2b8` (blue)\n- `testing-required` - Additional tests needed\n  - **Colour**: `#e83e8c` (pink)\n- `upgrade-compatibility` - Version compatibility issues\n  - **Colour**: `#6c757d` (grey)\n\n**Language Labels:**\n- `lang/php` - PHP code changes\n  - **Colour**: `#777bb4` (PHP purple)\n- `lang/python` - Python code changes\n  - **Colour**: `#3776ab` (Python blue)\n- `lang/javascript` - JavaScript code changes\n  - **Colour**: `#f7df1e` (JavaScript yellow)\n- `lang/typescript` - TypeScript code changes\n  - **Colour**: `#3178c6` (TypeScript blue)\n- `lang/css` - CSS/SCSS code changes\n  - **Colour**: `#1572b6` (CSS blue)\n- `lang/html` - HTML template changes\n  - **Colour**: `#e34f26` (HTML orange)\n\n**Size Labels** (based on PR statistics):\n- `size/xs` - 1-10 lines changed\n  - **Colour**: `#28a745` (light green)\n- `size/s` - 11-50 lines changed\n  - **Colour**: `#ffc107` (yellow)\n- `size/m` - 51-200 lines changed\n  - **Colour**: `#fd7e14` (orange)\n- `size/l` - 201-500 lines changed\n  - **Colour**: `#dc3545` (red)\n- `size/xl` - 500+ lines changed\n  - **Colour**: `#6f42c1` (purple)\n\n**Component Labels** (based on affected modules):\n- `component/backend` - Backend/server-side changes\n  - **Colour**: `#0d6efd` (blue)\n- `component/frontend` - Frontend/UI changes\n  - **Colour**: `#20c997` (teal)\n- `component/api` - API modifications\n  - **Colour**: `#6610f2` (indigo)\n- `component/config` - Configuration changes\n  - **Colour**: `#fd7e14` (orange)\n- `component/security` - Security-related changes\n  - **Colour**: `#dc3545` (red)\n\n## Label Application Logic\n\n**File Analysis and Skipping:**\nBefore applying labels, analyse changed files:\n1. **Skip large files (>1MB)**: Likely compiled/minified assets\n2. **Skip compiled files**: `*.min.js`, `*.min.css`, `*-bundle.*`, `dist/*`, `build/*`\n3. **Skip vendor directories**: `node_modules/`, `vendor/`, `.next/`, `.nuxt/`\n4. **Skip auto-generated files**: Check file headers for generation markers\n5. **Focus on source files**: Only review actual source code\n\n**Auto-Apply Labels Based On:**\n- **Score ≥ 80%**: Add `code-review-approved`\n- **Score < 80%**: Add `code-review-changes` \n- **Security Issues**: Add `code-review-security`\n- **Standards Violations**: Add `standards-compliant` (remove if violations found)\n- **Requirement Score ≥ 80%**: Add `requirements-met`\n- **Requirement Score < 80%**: Add `requirements-gap`\n- **Performance Warnings**: Add `performance-impact`\n- **Documentation Issues**: Add `documentation-needed`\n- **Missing Tests**: Add `testing-required`\n- **Compatibility Issues**: Add `upgrade-compatibility`\n\n**Language Detection and Labels:**\n- **PHP files (*.php, *.inc, *.module)**: Add `lang/php`\n- **Python files (*.py)**: Add `lang/python`\n- **JavaScript files (*.js, *.jsx)**: Add `lang/javascript`\n- **TypeScript files (*.ts, *.tsx)**: Add `lang/typescript`\n- **CSS files (*.css, *.scss, *.sass)**: Add `lang/css`\n- **HTML files (*.html, *.twig, *.vue)**: Add `lang/html`\n\n**Label Application Methods:**\n1. **Preferred**: Use `gh issue edit` command (works for PRs too):\n   ```bash\n   gh issue edit {pr_number} --repo {owner}/{repo} --add-label \"label1\" --add-label \"label2\"\n   ```\n2. **Alternative**: If repository uses non-standard labels, check existing labels first:\n   ```bash\n   gh label list --repo {owner}/{repo} --limit 100\n   ```\n   Then apply the most appropriate existing labels\n\n## Review Summary Output\n\nProvide a structured review summary in markdown format:\n\n```markdown\n# Pull Request Review Summary\n\n## Overall Assessment\n- **Overall Score**: X/100\n- **Requirements Fulfilment**: X/100\n- **Code Standards**: X/100\n- **Security Assessment**: X/100\n- **Decision**: [APPROVE/REQUEST_CHANGES/COMMENT]\n\n## Requirements Analysis\n### ✅ Requirements Met\n- [List fulfilled requirements]\n\n### ❌ Requirements Gaps\n- [List missing or incomplete requirements]\n\n## Code Quality Assessment\n### Critical Issues\n- [List critical issues that must be fixed]\n\n### Important Issues\n- [List important issues that should be addressed]\n\n### Recommendations\n- [List optional improvements]\n\n## Security Assessment\n- [Security findings and recommendations]\n\n## Technical Summary\n### Files Changed\n- [Summary of changed files and their purposes]\n\n### Architecture Impact\n- [Assessment of architectural changes]\n\n### Performance Considerations\n- [Performance impact analysis]\n\n## Next Steps\n- [Specific actions required before approval]\n- [Recommendations for future improvements]\n```\n\n## Australian English\nUse Australian English spelling and terminology throughout the review.\n\n## PR Review Checklist\n\nWhen reviewing, ensure you check:\n\n### Critical (Must Pass):\n- [ ] **File Analysis**: Skip compiled/minified files (>1MB, *.min.*, dist/*, build/*)\n- [ ] **Security**: No SQL injection, XSS, command injection vulnerabilities\n- [ ] **Authentication**: Proper access control and authentication implemented\n- [ ] **Secrets**: No hardcoded credentials, API keys, or sensitive data\n- [ ] **Framework APIs**: Framework-specific APIs used correctly\n- [ ] **Database**: Database updates handled properly with migrations\n- [ ] **File Operations**: File uploads validated, path traversal prevented\n\n### Important (Should Pass):\n- [ ] **Performance**: Optimised queries, caching, efficient algorithms\n- [ ] **Standards**: Language-specific coding standards followed\n- [ ] **Testing**: Adequate test coverage for new functionality\n- [ ] **Documentation**: Updated documentation, code comments\n- [ ] **Error Handling**: Proper exception handling and logging\n- [ ] **Code Quality**: No duplication, maintainable structure\n\n### Language-Specific Checks:\n\n**PHP/Drupal:**\n- [ ] PSR standards compliance\n- [ ] Drupal API usage (Entity, Form, Render APIs)\n- [ ] Update hooks for schema changes\n- [ ] Proper caching implementation\n\n**Python:**\n- [ ] PEP 8 compliance\n- [ ] Type hints for functions\n- [ ] Virtual environment usage\n- [ ] Proper exception handling\n\n**JavaScript/Node.js:**\n- [ ] ES6+ features used appropriately\n- [ ] Proper async/await usage\n- [ ] No eval() or dangerous functions\n- [ ] Dependency security (npm audit)\n\n**Frontend (Vue.js/React):**\n- [ ] Component structure follows best practices\n- [ ] State management properly implemented\n- [ ] Accessibility features included\n- [ ] Performance optimisations applied\n\n**CSS/SCSS:**\n- [ ] Consistent methodology (BEM, etc.)\n- [ ] Responsive design implemented\n- [ ] No !important overuse\n- [ ] Proper browser support\n\n### Nice to Have:\n- [ ] **Accessibility**: WCAG compliance, keyboard navigation\n- [ ] **Internationalisation**: Multilingual support where applicable\n- [ ] **Performance**: Advanced optimisations, lazy loading\n- [ ] **SEO**: Proper meta tags, structured data\n- [ ] **Progressive Enhancement**: Graceful degradation\n\n### Commonly Missed:\n- [ ] **Large File Detection**: Skipping compiled/generated files\n- [ ] **Dependency Updates**: Security patches, version compatibility\n- [ ] **Environment Configuration**: Proper config management\n- [ ] **Logging**: Adequate logging for debugging\n- [ ] **Monitoring**: Performance and error monitoring setup\n\n## CRITICAL: Self-Improvement Protocol\n\n**MANDATORY**: After EVERY code review session, you MUST update the review knowledge base (create `docs/pr-review-lessons.md` if it doesn't exist) with:\n\n1. **New Technology Stacks Encountered**:\n   - Add specific review criteria for any new frameworks/languages\n   - Document unique linting rules or standards\n   - Note build/test commands specific to that stack\n\n2. **Command Issues and Workarounds**:\n   - Document any gh CLI commands that failed and why\n   - Add working alternatives you discovered\n   - Update examples with real, tested commands\n\n3. **Repository-Specific Patterns**:\n   - Custom label schemes used by specific organisations\n   - Unique workflow requirements\n   - Special security or compliance needs\n\n4. **Review Process Improvements**:\n   - Better ways to extract requirements from user input\n   - More efficient review workflows\n   - Time-saving automation opportunities\n\n5. **Common Code Issues by Technology**:\n   - Add to the \"Commonly Missed\" sections\n   - Create new sections for technology-specific pitfalls\n   - Update scoring criteria based on real reviews\n\n### Update Process:\n1. At the end of each review, ask yourself: \"What did I learn?\"\n2. Document new patterns, issues, or solutions discovered\n3. Add real examples from the review you just completed\n4. Test any new commands before documenting them\n\n### Example Update Entry:\n```markdown\n### [Date] - Technology: [Stack] - Repository: [Name]\n**Issue**: [What happened]\n**Solution**: [How you solved it]\n**Future Prevention**: [What to do next time]\n```\n\n## Lessons Learned from Review Sessions\n\n### What Works Well:\n1. **gh CLI**: Reliable for PR operations\n2. **gh issue edit**: Works for adding labels to PRs (PRs are issues in GitHub)\n3. **Review API**: Best method for line-specific comments\n4. **JSON input files**: Clean way to structure complex review data\n\n### Common Pitfalls:\n1. **Don't assume technology stack**: Always detect the actual technology used\n2. **Check existing labels**: Repos may have custom label schemes\n3. **Line comments require review API**: `gh pr comment` only adds general comments\n4. **Requirements may be incomplete**: Always ask for clarification if requirements are unclear\n5. **Import statements**: Watch for incorrect ES6 module imports in frontend code\n6. **Deprecated features**: Stay updated on deprecated patterns across technologies\n\n### Technology-Specific Discoveries:\n\n#### Vue.js (Vue 2)\n- **Issue**: `/deep/` selector still being used\n- **Solution**: Always flag for `::v-deep` replacement\n- **Common Pattern**: Unused props passed but never utilised\n\n#### GitHub API Quirks\n- **Issue**: `gh pr edit --add-label` fails with permissions error\n- **Solution**: Use `gh issue edit` instead (PRs are issues)\n- **Note**: Some repos have 100+ custom labels - always check first\n\n#### Requirements Gathering\n- **Issue**: Vague or incomplete requirements provided\n- **Solution**: Ask specific questions about expected behaviour, edge cases, and constraints\n- **Pattern**: Users often provide implementation details but miss functional requirements\n",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/new-pull-request.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "new-pull-request.mdc",
      "sha": "200a9768b4f2cffcfd1da6f70be55bd8fed66c52"
    }
  },
  {
    "name": "ivangrynenko-testing-guidelines",
    "slug": "testing-guidelines",
    "displayName": "Testing Guidelines",
    "description": "--- description:  globs:",
    "author": "ivangrynenko",
    "type": "cursor",
    "category": "quality-testing",
    "tags": [
      "cursor",
      "cursor-rule"
    ],
    "content": "---\ndescription: \nglobs: \nalwaysApply: false\n---\n# Testing Guidelines\n\nEnsures proper testing practices and separation between test and production code.\n\n<rule>\nname: testing_guidelines\ndescription: Enforce standards for testing, test-production separation, and test documentation\nfilters:\n  - type: file_extension\n    pattern: \"\\\\.(php|js|ts|py|jsx|tsx|vue)$\"\n  - type: file_path\n    pattern: \"tests/|Test\\\\.php$|test\\\\.js$|\\\\.spec\\\\.|__tests__/\"\n\nactions:\n  - type: enforce\n    conditions:\n      - pattern: \"\\\\btest\\\\b.*\\\\bproduction\\\\b.*\\\\bcode\\\\b\"\n        message: \"Maintain strict separation between test code and production code.\"\n\n      - pattern: \"\\\\bmock\\\\b.*\\\\bproduction\\\\b\"\n        message: \"Use dependency injection or interfaces to swap real components with mocks or stubs in tests.\"\n\n      - pattern: \"\\\\btest\\\\b.*\\\\bmodify\\\\b.*\\\\bproduction\\\\b\"\n        message: \"Document and justify any change made to production code solely for testing purposes.\"\n\n      - pattern: \"\\\\btest\\\\b.*\\\\bdocumentation\\\\b\"\n        message: \"Write tests to validate behaviors as documented in product or code documentation.\"\n\n  - type: suggest\n    message: |\n      **Testing Best Practices:**\n      \n      **1. Test-Production Separation:**\n      - Place test code in dedicated test directories or modules, separate from production code.\n      - Allow test-specific helpers or hooks only in a controlled manner (e.g., via clearly isolated interfaces or configurations).\n      - Production code should remain unchanged for testing, unless using approved test extension points.\n      \n      **2. Testability (Mocks and Stubs):**\n      - Prefer dependency injection or interfaces to swap real components with mocks or stubs in tests.\n      - Avoid duplicating production logic in test code; tests should call into production code or use simplified mocks rather than reimplementing logic.\n      - Consider using test doubles (mocks, stubs, fakes) to isolate the code under test from external dependencies.\n      \n      **3. Exception Handling:**\n      - Document and justify any change made to production code solely for testing purposes.\n      - Obtain approval through a formal review process (e.g., code review by senior developers or architects) for such changes.\n      - Ensure that any approved change does not alter the intended functionality of the production code.\n      \n      **4. Documentation Alignment:**\n      - Write tests to validate behaviors as documented in product or code documentation.\n      - If a test reveals a discrepancy between actual behavior and documentation, address it by updating the documentation via the normal process, not by changing production code to fit tests.\n      - Keep production code comments and descriptions unchanged during testing; refine tests or documentation instead to resolve mismatches.\n      \n      **5. Industry Best Practices:**\n      - Clearly delineate test types (unit, integration, end-to-end) and ensure each is executed in appropriate environments.\n      - Isolate tests to avoid side effects, and clean up any test data or state after execution.\n      - Integrate tests into continuous integration workflows to run automatically without requiring changes to production code.\n      - Follow the Arrange-Act-Assert (AAA) pattern for structuring test cases.\n      - Ensure tests are deterministic and do not depend on external state or timing.\n\n  - type: validate\n    conditions:\n      - pattern: \"test\\\\s+class\\\\s+\\\\w+\\\\s*\\\\{\"\n        message: \"Ensure test classes follow naming conventions and are placed in appropriate test directories.\"\n\n      - pattern: \"assert|expect|should\"\n        message: \"Include proper assertions in test methods to validate expected behavior.\"\n\n      - pattern: \"setUp|tearDown|beforeEach|afterEach\"\n        message: \"Consider using setup and teardown methods to manage test state and avoid duplication.\"\n\nmetadata:\n  priority: high\n  version: 1.1\n</rule> ",
    "sourceUrl": "https://github.com/ivangrynenko/cursorrules/blob/main/testing-guidelines.mdc",
    "version": "1.0.0",
    "metadata": {
      "originalPath": "testing-guidelines.mdc",
      "sha": "bf33fa6b1414a2a50673a1efb313cba0a26b5d57"
    }
  }
]