name: Registry Deploy

on:
  push:
    paths:
      - 'packages/registry/**'
      - '.github/workflows/registry-*.yml'
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get ECR repository name
        id: ecr-repo
        run: |
          STACK="${{ inputs.environment || 'dev' }}"
          REPO_NAME="prpm-${STACK}-registry"
          echo "repo-name=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ steps.ecr-repo.outputs.repo-name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/registry
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  run-migrations:
    name: Run Database Migrations
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run migrations via ECS task
        run: |
          STACK="${{ inputs.environment || 'dev' }}"
          CLUSTER="prpm-${STACK}-cluster"
          TASK_DEF="prpm-${STACK}-task"

          # Get VPC configuration
          SUBNET=$(aws ec2 describe-subnets \
            --filters "Name=tag:Type,Values=private" "Name=tag:Environment,Values=${STACK}" \
            --query 'Subnets[0].SubnetId' \
            --output text)

          SECURITY_GROUP=$(aws ec2 describe-security-groups \
            --filters "Name=tag:Name,Values=prpm-${STACK}-ecs-sg" \
            --query 'SecurityGroups[0].GroupId' \
            --output text)

          # Run migration task
          TASK_ARN=$(aws ecs run-task \
            --cluster ${CLUSTER} \
            --task-definition ${TASK_DEF} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${SUBNET}],securityGroups=[${SECURITY_GROUP}],assignPublicIp=DISABLED}" \
            --overrides '{"containerOverrides":[{"name":"prpm-registry","command":["npm","run","migrate"]}]}' \
            --query 'tasks[0].taskArn' \
            --output text)

          echo "Migration task started: ${TASK_ARN}"

          # Wait for task to complete
          aws ecs wait tasks-stopped --cluster ${CLUSTER} --tasks ${TASK_ARN}

          # Check exit code
          EXIT_CODE=$(aws ecs describe-tasks \
            --cluster ${CLUSTER} \
            --tasks ${TASK_ARN} \
            --query 'tasks[0].containers[0].exitCode' \
            --output text)

          if [ "${EXIT_CODE}" != "0" ]; then
            echo "Migration failed with exit code ${EXIT_CODE}"
            exit 1
          fi

          echo "Migrations completed successfully"

  deploy-service:
    name: Deploy ECS Service
    needs: [build-and-push, run-migrations]
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Force new deployment
        run: |
          STACK="${{ inputs.environment || 'dev' }}"
          CLUSTER="prpm-${STACK}-cluster"
          SERVICE="prpm-${STACK}-service"

          aws ecs update-service \
            --cluster ${CLUSTER} \
            --service ${SERVICE} \
            --force-new-deployment \
            --output text

          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${CLUSTER} \
            --services ${SERVICE}

          echo "Deployment completed successfully"

  health-check:
    name: Health Check
    needs: deploy-service
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ALB DNS name
        id: alb
        run: |
          STACK="${{ inputs.environment || 'dev' }}"
          DNS_NAME=$(aws elbv2 describe-load-balancers \
            --names "prpm-${STACK}-alb" \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          echo "dns-name=${DNS_NAME}" >> $GITHUB_OUTPUT

      - name: Check health endpoint
        run: |
          for i in {1..10}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://${{ steps.alb.outputs.dns-name }}/health)
            if [ "$STATUS" = "200" ]; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Attempt $i: Health check returned status $STATUS, retrying..."
            sleep 10
          done
          echo "Health check failed after 10 attempts"
          exit 1

      - name: Output deployment URL
        run: |
          echo "ðŸš€ Deployment successful!"
          echo "API URL: http://${{ steps.alb.outputs.dns-name }}"
          echo "Health: http://${{ steps.alb.outputs.dns-name }}/health"
          echo "Docs: http://${{ steps.alb.outputs.dns-name }}/docs"
