name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: prmp
          POSTGRES_PASSWORD: prmp
          POSTGRES_DB: prpm_registry
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 15s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9000:9000
          - 9001:9001

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: registry/package-lock.json

      - name: Install dependencies
        run: |
          cd registry
          npm ci

      - name: Start MinIO
        run: docker exec $(docker ps -q --filter ancestor=minio/minio:latest) sh -c "minio server /data --address :9000 --console-address :9001 &" || echo "MinIO already running"

      - name: Wait for MinIO
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:9000/minio/health/live; do echo "Waiting for MinIO..."; sleep 2; done' || echo "MinIO ready"

      - name: Create MinIO bucket
        run: |
          cd registry
          node scripts/create-minio-bucket.js || echo "Bucket exists or creation skipped"
        env:
          AWS_ENDPOINT: http://localhost:9000
          AWS_ACCESS_KEY_ID: minioadmin
          AWS_SECRET_ACCESS_KEY: minioadmin

      - name: Start Registry Server
        run: |
          cd registry
          PORT=4000 npm run dev > /tmp/registry.log 2>&1 &
          echo $! > /tmp/registry.pid
          sleep 15
        env:
          NODE_ENV: test
          PORT: 4000
          DATABASE_URL: postgresql://prmp:prmp@localhost:5432/prpm_registry
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          AWS_REGION: us-east-1
          AWS_ENDPOINT: http://localhost:9000
          AWS_ACCESS_KEY_ID: minioadmin
          AWS_SECRET_ACCESS_KEY: minioadmin
          S3_BUCKET: prpm-packages
          AWS_FORCE_PATH_STYLE: "true"
          ENABLE_TELEMETRY: "false"

      - name: Wait for Registry
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4000/health; do echo "Waiting for registry..."; sleep 3; done'
          echo "✅ Registry is up!"

      - name: Test Health Endpoint
        run: |
          response=$(curl -s http://localhost:4000/health)
          echo "Health check response: $response"
          if echo "$response" | grep -q '"status":"ok"'; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

      - name: Test API Endpoints
        run: |
          # Test packages endpoint
          curl -f http://localhost:4000/api/v1/packages?limit=5 || exit 1
          
          # Test search endpoint  
          curl -f "http://localhost:4000/api/v1/search?q=test&limit=5" || exit 1
          
          # Test trending endpoint
          curl -f http://localhost:4000/api/v1/packages/trending?limit=5 || exit 1
          
          # Test collections endpoint
          curl -f http://localhost:4000/api/v1/collections?limit=5 || exit 1
          
          echo "✅ All API endpoints responding"

      - name: Test Security Headers
        run: |
          headers=$(curl -sI http://localhost:4000/health)
          
          if echo "$headers" | grep -q "X-Content-Type-Options"; then
            echo "✅ Security headers present"
          else
            echo "❌ Security headers missing"
            exit 1
          fi

      - name: Test Rate Limiting
        run: |
          headers=$(curl -sI http://localhost:4000/health)
          
          if echo "$headers" | grep -q "x-ratelimit-limit"; then
            echo "✅ Rate limiting active"
          else
            echo "❌ Rate limiting not configured"
            exit 1
          fi

      - name: Run E2E Test Suite
        run: |
          cd registry
          chmod +x scripts/e2e-test.sh
          timeout 120 bash scripts/e2e-test.sh || echo "E2E tests completed with warnings"

      - name: Display Registry Logs
        if: always()
        run: |
          echo "=== Registry Server Logs ==="
          cat /tmp/registry.log || echo "No logs available"

      - name: Cleanup
        if: always()
        run: |
          if [ -f /tmp/registry.pid ]; then
            kill $(cat /tmp/registry.pid) || true
          fi
