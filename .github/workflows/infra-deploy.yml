name: Infrastructure Deploy

on:
  push:
    paths:
      - 'packages/infra/**'
      - '.github/workflows/infra-*.yml'
    branches:
      - main
  workflow_dispatch:
    inputs:
      stack:
        description: 'Pulumi stack to deploy'
        required: true
        type: choice
        options:
          - prod

permissions:
  contents: read
  id-token: write

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  AWS_REGION: us-west-2

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ inputs.stack || 'prod' }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Pulumi
        uses: pulumi/actions@v5

      - name: Install Pulumi plugins
        working-directory: packages/infra
        run: |
          echo "📦 Installing Pulumi plugins..."
          pulumi plugin install resource aws v6.83.0
          pulumi plugin install resource awsx v2.22.0
          echo "✅ Pulumi plugins installed"

      - name: Switch to Beanstalk configuration
        working-directory: packages/infra
        run: |
          if [ ! -f index-beanstalk.ts ]; then
            echo "Error: index-beanstalk.ts not found"
            exit 1
          fi
          # Backup current index.ts if it's not already beanstalk
          if ! grep -q "Elastic Beanstalk" index.ts 2>/dev/null; then
            cp index.ts index-ecs-backup.ts
            echo "ℹ️  Backed up ECS configuration to index-ecs-backup.ts"
          fi
          cp index-beanstalk.ts index.ts
          echo "✅ Switched to Beanstalk configuration"

      - name: Configure Stack
        working-directory: packages/infra
        run: |
          set -e  # Exit on error

          STACK="${{ inputs.stack || 'prod' }}"
          pulumi stack select $STACK || pulumi stack init $STACK

          # AWS region
          pulumi config set aws:region ${{ env.AWS_REGION }}

          # Database credentials
          echo "Setting database configuration..."
          pulumi config set db:username prpm

          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "ERROR: DB_PASSWORD secret is not set"
            exit 1
          fi
          pulumi config set --secret db:password "${{ secrets.DB_PASSWORD }}"
          echo "✓ Database password set"

          # GitHub OAuth
          echo "Setting GitHub OAuth configuration..."
          if [ -n "${{ secrets.GITHUB_CLIENT_ID }}" ]; then
            pulumi config set --secret github:clientId "${{ secrets.GITHUB_CLIENT_ID }}"
            echo "✓ GitHub client ID set"
          else
            echo "⚠️  GitHub client ID not set (optional)"
          fi

          if [ -n "${{ secrets.GITHUB_CLIENT_SECRET }}" ]; then
            pulumi config set --secret github:clientSecret "${{ secrets.GITHUB_CLIENT_SECRET }}"
            echo "✓ GitHub client secret set"
          else
            echo "⚠️  GitHub client secret not set (optional)"
          fi

          # Beanstalk configuration
          pulumi config set app:instanceType t3.micro
          pulumi config set app:minSize 1
          pulumi config set app:maxSize 2

          # Domain configuration
          if [ "$STACK" = "prod" ]; then
            pulumi config set app:domainName registry.prpm.dev
          fi

          # Verify configuration
          echo ""
          echo "Configuration summary:"
          pulumi config

          # Verify required secrets are set
          if ! pulumi config get db:password --show-secrets >/dev/null 2>&1; then
            echo "ERROR: db:password not set after configuration"
            exit 1
          fi
          echo "✓ All required configuration verified"

      - name: Check infrastructure status
        working-directory: packages/infra
        run: |
          echo "🔍 Checking infrastructure status..."

          # Get the environment name from Pulumi state (without deploying)
          EB_ENVIRONMENT_NAME=$(pulumi stack output beanstalkEnvironmentName 2>/dev/null || echo "")

          if [ -z "$EB_ENVIRONMENT_NAME" ]; then
            echo "🔍 No environment found in Pulumi state. Will deploy infrastructure..."
          else
            echo "🔍 Checking environment status: $EB_ENVIRONMENT_NAME"

            # Check if the environment exists and is healthy
            EB_ENV_STATUS=$(aws elasticbeanstalk describe-environments --environment-names "$EB_ENVIRONMENT_NAME" --query "Environments[0].Status" --output text 2>/dev/null || echo "NOT_FOUND")

            if [ "$EB_ENV_STATUS" = "Terminated" ] || [ "$EB_ENV_STATUS" = "NOT_FOUND" ]; then
              echo "⚠️  Environment is $EB_ENV_STATUS. Deleting from Pulumi state and recreating..."

              # Delete the environment from Pulumi state
              EB_URN=$(pulumi stack --show-urns | awk '/aws:elasticbeanstalk\/environment:Environment/ {print $1; exit}')
              if [ -n "$EB_URN" ]; then
                echo "🔧 Deleting environment from Pulumi state: $EB_URN"
                pulumi state delete "$EB_URN" --force
              fi

              echo "🔄 Infrastructure will be recreated..."
            else
              echo "✅ Environment exists and is in state: $EB_ENV_STATUS"
              echo "🔍 Checking if infrastructure changes are needed..."

              # Check if there are any changes to apply
              if pulumi preview --diff --expect-no-changes 2>/dev/null; then
                echo "✅ No infrastructure changes needed"
              else
                echo "🔄 Infrastructure changes detected"
              fi
            fi
          fi
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Pulumi Up
        working-directory: packages/infra
        run: |
          STACK="${{ inputs.stack || 'prod' }}"
          echo "🚀 Deploying infrastructure..."
          pulumi up --yes --non-interactive
        env:
          PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}

      - name: Ensure Pulumi stack is selected
        working-directory: packages/infra
        run: |
          export PULUMI_CONFIG_PASSPHRASE="${{ secrets.PULUMI_CONFIG_PASSPHRASE }}"
          STACK="${{ inputs.stack || 'prod' }}"
          echo "Current directory: $(pwd)"
          echo "Listing available stacks:"
          pulumi stack ls
          echo "Environment: $STACK"
          # Ensure the correct stack is selected
          pulumi stack select $STACK
          echo "✅ Pulumi stack selected: $STACK"

      - name: Get resource URLs with retry
        id: get-resources
        working-directory: packages/infra
        run: |
          export PULUMI_CONFIG_PASSPHRASE="${{ secrets.PULUMI_CONFIG_PASSPHRASE }}"

          # Debug: Check current stack and available outputs
          echo "🔍 Debug: Current Pulumi stack:"
          pulumi stack --show-urns
          echo "🔍 Debug: Available stack outputs:"
          pulumi stack output --show-secrets || echo "No outputs available"

          # Retry getting the environment name with a few attempts
          EB_ENVIRONMENT_NAME=""
          for i in {1..5}; do
            echo "🔍 Attempt $i/5: Trying to get beanstalkEnvironmentName..."
            EB_ENVIRONMENT_NAME=$(pulumi stack output beanstalkEnvironmentName 2>/dev/null || echo "")
            echo "🔍 Raw output: '$EB_ENVIRONMENT_NAME'"
            if [ -n "$EB_ENVIRONMENT_NAME" ]; then
              echo "✅ Got environment name: $EB_ENVIRONMENT_NAME"
              break
            else
              echo "⏳ Attempt $i/5: Environment name not available yet, waiting..."
              sleep 10
            fi
          done

          if [ -z "$EB_ENVIRONMENT_NAME" ]; then
            echo "❌ Failed to get environment name after 5 attempts"
            echo "🔍 Trying to get environment name from AWS directly..."

            # Try to get environment name from AWS if Pulumi output is not available
            EB_APP_NAME=$(pulumi stack output beanstalkApplicationName 2>/dev/null || echo "")
            if [ -n "$EB_APP_NAME" ]; then
              echo "🔍 Found application name: $EB_APP_NAME"
              EB_ENVIRONMENT_NAME=$(aws elasticbeanstalk describe-environments --application-name "$EB_APP_NAME" --query "Environments[0].EnvironmentName" --output text 2>/dev/null || echo "")
              if [ -n "$EB_ENVIRONMENT_NAME" ]; then
                echo "✅ Got environment name from AWS: $EB_ENVIRONMENT_NAME"
              else
                echo "❌ Could not get environment name from AWS either"
                exit 1
              fi
            else
              echo "❌ Could not get application name from Pulumi"
              exit 1
            fi
          fi

          EB_APPLICATION_NAME=$(pulumi stack output beanstalkApplicationName 2>/dev/null || echo "")
          S3_BUCKET_NAME=$(pulumi stack output s3BucketName 2>/dev/null || echo "")
          echo "eb_environment_name=$EB_ENVIRONMENT_NAME" >> $GITHUB_OUTPUT
          echo "eb_application_name=$EB_APPLICATION_NAME" >> $GITHUB_OUTPUT
          echo "s3_bucket_name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Verify Elastic Beanstalk environment exists
        run: |
          echo "🔍 Verifying Elastic Beanstalk environment exists..."
          EB_ENVIRONMENT_NAME="${{ steps.get-resources.outputs.eb_environment_name }}"
          EB_APPLICATION_NAME="${{ steps.get-resources.outputs.eb_application_name }}"

          echo "Environment name: $EB_ENVIRONMENT_NAME"
          echo "Application name: $EB_APPLICATION_NAME"

          # Wait until environment exists
          echo "⏳ Waiting for environment to exist..."
          aws elasticbeanstalk wait environment-exists --environment-names "$EB_ENVIRONMENT_NAME" || true

          # Wait until environment is Ready (with retries)
          for i in {1..30}; do
            ENV_STATUS=$(aws elasticbeanstalk describe-environments --environment-names "$EB_ENVIRONMENT_NAME" --query "Environments[0].Status" --output text 2>/dev/null || echo "NOT_FOUND")
            ENV_HEALTH=$(aws elasticbeanstalk describe-environments --environment-names "$EB_ENVIRONMENT_NAME" --query "Environments[0].Health" --output text 2>/dev/null || echo "UNKNOWN")
            echo "⏳ EB Status: $ENV_STATUS, Health: $ENV_HEALTH (attempt $i/30)"
            if [ "$ENV_STATUS" = "Ready" ]; then
              echo "✅ Environment is Ready"
              break
            fi
            sleep 20
          done

          if [ "$ENV_STATUS" != "Ready" ]; then
            echo "⚠️  Environment is not Ready after waiting. Continuing but app deploy may take longer."
          fi

      - name: Export Pulumi Outputs
        working-directory: packages/infra
        run: |
          export PULUMI_CONFIG_PASSPHRASE="${{ secrets.PULUMI_CONFIG_PASSPHRASE }}"
          pulumi stack output --json > stack-outputs.json
          cat stack-outputs.json

      - name: Upload Outputs
        uses: actions/upload-artifact@v4
        with:
          name: pulumi-outputs-${{ inputs.stack || 'prod' }}
          path: packages/infra/stack-outputs.json
          retention-days: 30
