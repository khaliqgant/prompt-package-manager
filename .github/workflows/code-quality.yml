name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  typescript-check:
    name: TypeScript Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Check Registry TypeScript
        id: registry-ts
        run: |
          cd registry
          ERROR_COUNT=$(npx tsc --noEmit 2>&1 | grep -E "error TS" | grep -v "__tests__" | wc -l || echo "0")
          echo "errors=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "üìä Registry TypeScript Errors (production): $ERROR_COUNT"

          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "‚ùå Production code has TypeScript errors"
            npx tsc --noEmit 2>&1 | grep -E "error TS" | grep -v "__tests__" | head -20
            exit 1
          fi

      - name: Check CLI TypeScript
        id: cli-ts
        run: |
          cd packages/cli
          ERROR_COUNT=$(npx tsc --noEmit 2>&1 | grep "error TS" | wc -l || echo "0")
          ERROR_COUNT=$(echo "$ERROR_COUNT" | tr -d '[:space:]')
          echo "errors=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "üìä CLI TypeScript Errors: $ERROR_COUNT"

          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "‚ùå CLI has TypeScript errors"
            npx tsc --noEmit 2>&1 | grep "error TS" | head -20
            exit 1
          fi

      - name: Check Registry Client TypeScript
        id: client-ts
        run: |
          cd packages/registry-client
          ERROR_COUNT=$(npx tsc --noEmit 2>&1 | grep "error TS" | wc -l || echo "0")
          ERROR_COUNT=$(echo "$ERROR_COUNT" | tr -d '[:space:]')
          echo "errors=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "üìä Registry Client TypeScript Errors: $ERROR_COUNT"

          if [ "$ERROR_COUNT" -gt 0 ]; then
            echo "‚ùå Registry Client has TypeScript errors"
            npx tsc --noEmit 2>&1 | grep "error TS" | head -20
            exit 1
          fi

      - name: Report TypeScript Metrics
        run: |
          echo "## TypeScript Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Errors | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Registry (Production) | ${{ steps.registry-ts.outputs.errors }} | ${{ steps.registry-ts.outputs.errors == '0' && '‚úÖ Clean' || '‚ùå Has errors' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CLI | ${{ steps.cli-ts.outputs.errors }} | ${{ steps.cli-ts.outputs.errors == '0' && '‚úÖ Clean' || '‚ùå Has errors' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Registry Client | ${{ steps.client-ts.outputs.errors }} | ${{ steps.client-ts.outputs.errors == '0' && '‚úÖ Clean' || '‚ùå Has errors' }} |" >> $GITHUB_STEP_SUMMARY

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Audit Registry
        id: audit-registry
        run: |
          cd registry
          npm audit --audit-level=moderate --json > audit-registry.json || true
          CRITICAL=$(cat audit-registry.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-registry.json | jq '.metadata.vulnerabilities.high // 0')
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "üìä Registry: $CRITICAL critical, $HIGH high vulnerabilities"

      - name: Audit Root
        id: audit-root
        run: |
          npm audit --audit-level=moderate --json > audit-root.json || true
          CRITICAL=$(cat audit-root.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-root.json | jq '.metadata.vulnerabilities.high // 0')
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "üìä Root: $CRITICAL critical, $HIGH high vulnerabilities"

      - name: Security Report
        run: |
          echo "## Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Critical | High | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|----------|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Registry | ${{ steps.audit-registry.outputs.critical }} | ${{ steps.audit-registry.outputs.high }} | ${{ steps.audit-registry.outputs.critical == '0' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Root | ${{ steps.audit-root.outputs.critical }} | ${{ steps.audit-root.outputs.high }} | ${{ steps.audit-root.outputs.critical == '0' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Fail on critical vulnerabilities
        if: steps.audit-registry.outputs.critical != '0' || steps.audit-root.outputs.critical != '0'
        run: |
          echo "‚ùå Critical vulnerabilities found!"
          exit 1

  code-metrics:
    name: Code Metrics
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Count lines of code
        id: loc
        run: |
          REGISTRY_TS=$(find registry/src -name "*.ts" -not -path "*/node_modules/*" -not -path "*/__tests__/*" | xargs wc -l 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
          CLI_TS=$(find packages/cli/src -name "*.ts" -not -path "*/node_modules/*" -not -path "*/__tests__/*" 2>/dev/null | xargs wc -l 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
          CLIENT_TS=$(find packages/registry-client/src -name "*.ts" -not -path "*/node_modules/*" -not -path "*/__tests__/*" 2>/dev/null | xargs wc -l 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
          echo "registry=$REGISTRY_TS" >> $GITHUB_OUTPUT
          echo "cli=$CLI_TS" >> $GITHUB_OUTPUT
          echo "client=$CLIENT_TS" >> $GITHUB_OUTPUT

      - name: Code Metrics Report
        run: |
          echo "## Code Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Lines of TypeScript |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Registry | ${{ steps.loc.outputs.registry }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CLI | ${{ steps.loc.outputs.cli }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Registry Client | ${{ steps.loc.outputs.client }} |" >> $GITHUB_STEP_SUMMARY

  all-quality-checks:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [typescript-check, security-audit, code-metrics]
    if: always()

    steps:
      - name: Summary
        run: |
          if [ "${{ needs.typescript-check.result }}" != "success" ]; then
            echo "‚ùå TypeScript checks failed"
            exit 1
          fi
          if [ "${{ needs.security-audit.result }}" != "success" ]; then
            echo "‚ö†Ô∏è  Security audit found issues"
          fi
          echo "‚úÖ Code quality checks completed"
