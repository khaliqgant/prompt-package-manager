name: Deploy Infrastructure (Pulumi + Beanstalk)

on:
  push:
    branches:
      - main
    paths:
      - 'packages/infra/**'
  workflow_dispatch:
    inputs:
      stack:
        description: 'Pulumi stack to deploy (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - up
          - destroy

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
  AWS_REGION: us-east-1

jobs:
  pulumi:
    name: Pulumi Infrastructure (${{ github.event.inputs.stack || 'dev' }})
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/infra

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          npm ci
          echo "‚úÖ Dependencies installed successfully"

      - name: Switch to Beanstalk configuration
        working-directory: packages/infra
        run: |
          if [ ! -f index-beanstalk.ts ]; then
            echo "Error: index-beanstalk.ts not found"
            exit 1
          fi
          # Backup current index.ts if it's not already beanstalk
          if ! grep -q "Elastic Beanstalk" index.ts 2>/dev/null; then
            cp index.ts index-ecs-backup.ts
            echo "‚ÑπÔ∏è  Backed up ECS configuration to index-ecs-backup.ts"
          fi
          cp index-beanstalk.ts index.ts
          echo "‚úÖ Switched to Beanstalk configuration"

      - name: Select Pulumi Stack
        working-directory: packages/infra
        run: |
          STACK="${{ github.event.inputs.stack || 'dev' }}"
          pulumi login
          pulumi stack select $STACK || pulumi stack init $STACK
          echo "‚úÖ Selected stack: $STACK"

      - name: Configure Pulumi Stack (if new)
        if: github.event.inputs.action == 'up' || github.event_name == 'push'
        working-directory: packages/infra
        run: |
          STACK="${{ github.event.inputs.stack || 'dev' }}"

          # Set AWS region
          pulumi config set aws:region ${{ env.AWS_REGION }}

          # Database credentials (from secrets)
          pulumi config set prpm-infra:db:username prpm
          pulumi config set --secret prpm-infra:db:password "${{ secrets.DB_PASSWORD }}"

          # GitHub OAuth (from secrets)
          pulumi config set --secret prpm-infra:github:clientId "${{ secrets.GITHUB_CLIENT_ID }}"
          pulumi config set --secret prpm-infra:github:clientSecret "${{ secrets.GITHUB_CLIENT_SECRET }}"

          # Beanstalk configuration
          pulumi config set prpm-infra:app:instanceType t3.micro
          pulumi config set prpm-infra:app:minSize 1
          pulumi config set prpm-infra:app:maxSize 2

          # Domain configuration
          if [ "$STACK" = "prod" ]; then
            pulumi config set prpm-infra:app:domainName registry.prpm.dev
          elif [ "$STACK" = "staging" ]; then
            pulumi config set prpm-infra:app:domainName staging.prpm.dev
          fi

          echo "‚úÖ Stack configured for $STACK"

      - name: Pulumi Preview
        if: github.event.inputs.action == 'preview' || github.event_name == 'push'
        working-directory: packages/infra
        run: |
          pulumi preview --diff --show-replacement-steps
          echo "‚úÖ Preview completed successfully"

      - name: Pulumi Up
        if: github.event.inputs.action == 'up'
        working-directory: packages/infra
        run: |
          pulumi up --yes --skip-preview
          echo "‚úÖ Infrastructure deployed successfully"

      - name: Pulumi Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: packages/infra
        run: |
          echo "‚ö†Ô∏è  Destroying infrastructure for ${{ github.event.inputs.stack }}"
          pulumi destroy --yes
          echo "‚úÖ Infrastructure destroyed"

      - name: Export Stack Outputs
        if: github.event.inputs.action == 'up' || github.event_name == 'push'
        id: pulumi_outputs
        working-directory: packages/infra
        run: |
          pulumi stack output --json > outputs.json
          cat outputs.json

          # Export key outputs as environment variables
          echo "BEANSTALK_ENV=$(pulumi stack output beanstalkEnvironmentName --show-secrets)" >> $GITHUB_OUTPUT
          echo "BEANSTALK_APP=$(pulumi stack output beanstalkApplicationName --show-secrets)" >> $GITHUB_OUTPUT
          echo "API_URL=$(pulumi stack output apiUrl --show-secrets)" >> $GITHUB_OUTPUT
          echo "DB_ENDPOINT=$(pulumi stack output dbEndpoint --show-secrets)" >> $GITHUB_OUTPUT
          echo "‚úÖ Outputs exported successfully"

      - name: Save outputs as artifact
        if: github.event.inputs.action == 'up' || github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: pulumi-outputs-${{ github.event.inputs.stack || 'dev' }}
          path: packages/infra/outputs.json
          retention-days: 30

      - name: Comment on PR (if preview)
        if: github.event_name == 'pull_request' && github.event.inputs.action == 'preview'
        uses: actions/github-script@v7
        with:
          script: |
            const output = require('./packages/infra/outputs.json');
            const comment = `## Pulumi Preview - ${{ github.event.inputs.stack || 'dev' }}

            Infrastructure changes will be applied to \`${{ github.event.inputs.stack || 'dev' }}\` stack.

            **Estimated Monthly Cost:** $32.50-40 (Beanstalk)

            <details>
            <summary>Stack Outputs</summary>

            \`\`\`json
            ${JSON.stringify(output, null, 2)}
            \`\`\`
            </details>
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Notify Slack (on failure)
        if: failure()
        run: |
          echo "‚ö†Ô∏è  Pulumi deployment failed for ${{ github.event.inputs.stack || 'dev' }}"
          # Add Slack webhook notification here if needed

    outputs:
      beanstalk_env: ${{ steps.pulumi_outputs.outputs.BEANSTALK_ENV }}
      beanstalk_app: ${{ steps.pulumi_outputs.outputs.BEANSTALK_APP }}
      api_url: ${{ steps.pulumi_outputs.outputs.API_URL }}

  verify:
    name: Verify Deployment
    needs: pulumi
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'up' || github.event_name == 'push'

    steps:
      - name: Wait for infrastructure to stabilize
        run: sleep 60

      - name: Test API Health Endpoint
        run: |
          API_URL="${{ needs.pulumi.outputs.api_url }}"
          echo "Testing health endpoint: $API_URL/health"

          # Retry up to 5 times
          for i in {1..5}; do
            if curl -sf "$API_URL/health" | grep -q "ok"; then
              echo "‚úÖ Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 10s..."
            sleep 10
          done

          echo "‚ùå Health check failed"
          exit 1

      - name: Test API Packages Endpoint
        run: |
          API_URL="${{ needs.pulumi.outputs.api_url }}"
          echo "Testing packages endpoint: $API_URL/api/v1/packages"

          RESPONSE=$(curl -sf "$API_URL/api/v1/packages?limit=1")
          echo "$RESPONSE" | jq .

          if echo "$RESPONSE" | jq -e '.packages' > /dev/null; then
            echo "‚úÖ Packages endpoint working"
          else
            echo "‚ùå Packages endpoint failed"
            exit 1
          fi

      - name: Deployment Summary
        run: |
          echo "## üöÄ Deployment Successful"
          echo ""
          echo "**Stack:** ${{ github.event.inputs.stack || 'dev' }}"
          echo "**API URL:** ${{ needs.pulumi.outputs.api_url }}"
          echo "**Beanstalk App:** ${{ needs.pulumi.outputs.beanstalk_app }}"
          echo "**Beanstalk Env:** ${{ needs.pulumi.outputs.beanstalk_env }}"
          echo ""
          echo "**Estimated Cost:** $32.50-40/month"
          echo "**Savings vs ECS:** $93.50/month (74%)"
