name: Publish Packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
          - prerelease
      custom_version:
        description: 'Custom version (optional, overrides version type)'
        required: false
        type: string
      packages:
        description: 'Packages to publish (comma-separated: types,registry-client,cli or "all")'
        required: true
        default: 'all'
        type: string
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        type: boolean
        default: false
      tag:
        description: 'NPM dist-tag (latest, next, beta, alpha)'
        required: false
        type: choice
        options:
          - latest
          - next
          - beta
          - alpha
        default: 'latest'

permissions:
  contents: write
  id-token: write

jobs:
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest
    outputs:
      packages_to_publish: ${{ steps.determine.outputs.packages }}
      version_strategy: ${{ steps.version.outputs.version_strategy }}
      version_type: ${{ steps.version.outputs.version_type }}
      custom_version: ${{ steps.version.outputs.custom_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build packages in dependency order
        run: |
          npm run build --workspace=@pr-pm/types
          npm run build --workspace=@pr-pm/registry-client
          npm run build --workspace=prpm

      - name: Determine packages to publish
        id: determine
        run: |
          PACKAGES="${{ github.event.inputs.packages }}"

          if [ "$PACKAGES" = "all" ]; then
            PUBLISH_PACKAGES='["types", "registry-client", "cli"]'
          else
            # Convert comma-separated to JSON array
            PUBLISH_PACKAGES=$(echo "$PACKAGES" | jq -R 'split(",") | map(select(length > 0))')
          fi

          echo "packages=$PUBLISH_PACKAGES" >> $GITHUB_OUTPUT
          echo "Will publish: $PUBLISH_PACKAGES"

      - name: Determine version
        id: version
        run: |
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
          VERSION_TYPE="${{ github.event.inputs.version }}"

          if [ -n "$CUSTOM_VERSION" ]; then
            echo "version_strategy=custom" >> $GITHUB_OUTPUT
            echo "custom_version=$CUSTOM_VERSION" >> $GITHUB_OUTPUT
            echo "Version strategy: custom ($CUSTOM_VERSION)"
          else
            echo "version_strategy=bump" >> $GITHUB_OUTPUT
            echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
            echo "Version strategy: bump ($VERSION_TYPE)"
          fi

  publish:
    name: Publish ${{ matrix.package }}
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.validate.outputs.packages_to_publish) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build dependencies in order
        run: |
          # Build in dependency order: types → registry-client
          npm run build --workspace=@pr-pm/types
          npm run build --workspace=@pr-pm/registry-client

      - name: Determine and update version for this package
        id: package_version
        run: |
          cd packages/${{ matrix.package }}

          if [ "${{ needs.validate.outputs.version_strategy }}" = "custom" ]; then
            # Use custom version
            NEW_VERSION="${{ needs.validate.outputs.custom_version }}"
            npm version "$NEW_VERSION" --no-git-tag-version --allow-same-version
          else
            # Bump version based on current package version
            VERSION_TYPE="${{ needs.validate.outputs.version_type }}"
            CURRENT_VERSION=$(node -p "require('./package.json').version")

            echo "Current version: $CURRENT_VERSION"
            echo "Bumping: $VERSION_TYPE"

            # Use npm version to calculate the bump
            NEW_VERSION=$(npm version $VERSION_TYPE --no-git-tag-version --preid=beta 2>&1 | tail -1 | sed 's/v//')
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Package ${{ matrix.package }} will be published as: $NEW_VERSION"

          # Update version in index.ts for CLI package
          if [ "${{ matrix.package }}" = "cli" ]; then
            echo "Updating version in src/index.ts to $NEW_VERSION"
            sed -i "s/.version('.*')/.version('$NEW_VERSION')/" src/index.ts
            echo "✓ Updated index.ts version"
          fi

      - name: Build package
        run: |
          if [ "${{ matrix.package }}" = "cli" ]; then
            npm run build --workspace=prpm
          else
            npm run build --workspace=@pr-pm/${{ matrix.package }}
          fi

      - name: Dry run check
        if: github.event.inputs.dry_run == 'true'
        run: |
          cd packages/${{ matrix.package }}
          echo "Package: Dry run - would publish:"
          npm pack --dry-run
          npm publish --dry-run --access public --tag ${{ github.event.inputs.tag }}

      - name: Publish to NPM
        if: github.event.inputs.dry_run != 'true'
        run: |
          cd packages/${{ matrix.package }}
          npm publish --access public --tag ${{ github.event.inputs.tag }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Report published
        run: |
          PKG_NAME="${{ matrix.package }}"
          if [ "$PKG_NAME" = "cli" ]; then
            echo "[OK] Published prpm@${{ steps.package_version.outputs.new_version }}"
          else
            echo "[OK] Published @pr-pm/${{ matrix.package }}@${{ steps.package_version.outputs.new_version }}"
          fi
          echo "Tag: ${{ github.event.inputs.tag }}"

  create-git-tag:
    name: Create Git Tag and Release
    needs: [validate, publish]
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Determine versions from published packages
        id: collect_versions
        run: |
          PACKAGES='${{ needs.validate.outputs.packages_to_publish }}'
          VERSION_STRATEGY="${{ needs.validate.outputs.version_strategy }}"

          # If custom version was used, use that for the tag
          if [ "$VERSION_STRATEGY" = "custom" ]; then
            RELEASE_TAG="v${{ needs.validate.outputs.custom_version }}"
            echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
            echo "Using custom version tag: $RELEASE_TAG"
          else
            # Use timestamp-based tag for per-package bumps
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            RELEASE_TAG="release-$TIMESTAMP"
            echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
            echo "Using timestamp tag: $RELEASE_TAG"
          fi

          # Collect current versions for release notes
          VERSIONS_LIST=""
          echo "$PACKAGES" | jq -r '.[]' | while read package; do
            VERSION=$(node -p "require('./packages/$package/package.json').version")
            if [ "$package" = "cli" ]; then
              echo "- prpm@$VERSION" >> /tmp/versions.txt
            else
              echo "- @pr-pm/$package@$VERSION" >> /tmp/versions.txt
            fi
          done

      - name: Commit version bumps (packages were already bumped during publish)
        run: |
          # Check if there are any changes (there shouldn't be since publish job already bumped)
          if git diff --quiet packages/*/package.json; then
            echo "No version changes to commit (already published)"
          else
            git add packages/*/package.json
            PACKAGES="${{ needs.validate.outputs.packages_to_publish }}"
            TAG="${{ github.event.inputs.tag }}"

            git commit -m "chore(release): publish packages" \
              -m "Published packages: ${PACKAGES}" \
              -m "NPM Tag: ${TAG}" \
              -m "" \
              -m "Generated with Claude Code via Happy" \
              -m "Co-Authored-By: Claude <noreply@anthropic.com>" \
              -m "Co-Authored-By: Happy <yesreply@happy.engineering>" \
              || echo "No changes to commit"

            git push origin main
          fi

      - name: Create and push tag
        run: |
          RELEASE_TAG="${{ steps.collect_versions.outputs.release_tag }}"
          git tag -a "$RELEASE_TAG" -m "Release $RELEASE_TAG"
          git push origin "$RELEASE_TAG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.collect_versions.outputs.release_tag }}
          name: Release ${{ steps.collect_versions.outputs.release_tag }}
          body: |
            ## Published Packages

            $(cat /tmp/versions.txt || echo "See package versions below")

            ### NPM Tag
            `${{ github.event.inputs.tag }}`

            ### Installation

            ```bash
            # Install latest CLI
            npm install -g prpm@latest

            # Or install specific versions listed above
            ```

            ---

            🤖 Generated with [Claude Code](https://claude.com/claude-code) via [Happy](https://happy.engineering)
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    name: Publish Summary
    needs: [validate, publish, create-git-tag]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Summary
        run: |
          echo "## 📦 NPM Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version Strategy**: \`${{ needs.validate.outputs.version_strategy }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**NPM Tag**: \`${{ github.event.inputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run**: \`${{ github.event.inputs.dry_run }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Published Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List packages (each was versioned independently)
          echo '${{ needs.validate.outputs.packages_to_publish }}' | jq -r '.[]' | while read pkg; do
            if [ "$pkg" = "cli" ]; then
              echo "- prpm (CLI)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- @pr-pm/$pkg" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "⚠️ **This was a dry run - no packages were actually published**" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Packages successfully published to NPM**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Install latest CLI:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "npm install -g prpm@latest" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
